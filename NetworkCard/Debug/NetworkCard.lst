
NetworkCard.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d0 <deregister_tm_clones>:
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <deregister_tm_clones+0x14>)
 80001d2:	4805      	ldr	r0, [pc, #20]	; (80001e8 <deregister_tm_clones+0x18>)
 80001d4:	1a1b      	subs	r3, r3, r0
 80001d6:	2b06      	cmp	r3, #6
 80001d8:	d902      	bls.n	80001e0 <deregister_tm_clones+0x10>
 80001da:	4b04      	ldr	r3, [pc, #16]	; (80001ec <deregister_tm_clones+0x1c>)
 80001dc:	b103      	cbz	r3, 80001e0 <deregister_tm_clones+0x10>
 80001de:	4718      	bx	r3
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	200000a7 	.word	0x200000a7
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000

080001f0 <register_tm_clones>:
 80001f0:	4905      	ldr	r1, [pc, #20]	; (8000208 <register_tm_clones+0x18>)
 80001f2:	4806      	ldr	r0, [pc, #24]	; (800020c <register_tm_clones+0x1c>)
 80001f4:	1a09      	subs	r1, r1, r0
 80001f6:	1089      	asrs	r1, r1, #2
 80001f8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001fc:	1049      	asrs	r1, r1, #1
 80001fe:	d002      	beq.n	8000206 <register_tm_clones+0x16>
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <register_tm_clones+0x20>)
 8000202:	b103      	cbz	r3, 8000206 <register_tm_clones+0x16>
 8000204:	4718      	bx	r3
 8000206:	4770      	bx	lr
 8000208:	200000a4 	.word	0x200000a4
 800020c:	200000a4 	.word	0x200000a4
 8000210:	00000000 	.word	0x00000000

08000214 <__do_global_dtors_aux>:
 8000214:	b510      	push	{r4, lr}
 8000216:	4c06      	ldr	r4, [pc, #24]	; (8000230 <__do_global_dtors_aux+0x1c>)
 8000218:	7823      	ldrb	r3, [r4, #0]
 800021a:	b943      	cbnz	r3, 800022e <__do_global_dtors_aux+0x1a>
 800021c:	f7ff ffd8 	bl	80001d0 <deregister_tm_clones>
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <__do_global_dtors_aux+0x20>)
 8000222:	b113      	cbz	r3, 800022a <__do_global_dtors_aux+0x16>
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <__do_global_dtors_aux+0x24>)
 8000226:	f3af 8000 	nop.w
 800022a:	2301      	movs	r3, #1
 800022c:	7023      	strb	r3, [r4, #0]
 800022e:	bd10      	pop	{r4, pc}
 8000230:	200000a4 	.word	0x200000a4
 8000234:	00000000 	.word	0x00000000
 8000238:	08006b20 	.word	0x08006b20

0800023c <frame_dummy>:
 800023c:	b508      	push	{r3, lr}
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <frame_dummy+0x24>)
 8000240:	b11b      	cbz	r3, 800024a <frame_dummy+0xe>
 8000242:	4908      	ldr	r1, [pc, #32]	; (8000264 <frame_dummy+0x28>)
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <frame_dummy+0x2c>)
 8000246:	f3af 8000 	nop.w
 800024a:	4808      	ldr	r0, [pc, #32]	; (800026c <frame_dummy+0x30>)
 800024c:	6803      	ldr	r3, [r0, #0]
 800024e:	b913      	cbnz	r3, 8000256 <frame_dummy+0x1a>
 8000250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000254:	e7cc      	b.n	80001f0 <register_tm_clones>
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <frame_dummy+0x34>)
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f9      	beq.n	8000250 <frame_dummy+0x14>
 800025c:	4798      	blx	r3
 800025e:	e7f7      	b.n	8000250 <frame_dummy+0x14>
 8000260:	00000000 	.word	0x00000000
 8000264:	200000a8 	.word	0x200000a8
 8000268:	08006b20 	.word	0x08006b20
 800026c:	200000a4 	.word	0x200000a4
 8000270:	00000000 	.word	0x00000000

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800046e:	f1a4 0401 	sub.w	r4, r4, #1
 8000472:	d1e9      	bne.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f092 0f00 	teq	r2, #0
 800061a:	bf14      	ite	ne
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	4770      	bxeq	lr
 8000622:	b530      	push	{r4, r5, lr}
 8000624:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000630:	e720      	b.n	8000474 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_ul2d>:
 8000634:	ea50 0201 	orrs.w	r2, r0, r1
 8000638:	bf08      	it	eq
 800063a:	4770      	bxeq	lr
 800063c:	b530      	push	{r4, r5, lr}
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	e00a      	b.n	800065a <__aeabi_l2d+0x16>

08000644 <__aeabi_l2d>:
 8000644:	ea50 0201 	orrs.w	r2, r0, r1
 8000648:	bf08      	it	eq
 800064a:	4770      	bxeq	lr
 800064c:	b530      	push	{r4, r5, lr}
 800064e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000652:	d502      	bpl.n	800065a <__aeabi_l2d+0x16>
 8000654:	4240      	negs	r0, r0
 8000656:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800065a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000662:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000666:	f43f aedc 	beq.w	8000422 <__adddf3+0xe6>
 800066a:	f04f 0203 	mov.w	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	fa00 fc03 	lsl.w	ip, r0, r3
 800068a:	fa20 f002 	lsr.w	r0, r0, r2
 800068e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000692:	ea40 000e 	orr.w	r0, r0, lr
 8000696:	fa21 f102 	lsr.w	r1, r1, r2
 800069a:	4414      	add	r4, r2
 800069c:	e6c1      	b.n	8000422 <__adddf3+0xe6>
 800069e:	bf00      	nop

080006a0 <__aeabi_dmul>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ae:	bf1d      	ittte	ne
 80006b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006b4:	ea94 0f0c 	teqne	r4, ip
 80006b8:	ea95 0f0c 	teqne	r5, ip
 80006bc:	f000 f8de 	bleq	800087c <__aeabi_dmul+0x1dc>
 80006c0:	442c      	add	r4, r5
 80006c2:	ea81 0603 	eor.w	r6, r1, r3
 80006c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006d2:	bf18      	it	ne
 80006d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e0:	d038      	beq.n	8000754 <__aeabi_dmul+0xb4>
 80006e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006e6:	f04f 0500 	mov.w	r5, #0
 80006ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006f6:	f04f 0600 	mov.w	r6, #0
 80006fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006fe:	f09c 0f00 	teq	ip, #0
 8000702:	bf18      	it	ne
 8000704:	f04e 0e01 	orrne.w	lr, lr, #1
 8000708:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800070c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000710:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000714:	d204      	bcs.n	8000720 <__aeabi_dmul+0x80>
 8000716:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800071a:	416d      	adcs	r5, r5
 800071c:	eb46 0606 	adc.w	r6, r6, r6
 8000720:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000724:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000728:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800072c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000730:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000734:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000738:	bf88      	it	hi
 800073a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800073e:	d81e      	bhi.n	800077e <__aeabi_dmul+0xde>
 8000740:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000744:	bf08      	it	eq
 8000746:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800074a:	f150 0000 	adcs.w	r0, r0, #0
 800074e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000758:	ea46 0101 	orr.w	r1, r6, r1
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000768:	bfc2      	ittt	gt
 800076a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800076e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000772:	bd70      	popgt	{r4, r5, r6, pc}
 8000774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000778:	f04f 0e00 	mov.w	lr, #0
 800077c:	3c01      	subs	r4, #1
 800077e:	f300 80ab 	bgt.w	80008d8 <__aeabi_dmul+0x238>
 8000782:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000786:	bfde      	ittt	le
 8000788:	2000      	movle	r0, #0
 800078a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800078e:	bd70      	pople	{r4, r5, r6, pc}
 8000790:	f1c4 0400 	rsb	r4, r4, #0
 8000794:	3c20      	subs	r4, #32
 8000796:	da35      	bge.n	8000804 <__aeabi_dmul+0x164>
 8000798:	340c      	adds	r4, #12
 800079a:	dc1b      	bgt.n	80007d4 <__aeabi_dmul+0x134>
 800079c:	f104 0414 	add.w	r4, r4, #20
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f305 	lsl.w	r3, r0, r5
 80007a8:	fa20 f004 	lsr.w	r0, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c0:	fa21 f604 	lsr.w	r6, r1, r4
 80007c4:	eb42 0106 	adc.w	r1, r2, r6
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 040c 	rsb	r4, r4, #12
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f304 	lsl.w	r3, r0, r4
 80007e0:	fa20 f005 	lsr.w	r0, r0, r5
 80007e4:	fa01 f204 	lsl.w	r2, r1, r4
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f4:	f141 0100 	adc.w	r1, r1, #0
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f1c4 0520 	rsb	r5, r4, #32
 8000808:	fa00 f205 	lsl.w	r2, r0, r5
 800080c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000810:	fa20 f304 	lsr.w	r3, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea43 0302 	orr.w	r3, r3, r2
 800081c:	fa21 f004 	lsr.w	r0, r1, r4
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	fa21 f204 	lsr.w	r2, r1, r4
 8000828:	ea20 0002 	bic.w	r0, r0, r2
 800082c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f094 0f00 	teq	r4, #0
 8000840:	d10f      	bne.n	8000862 <__aeabi_dmul+0x1c2>
 8000842:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000846:	0040      	lsls	r0, r0, #1
 8000848:	eb41 0101 	adc.w	r1, r1, r1
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	bf08      	it	eq
 8000852:	3c01      	subeq	r4, #1
 8000854:	d0f7      	beq.n	8000846 <__aeabi_dmul+0x1a6>
 8000856:	ea41 0106 	orr.w	r1, r1, r6
 800085a:	f095 0f00 	teq	r5, #0
 800085e:	bf18      	it	ne
 8000860:	4770      	bxne	lr
 8000862:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000866:	0052      	lsls	r2, r2, #1
 8000868:	eb43 0303 	adc.w	r3, r3, r3
 800086c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000870:	bf08      	it	eq
 8000872:	3d01      	subeq	r5, #1
 8000874:	d0f7      	beq.n	8000866 <__aeabi_dmul+0x1c6>
 8000876:	ea43 0306 	orr.w	r3, r3, r6
 800087a:	4770      	bx	lr
 800087c:	ea94 0f0c 	teq	r4, ip
 8000880:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000884:	bf18      	it	ne
 8000886:	ea95 0f0c 	teqne	r5, ip
 800088a:	d00c      	beq.n	80008a6 <__aeabi_dmul+0x206>
 800088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000896:	d1d1      	bne.n	800083c <__aeabi_dmul+0x19c>
 8000898:	ea81 0103 	eor.w	r1, r1, r3
 800089c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a0:	f04f 0000 	mov.w	r0, #0
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008aa:	bf06      	itte	eq
 80008ac:	4610      	moveq	r0, r2
 80008ae:	4619      	moveq	r1, r3
 80008b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008b4:	d019      	beq.n	80008ea <__aeabi_dmul+0x24a>
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	d102      	bne.n	80008c2 <__aeabi_dmul+0x222>
 80008bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c0:	d113      	bne.n	80008ea <__aeabi_dmul+0x24a>
 80008c2:	ea95 0f0c 	teq	r5, ip
 80008c6:	d105      	bne.n	80008d4 <__aeabi_dmul+0x234>
 80008c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008cc:	bf1c      	itt	ne
 80008ce:	4610      	movne	r0, r2
 80008d0:	4619      	movne	r1, r3
 80008d2:	d10a      	bne.n	80008ea <__aeabi_dmul+0x24a>
 80008d4:	ea81 0103 	eor.w	r1, r1, r3
 80008d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
 80008ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008f2:	bd70      	pop	{r4, r5, r6, pc}

080008f4 <__aeabi_ddiv>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000902:	bf1d      	ittte	ne
 8000904:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000908:	ea94 0f0c 	teqne	r4, ip
 800090c:	ea95 0f0c 	teqne	r5, ip
 8000910:	f000 f8a7 	bleq	8000a62 <__aeabi_ddiv+0x16e>
 8000914:	eba4 0405 	sub.w	r4, r4, r5
 8000918:	ea81 0e03 	eor.w	lr, r1, r3
 800091c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000920:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000924:	f000 8088 	beq.w	8000a38 <__aeabi_ddiv+0x144>
 8000928:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800092c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000930:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000934:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000938:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800093c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000940:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000944:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000948:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800094c:	429d      	cmp	r5, r3
 800094e:	bf08      	it	eq
 8000950:	4296      	cmpeq	r6, r2
 8000952:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000956:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800095a:	d202      	bcs.n	8000962 <__aeabi_ddiv+0x6e>
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	1ab6      	subs	r6, r6, r2
 8000964:	eb65 0503 	sbc.w	r5, r5, r3
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000972:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 000c 	orrcs.w	r0, r0, ip
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009d4:	d018      	beq.n	8000a08 <__aeabi_ddiv+0x114>
 80009d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009f2:	d1c0      	bne.n	8000976 <__aeabi_ddiv+0x82>
 80009f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f8:	d10b      	bne.n	8000a12 <__aeabi_ddiv+0x11e>
 80009fa:	ea41 0100 	orr.w	r1, r1, r0
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a06:	e7b6      	b.n	8000976 <__aeabi_ddiv+0x82>
 8000a08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a0c:	bf04      	itt	eq
 8000a0e:	4301      	orreq	r1, r0
 8000a10:	2000      	moveq	r0, #0
 8000a12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a16:	bf88      	it	hi
 8000a18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a1c:	f63f aeaf 	bhi.w	800077e <__aeabi_dmul+0xde>
 8000a20:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a24:	bf04      	itt	eq
 8000a26:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a2e:	f150 0000 	adcs.w	r0, r0, #0
 8000a32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a36:	bd70      	pop	{r4, r5, r6, pc}
 8000a38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a44:	bfc2      	ittt	gt
 8000a46:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a54:	f04f 0e00 	mov.w	lr, #0
 8000a58:	3c01      	subs	r4, #1
 8000a5a:	e690      	b.n	800077e <__aeabi_dmul+0xde>
 8000a5c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a60:	e68d      	b.n	800077e <__aeabi_dmul+0xde>
 8000a62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a66:	ea94 0f0c 	teq	r4, ip
 8000a6a:	bf08      	it	eq
 8000a6c:	ea95 0f0c 	teqeq	r5, ip
 8000a70:	f43f af3b 	beq.w	80008ea <__aeabi_dmul+0x24a>
 8000a74:	ea94 0f0c 	teq	r4, ip
 8000a78:	d10a      	bne.n	8000a90 <__aeabi_ddiv+0x19c>
 8000a7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a7e:	f47f af34 	bne.w	80008ea <__aeabi_dmul+0x24a>
 8000a82:	ea95 0f0c 	teq	r5, ip
 8000a86:	f47f af25 	bne.w	80008d4 <__aeabi_dmul+0x234>
 8000a8a:	4610      	mov	r0, r2
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	e72c      	b.n	80008ea <__aeabi_dmul+0x24a>
 8000a90:	ea95 0f0c 	teq	r5, ip
 8000a94:	d106      	bne.n	8000aa4 <__aeabi_ddiv+0x1b0>
 8000a96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a9a:	f43f aefd 	beq.w	8000898 <__aeabi_dmul+0x1f8>
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	e722      	b.n	80008ea <__aeabi_dmul+0x24a>
 8000aa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa8:	bf18      	it	ne
 8000aaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aae:	f47f aec5 	bne.w	800083c <__aeabi_dmul+0x19c>
 8000ab2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ab6:	f47f af0d 	bne.w	80008d4 <__aeabi_dmul+0x234>
 8000aba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000abe:	f47f aeeb 	bne.w	8000898 <__aeabi_dmul+0x1f8>
 8000ac2:	e712      	b.n	80008ea <__aeabi_dmul+0x24a>

08000ac4 <__gedf2>:
 8000ac4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ac8:	e006      	b.n	8000ad8 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__ledf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	e002      	b.n	8000ad8 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__cmpdf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	bf18      	it	ne
 8000aea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aee:	d01b      	beq.n	8000b28 <__cmpdf2+0x54>
 8000af0:	b001      	add	sp, #4
 8000af2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000af6:	bf0c      	ite	eq
 8000af8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000afc:	ea91 0f03 	teqne	r1, r3
 8000b00:	bf02      	ittt	eq
 8000b02:	ea90 0f02 	teqeq	r0, r2
 8000b06:	2000      	moveq	r0, #0
 8000b08:	4770      	bxeq	lr
 8000b0a:	f110 0f00 	cmn.w	r0, #0
 8000b0e:	ea91 0f03 	teq	r1, r3
 8000b12:	bf58      	it	pl
 8000b14:	4299      	cmppl	r1, r3
 8000b16:	bf08      	it	eq
 8000b18:	4290      	cmpeq	r0, r2
 8000b1a:	bf2c      	ite	cs
 8000b1c:	17d8      	asrcs	r0, r3, #31
 8000b1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b22:	f040 0001 	orr.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b30:	d102      	bne.n	8000b38 <__cmpdf2+0x64>
 8000b32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b36:	d107      	bne.n	8000b48 <__cmpdf2+0x74>
 8000b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d1d6      	bne.n	8000af0 <__cmpdf2+0x1c>
 8000b42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b46:	d0d3      	beq.n	8000af0 <__cmpdf2+0x1c>
 8000b48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_cdrcmple>:
 8000b50:	4684      	mov	ip, r0
 8000b52:	4610      	mov	r0, r2
 8000b54:	4662      	mov	r2, ip
 8000b56:	468c      	mov	ip, r1
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	e000      	b.n	8000b60 <__aeabi_cdcmpeq>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_cdcmpeq>:
 8000b60:	b501      	push	{r0, lr}
 8000b62:	f7ff ffb7 	bl	8000ad4 <__cmpdf2>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	bf48      	it	mi
 8000b6a:	f110 0f00 	cmnmi.w	r0, #0
 8000b6e:	bd01      	pop	{r0, pc}

08000b70 <__aeabi_dcmpeq>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff fff4 	bl	8000b60 <__aeabi_cdcmpeq>
 8000b78:	bf0c      	ite	eq
 8000b7a:	2001      	moveq	r0, #1
 8000b7c:	2000      	movne	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmplt>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffea 	bl	8000b60 <__aeabi_cdcmpeq>
 8000b8c:	bf34      	ite	cc
 8000b8e:	2001      	movcc	r0, #1
 8000b90:	2000      	movcs	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmple>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffe0 	bl	8000b60 <__aeabi_cdcmpeq>
 8000ba0:	bf94      	ite	ls
 8000ba2:	2001      	movls	r0, #1
 8000ba4:	2000      	movhi	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpge>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffce 	bl	8000b50 <__aeabi_cdrcmple>
 8000bb4:	bf94      	ite	ls
 8000bb6:	2001      	movls	r0, #1
 8000bb8:	2000      	movhi	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmpgt>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffc4 	bl	8000b50 <__aeabi_cdrcmple>
 8000bc8:	bf34      	ite	cc
 8000bca:	2001      	movcc	r0, #1
 8000bcc:	2000      	movcs	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_d2iz>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bdc:	d215      	bcs.n	8000c0a <__aeabi_d2iz+0x36>
 8000bde:	d511      	bpl.n	8000c04 <__aeabi_d2iz+0x30>
 8000be0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be8:	d912      	bls.n	8000c10 <__aeabi_d2iz+0x3c>
 8000bea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d105      	bne.n	8000c1c <__aeabi_d2iz+0x48>
 8000c10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	bf08      	it	eq
 8000c16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__aeabi_d2uiz>:
 8000c24:	004a      	lsls	r2, r1, #1
 8000c26:	d211      	bcs.n	8000c4c <__aeabi_d2uiz+0x28>
 8000c28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c2c:	d211      	bcs.n	8000c52 <__aeabi_d2uiz+0x2e>
 8000c2e:	d50d      	bpl.n	8000c4c <__aeabi_d2uiz+0x28>
 8000c30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c38:	d40e      	bmi.n	8000c58 <__aeabi_d2uiz+0x34>
 8000c3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c46:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4a:	4770      	bx	lr
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c56:	d102      	bne.n	8000c5e <__aeabi_d2uiz+0x3a>
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 0000 	mov.w	r0, #0
 8000c62:	4770      	bx	lr

08000c64 <__aeabi_d2f>:
 8000c64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c6c:	bf24      	itt	cs
 8000c6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c76:	d90d      	bls.n	8000c94 <__aeabi_d2f+0x30>
 8000c78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c8c:	bf08      	it	eq
 8000c8e:	f020 0001 	biceq.w	r0, r0, #1
 8000c92:	4770      	bx	lr
 8000c94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c98:	d121      	bne.n	8000cde <__aeabi_d2f+0x7a>
 8000c9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c9e:	bfbc      	itt	lt
 8000ca0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	4770      	bxlt	lr
 8000ca6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000caa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cae:	f1c2 0218 	rsb	r2, r2, #24
 8000cb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000cb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cba:	fa20 f002 	lsr.w	r0, r0, r2
 8000cbe:	bf18      	it	ne
 8000cc0:	f040 0001 	orrne.w	r0, r0, #1
 8000cc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ccc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd0:	ea40 000c 	orr.w	r0, r0, ip
 8000cd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000cd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cdc:	e7cc      	b.n	8000c78 <__aeabi_d2f+0x14>
 8000cde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce2:	d107      	bne.n	8000cf4 <__aeabi_d2f+0x90>
 8000ce4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ce8:	bf1e      	ittt	ne
 8000cea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf2:	4770      	bxne	lr
 8000cf4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <init_GPIO>:

#include "gpio.h"
#include "clock.h"

void init_GPIO(enum GPIOs gpio)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    switch (gpio)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d827      	bhi.n	8000d64 <init_GPIO+0x60>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <init_GPIO+0x18>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d3b 	.word	0x08000d3b
 8000d24:	08000d49 	.word	0x08000d49
 8000d28:	08000d57 	.word	0x08000d57
    {
    case A:
        *RCC_AHB1ENR |= 1 << GPIOA_EN;
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <init_GPIO+0x70>)
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <init_GPIO+0x70>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]
        break;
 8000d38:	e015      	b.n	8000d66 <init_GPIO+0x62>
    case B:
        *RCC_AHB1ENR |= 1 << GPIOB_EN;
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <init_GPIO+0x70>)
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <init_GPIO+0x70>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6013      	str	r3, [r2, #0]
        break;
 8000d46:	e00e      	b.n	8000d66 <init_GPIO+0x62>
    case C:
        *RCC_AHB1ENR |= 1 << GPIOC_EN;
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <init_GPIO+0x70>)
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <init_GPIO+0x70>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6013      	str	r3, [r2, #0]
        break;
 8000d54:	e007      	b.n	8000d66 <init_GPIO+0x62>
    case D:
        *RCC_AHB1ENR |= 1 << GPIOD_EN;
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <init_GPIO+0x70>)
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <init_GPIO+0x70>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	6013      	str	r3, [r2, #0]
        break;
 8000d62:	e000      	b.n	8000d66 <init_GPIO+0x62>
    default:
        break;
 8000d64:	bf00      	nop
    }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023830 	.word	0x40023830

08000d78 <enable_input_mode>:

void enable_input_mode(enum GPIOs gpio, int pin)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
	volatile GPIO *gpio_ptr = select_gpio(gpio);
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f834 	bl	8000df4 <select_gpio>
 8000d8c:	60f8      	str	r0, [r7, #12]

    gpio_ptr->MODER &= ~(0b11 << 2*pin);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	401a      	ands	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <enable_output_mode>:


void enable_output_mode(enum GPIOs gpio, int pin)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
	volatile GPIO *gpio_ptr = select_gpio(gpio);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f81a 	bl	8000df4 <select_gpio>
 8000dc0:	60f8      	str	r0, [r7, #12]

    gpio_ptr->MODER &= ~(0b11 << 2*pin);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	0052      	lsls	r2, r2, #1
 8000dca:	2103      	movs	r1, #3
 8000dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd0:	43d2      	mvns	r2, r2
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
    gpio_ptr->MODER |= 1 << 2*pin;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	0052      	lsls	r2, r2, #1
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	431a      	orrs	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	601a      	str	r2, [r3, #0]

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <select_gpio>:
        gpio_ptr->AFRH &= ~(0xF << (4 * (pin - 8)));
        gpio_ptr->AFRH |= (af_num << (4 * (pin - 8)));
    }
}

inline volatile GPIO* select_gpio(enum GPIOs gpio) {
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
    volatile GPIO *gpio_ptr = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
    switch (gpio)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d817      	bhi.n	8000e38 <select_gpio+0x44>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <select_gpio+0x1c>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e27 	.word	0x08000e27
 8000e18:	08000e2d 	.word	0x08000e2d
 8000e1c:	08000e33 	.word	0x08000e33
    {
    case A:
        gpio_ptr = GPIOA_BASE;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <select_gpio+0x54>)
 8000e22:	60fb      	str	r3, [r7, #12]
        break;
 8000e24:	e009      	b.n	8000e3a <select_gpio+0x46>
    case B:
        gpio_ptr = GPIOB_BASE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <select_gpio+0x58>)
 8000e28:	60fb      	str	r3, [r7, #12]
        break;
 8000e2a:	e006      	b.n	8000e3a <select_gpio+0x46>
    case C:
        gpio_ptr = GPIOC_BASE;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <select_gpio+0x5c>)
 8000e2e:	60fb      	str	r3, [r7, #12]
        break;
 8000e30:	e003      	b.n	8000e3a <select_gpio+0x46>
    case D:
    	gpio_ptr = GPIOD_BASE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <select_gpio+0x60>)
 8000e34:	60fb      	str	r3, [r7, #12]
    	break;
 8000e36:	e000      	b.n	8000e3a <select_gpio+0x46>
    default:
        break;
 8000e38:	bf00      	nop
    }
    return gpio_ptr;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <main>:
#include <inttypes.h>
#include <stdio.h>
#include <stdbool.h>

// main
int main(void){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	// Initiate/start modules
	init_usart2(19200, F_CPU);
 8000e5e:	4911      	ldr	r1, [pc, #68]	; (8000ea4 <main+0x4c>)
 8000e60:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 8000e64:	f001 fa72 	bl	800234c <init_usart2>
	ph_init();
 8000e68:	f000 f942 	bl	80010f0 <ph_init>

	const bool EXTI9_ENABLE = false;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
	const bool PACKET_MODE = true;
 8000e70:	2301      	movs	r3, #1
 8000e72:	71bb      	strb	r3, [r7, #6]
	const uint8_t SRC = 0xAA;
 8000e74:	23aa      	movs	r3, #170	; 0xaa
 8000e76:	717b      	strb	r3, [r7, #5]
	const uint8_t DEST = 0xBB;
 8000e78:	23bb      	movs	r3, #187	; 0xbb
 8000e7a:	713b      	strb	r3, [r7, #4]

	monitor_start(EXTI9_ENABLE); // exti9_enable = true if transmitter is used alone
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f812 	bl	8000ea8 <monitor_start>
	transmitter_init(SRC, DEST, PACKET_MODE);
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	7939      	ldrb	r1, [r7, #4]
 8000e88:	79ba      	ldrb	r2, [r7, #6]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 ff2c 	bl	8001ce8 <transmitter_init>
	receiver_init(PACKET_MODE);
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fa46 	bl	8001324 <receiver_init>

	// Main routine
	while (1) {
		transmitter_mainRoutineUpdate();
 8000e98:	f000 ff60 	bl	8001d5c <transmitter_mainRoutineUpdate>
		receiver_mainRoutineUpdate();
 8000e9c:	f000 fa68 	bl	8001370 <receiver_mainRoutineUpdate>
	}
 8000ea0:	e7fa      	b.n	8000e98 <main+0x40>
 8000ea2:	bf00      	nop
 8000ea4:	00f42400 	.word	0x00f42400

08000ea8 <monitor_start>:
// (instead, the pin interrupt logic monitor_Edge_Intrr is exposed to be used for a pin connected to PC9)
static bool exti9Enable;

static inline void updateMonitorState(MONITOR_STATE newState);

void monitor_start(bool exti9_enable) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
		exti9Enable = exti9_enable;
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <monitor_start+0x3c>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	7013      	strb	r3, [r2, #0]
		// enable GPIOB and set LEDs for updating monitor status
		init_GPIO(B);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff ff23 	bl	8000d04 <init_GPIO>
		GPIOB_BASE->MODER |= GPIOB_LEDS_OUTPUT_MODE;
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <monitor_start+0x40>)
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <monitor_start+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f043 43a8 	orr.w	r3, r3, #1409286144	; 0x54000000
 8000ec8:	6013      	str	r3, [r2, #0]
		// TODO: debug, sanity check the LEDs are even working
//		*(GPIOB_ODR) |= (0b111<<13);
//		while(1);

		// Enable Clocks for GPIOC
		init_GPIO(C);
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f7ff ff1a 	bl	8000d04 <init_GPIO>

		// clear and set PC8 to output for debugging
//		enable_output_mode(C, 8);
//		GPIOC_BASE->ODR &= ~(1<<8);

		updateMonitorState(MS_IDLE);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f8d1 	bl	8001078 <updateMonitorState>

		setupPinInterrupt();
 8000ed6:	f000 f815 	bl	8000f04 <setupPinInterrupt>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000c4 	.word	0x200000c4
 8000ee8:	40020400 	.word	0x40020400

08000eec <monitor_getState>:

/**
 * returns the monitor state, without exposing the variable outside this module
 */
MONITOR_STATE monitor_getState() {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	return monitorState;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <monitor_getState+0x14>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000e24 	.word	0x20000e24

08000f04 <setupPinInterrupt>:

void setupPinInterrupt(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	// Enable Clock to SysCFG
	*(RCC_APB2ENR) |= 1<<14;
 8000f08:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <setupPinInterrupt+0x80>)
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <setupPinInterrupt+0x80>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f12:	6013      	str	r3, [r2, #0]

	// Enable Clocks for GPIOC
	init_GPIO(C);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff fef5 	bl	8000d04 <init_GPIO>

	// PC4 is input signal to monitor
	enable_input_mode(C, 4);
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff ff2b 	bl	8000d78 <enable_input_mode>

	// in case the monitor module handles its own pin interrupt.
	if (exti9Enable) {
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <setupPinInterrupt+0x84>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d029      	beq.n	8000f7e <setupPinInterrupt+0x7a>

		// Connect PC9 to EXTI9
		*(SYSCFG_EXTICR3) &= ~(0b1111<<4);
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <setupPinInterrupt+0x88>)
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <setupPinInterrupt+0x88>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f34:	6013      	str	r3, [r2, #0]
		*(SYSCFG_EXTICR3) |= (0b0010<<4);
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <setupPinInterrupt+0x88>)
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <setupPinInterrupt+0x88>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	6013      	str	r3, [r2, #0]

		// Unmask EXTI9 in EXTI
		*(EXTI_IMR) |= 1<<9;
 8000f42:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <setupPinInterrupt+0x8c>)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <setupPinInterrupt+0x8c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4c:	6013      	str	r3, [r2, #0]

		// Set falling edge
		*(EXTI_FTSR) |= 1<<9;
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <setupPinInterrupt+0x90>)
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <setupPinInterrupt+0x90>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f58:	6013      	str	r3, [r2, #0]

		// Set to rising edge
		*(EXTI_RTSR) |= 1<<9;
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <setupPinInterrupt+0x94>)
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <setupPinInterrupt+0x94>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f64:	6013      	str	r3, [r2, #0]

		// Set priority to max TODO: this was wrong, but worked by coincidence (23->24)
		*(NVIC_IPR5) |= 0xF0 << 24;
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <setupPinInterrupt+0x98>)
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <setupPinInterrupt+0x98>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000f70:	6013      	str	r3, [r2, #0]

		// Enable Interrupt in NVIC (Vector table interrupt enable)
		*(NVIC_ISER0) |= 1<<23;
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <setupPinInterrupt+0x9c>)
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <setupPinInterrupt+0x9c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f7c:	6013      	str	r3, [r2, #0]
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023844 	.word	0x40023844
 8000f88:	200000c4 	.word	0x200000c4
 8000f8c:	40013810 	.word	0x40013810
 8000f90:	40013c00 	.word	0x40013c00
 8000f94:	40013c0c 	.word	0x40013c0c
 8000f98:	40013c08 	.word	0x40013c08
 8000f9c:	e000e414 	.word	0xe000e414
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <resetTimer>:
	// reset val
	*(STK_VAL) = 0;
}

// resets the timer so it time outs after t_us
void resetTimer(uint32_t t_us) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	// disable timer
	*(STK_CTRL) &= ~(1<<STK_ENABLE_F);
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <resetTimer+0x3c>)
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <resetTimer+0x3c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 0301 	bic.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

	// configure timer
	// set load
	*(STK_LOAD) = 16 * t_us; // 1 us = 16
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <resetTimer+0x40>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	6013      	str	r3, [r2, #0]
	// reset val
	*(STK_VAL) = 0;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <resetTimer+0x44>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

	// Turn on counter, and enable interrupt
	*(STK_CTRL) |= (1<<STK_ENABLE_F) | (1<<STK_CLKSOURCE_F) | (1<<STK_TICKINT_F);
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <resetTimer+0x3c>)
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <resetTimer+0x3c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f043 0307 	orr.w	r3, r3, #7
 8000fd0:	6013      	str	r3, [r2, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010
 8000fe4:	e000e014 	.word	0xe000e014
 8000fe8:	e000e018 	.word	0xe000e018

08000fec <SysTick_Handler>:

/**
 * Systick ISR -- used to detect transmission timeout, and sets the state to TS_IDLE or TS_COLLISION
 */
void SysTick_Handler() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	// disable timer
	*(STK_CTRL) &= ~(1<<STK_ENABLE_F);
 8000ff0:	4a09      	ldr	r2, [pc, #36]	; (8001018 <SysTick_Handler+0x2c>)
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SysTick_Handler+0x2c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]
	// TODO: DEBUG toggle every timeout period
//	*(GPIOC_ODR) ^= (1<<8);

	// set to TS_IDLE or TS_COLLISION based on line state
	// and update PB13-PB14-PB15
	if(lineState != 0){
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <SysTick_Handler+0x30>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <SysTick_Handler+0x20>
		updateMonitorState(MS_IDLE);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f837 	bl	8001078 <updateMonitorState>
	}
	else {
		updateMonitorState(MS_COLLISION);
	}
}
 800100a:	e002      	b.n	8001012 <SysTick_Handler+0x26>
	// and update PB13-PB14-PB15
	if(lineState != 0){
		updateMonitorState(MS_IDLE);
	}
	else {
		updateMonitorState(MS_COLLISION);
 800100c:	2002      	movs	r0, #2
 800100e:	f000 f833 	bl	8001078 <updateMonitorState>
	}
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010
 800101c:	200000c0 	.word	0x200000c0

08001020 <EXTI9_5_IRQHandler>:

/**
 * EXTI9_5 ISR -- Updates the line state and sets the transmission state to busy
 * also resets the timeout systick timer
 */
void EXTI9_5_IRQHandler() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	// Verify Interrupt is from EXTI9
	if ((*(EXTI_PR)&(1<<9)) != 0) {
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <EXTI9_5_IRQHandler+0x24>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <EXTI9_5_IRQHandler+0x20>
		monitor_Edge_Intrr();
 8001030:	f000 f80a 	bl	8001048 <monitor_Edge_Intrr>
		// Clear Interrupt
		*(EXTI_PR) |= 1<<9;
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <EXTI9_5_IRQHandler+0x24>)
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <EXTI9_5_IRQHandler+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103e:	6013      	str	r3, [r2, #0]
	}
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013c14 	.word	0x40013c14

08001048 <monitor_Edge_Intrr>:

/**
 * triggers on EXTI4. EXTI9 is no longer supported. TODO: remomve that, as this merges with the reciever pin, rather than the transmit pin
 */
void monitor_Edge_Intrr(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
		// reset counter
		resetTimer(TRANSMISSION_TIMEOUT_US);
 800104c:	f240 4056 	movw	r0, #1110	; 0x456
 8001050:	f7ff ffa8 	bl	8000fa4 <resetTimer>
		// update line state
		lineState = (GPIOC_BASE->IDR &(1<<4))>>4;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <monitor_Edge_Intrr+0x28>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	461a      	mov	r2, r3
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <monitor_Edge_Intrr+0x2c>)
 8001062:	601a      	str	r2, [r3, #0]
		// change state
		updateMonitorState(MS_BUSY);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f807 	bl	8001078 <updateMonitorState>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020800 	.word	0x40020800
 8001074:	200000c0 	.word	0x200000c0

08001078 <updateMonitorState>:
}

/**
 * updates the monitor_state, as well as output signals indicating the state
 */
static inline void updateMonitorState(MONITOR_STATE newState) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	GPIOB_BASE->ODR &= ~(0b111 << 13);
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <updateMonitorState+0x70>)
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <updateMonitorState+0x70>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800108c:	6153      	str	r3, [r2, #20]
	switch (newState) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d00e      	beq.n	80010b2 <updateMonitorState+0x3a>
 8001094:	2b02      	cmp	r3, #2
 8001096:	d016      	beq.n	80010c6 <updateMonitorState+0x4e>
 8001098:	2b00      	cmp	r3, #0
 800109a:	d000      	beq.n	800109e <updateMonitorState+0x26>
	case MS_COLLISION:
		monitorState = MS_COLLISION;
		GPIOB_BASE->ODR |= (LED_COLLISION_PB15);
		break;
	}
}
 800109c:	e01d      	b.n	80010da <updateMonitorState+0x62>
 */
static inline void updateMonitorState(MONITOR_STATE newState) {
	GPIOB_BASE->ODR &= ~(0b111 << 13);
	switch (newState) {
	case MS_IDLE:
		monitorState = MS_IDLE;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <updateMonitorState+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		GPIOB_BASE->ODR |= (LED_IDLE_PB13);
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <updateMonitorState+0x70>)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <updateMonitorState+0x70>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ae:	6153      	str	r3, [r2, #20]
		break;
 80010b0:	e013      	b.n	80010da <updateMonitorState+0x62>
	case MS_BUSY:
		monitorState = MS_BUSY;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <updateMonitorState+0x74>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
		GPIOB_BASE->ODR |= (LED_BUSY_PB14);
 80010b8:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <updateMonitorState+0x70>)
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <updateMonitorState+0x70>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c2:	6153      	str	r3, [r2, #20]
		break;
 80010c4:	e009      	b.n	80010da <updateMonitorState+0x62>
	case MS_COLLISION:
		monitorState = MS_COLLISION;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <updateMonitorState+0x74>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
		GPIOB_BASE->ODR |= (LED_COLLISION_PB15);
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <updateMonitorState+0x70>)
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <updateMonitorState+0x70>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d6:	6153      	str	r3, [r2, #20]
		break;
 80010d8:	bf00      	nop
	}
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40020400 	.word	0x40020400
 80010ec:	20000e24 	.word	0x20000e24

080010f0 <ph_init>:
static uint8_t compute_crc8_byte(uint8_t byte, uint8_t polynomial);

/**
 * module init. Pre-computes and caches the CRC8 lookup table for quick CRC8 calculation
 */
void ph_init() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	compute_crc8_lookup_table(crc8_lookuptable, CRC8_POLYNOMIAL);
 80010f4:	2107      	movs	r1, #7
 80010f6:	4802      	ldr	r0, [pc, #8]	; (8001100 <ph_init+0x10>)
 80010f8:	f000 f8f4 	bl	80012e4 <compute_crc8_lookup_table>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000c8 	.word	0x200000c8

08001104 <ph_create>:
 * @param dest Destination address of the packet header
 * @param crc_flag if true, compute CRC. else set to 0x00
 * @param msg A message buffer representing the message to put within the header
 * @param size The size of the message. Max 255 bytes
 */
void ph_create(PacketHeader *out, uint8_t src, uint8_t dest, bool crc_flag, const void* msg, uint8_t size) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4603      	mov	r3, r0
 8001114:	70fb      	strb	r3, [r7, #3]
 8001116:	460b      	mov	r3, r1
 8001118:	70bb      	strb	r3, [r7, #2]
 800111a:	4613      	mov	r3, r2
 800111c:	707b      	strb	r3, [r7, #1]
	out->synch = 0x55;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2255      	movs	r2, #85	; 0x55
 8001122:	701a      	strb	r2, [r3, #0]
	out->ver = 0x01;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	705a      	strb	r2, [r3, #1]
	out->src = src;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	709a      	strb	r2, [r3, #2]
	out->dest = dest;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	78ba      	ldrb	r2, [r7, #2]
 8001134:	70da      	strb	r2, [r3, #3]
	out->length = size;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7d3a      	ldrb	r2, [r7, #20]
 800113a:	711a      	strb	r2, [r3, #4]
	out->crc_flag = crc_flag;
 800113c:	787a      	ldrb	r2, [r7, #1]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	715a      	strb	r2, [r3, #5]
	memcpy(out->msg, msg, size);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3306      	adds	r3, #6
 8001146:	7d3a      	ldrb	r2, [r7, #20]
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	4618      	mov	r0, r3
 800114c:	f001 f9f2 	bl	8002534 <memcpy>
	if (out->crc_flag)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	795b      	ldrb	r3, [r3, #5]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00d      	beq.n	8001174 <ph_create+0x70>
		out->crc8_fcs = ph_compute_crc8(out->msg, out->length);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	1d9a      	adds	r2, r3, #6
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f000 f86e 	bl	8001244 <ph_compute_crc8>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	else
		out->crc8_fcs = 0xAA;
}
 8001172:	e003      	b.n	800117c <ph_create+0x78>
	out->crc_flag = crc_flag;
	memcpy(out->msg, msg, size);
	if (out->crc_flag)
		out->crc8_fcs = ph_compute_crc8(out->msg, out->length);
	else
		out->crc8_fcs = 0xAA;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	22aa      	movs	r2, #170	; 0xaa
 8001178:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <ph_parse>:
 * 	- crc_flag is 0, but crc8_fcs is not 0xAA
 * 	- crc_flag is 1, but computed crc8 does not match with crc8_fcs
 * @param buf The buffer to parse
 * @return parsing status
 */
bool ph_parse(PacketHeader *out, const void* buf, unsigned int size) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	// buffer must at least contain a msg of 1 byte
	if (size < sizeof(PacketHeader) - PH_MSG_SIZE+1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b07      	cmp	r3, #7
 8001194:	d801      	bhi.n	800119a <ph_parse+0x16>
		return false;
 8001196:	2300      	movs	r3, #0
 8001198:	e04f      	b.n	800123a <ph_parse+0xb6>
	// parse initial parameters
	out->synch = ((PacketHeader*)buf)->synch;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]
	out->ver = ((PacketHeader*)buf)->ver;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	785a      	ldrb	r2, [r3, #1]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	705a      	strb	r2, [r3, #1]
	out->src = ((PacketHeader*)buf)->src;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	789a      	ldrb	r2, [r3, #2]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	709a      	strb	r2, [r3, #2]
	out->dest = ((PacketHeader*)buf)->dest;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	78da      	ldrb	r2, [r3, #3]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	70da      	strb	r2, [r3, #3]
	out->length = ((PacketHeader*)buf)->length;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	791a      	ldrb	r2, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	711a      	strb	r2, [r3, #4]
	out->crc_flag = ((PacketHeader*)buf)->crc_flag;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	795a      	ldrb	r2, [r3, #5]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	715a      	strb	r2, [r3, #5]

	// make sure that the size of the buffer accounts for the message content
	if (size < sizeof(PacketHeader) - PH_MSG_SIZE + out->length)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	1dda      	adds	r2, r3, #7
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d901      	bls.n	80011da <ph_parse+0x56>
		return false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e02f      	b.n	800123a <ph_parse+0xb6>

	// parse message
	memcpy(out->msg, &((PacketHeader*)buf)->msg, out->length);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1d98      	adds	r0, r3, #6
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1d99      	adds	r1, r3, #6
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f001 f9a4 	bl	8002534 <memcpy>

	// make sure that the CRC field makes sense semantically. (must be 0xAA if no CRC)
	if (!out->crc_flag && ((uint8_t*)buf)[size-1] != 0xAA) {
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <ph_parse+0x82>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2baa      	cmp	r3, #170	; 0xaa
 8001200:	d001      	beq.n	8001206 <ph_parse+0x82>
		return false;
 8001202:	2300      	movs	r3, #0
 8001204:	e019      	b.n	800123a <ph_parse+0xb6>
	}
	else {
		// parse CRC field
		out->crc8_fcs = ((uint8_t*)buf)[size-1];
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3b01      	subs	r3, #1
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		// confirm CRC field
		if (ph_compute_crc8(out->msg, out->length) != out->crc8_fcs){
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1d9a      	adds	r2, r3, #6
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f000 f80f 	bl	8001244 <ph_compute_crc8>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <ph_parse+0xb4>
			return false;
 8001234:	2300      	movs	r3, #0
 8001236:	e000      	b.n	800123a <ph_parse+0xb6>
		}
	}
	return true;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop

08001244 <ph_compute_crc8>:


/**
 * Computes the CRC8 checksum for the a message.
 */
uint8_t ph_compute_crc8(void *msg, unsigned int size) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
	for (int byte=0; byte<size; byte++) {
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	e00d      	b.n	8001274 <ph_compute_crc8+0x30>
		crc ^= ((uint8_t*)msg)[byte];
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4053      	eors	r3, r2
 8001264:	73fb      	strb	r3, [r7, #15]
		crc = crc8_lookuptable[crc];
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	4a08      	ldr	r2, [pc, #32]	; (800128c <ph_compute_crc8+0x48>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	73fb      	strb	r3, [r7, #15]
/**
 * Computes the CRC8 checksum for the a message.
 */
uint8_t ph_compute_crc8(void *msg, unsigned int size) {
	uint8_t crc = 0;
	for (int byte=0; byte<size; byte++) {
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3301      	adds	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3ed      	bcc.n	8001258 <ph_compute_crc8+0x14>
		crc ^= ((uint8_t*)msg)[byte];
		crc = crc8_lookuptable[crc];
	}
	return crc;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200000c8 	.word	0x200000c8

08001290 <compute_crc8_byte>:
/**
 * computes the CRC8 for one byte. This should only be used to populate crc8_lookup_table
 * @param byte value to compute CRC8 of
 * @param polynomial excluding x^8 (C7), which is assumed. This can be x^2 + x^1 + 1 for example, which gives 0b111
 */
static uint8_t compute_crc8_byte(uint8_t byte, uint8_t polynomial) {
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = byte;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	73fb      	strb	r3, [r7, #15]
	// for each input bit
	for (int bit=0; bit<8; bit++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	e011      	b.n	80012ce <compute_crc8_byte+0x3e>
		// if x^8 (C7) == 1, each register associated to a polynomial xors the value just shifted into it
		if ((crc & (1<<7)) != 0) {
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da07      	bge.n	80012c2 <compute_crc8_byte+0x32>
			crc <<= 1; // C7 is xor fed into the crc
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
			crc ^= polynomial;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	4053      	eors	r3, r2
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e002      	b.n	80012c8 <compute_crc8_byte+0x38>
		}
		else {
			// for each iteration, the bit shifts through the registers
			crc <<= 1;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 * @param polynomial excluding x^8 (C7), which is assumed. This can be x^2 + x^1 + 1 for example, which gives 0b111
 */
static uint8_t compute_crc8_byte(uint8_t byte, uint8_t polynomial) {
	uint8_t crc = byte;
	// for each input bit
	for (int bit=0; bit<8; bit++) {
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	ddea      	ble.n	80012aa <compute_crc8_byte+0x1a>
		else {
			// for each iteration, the bit shifts through the registers
			crc <<= 1;
		}
	}
	return crc;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <compute_crc8_lookup_table>:

static void compute_crc8_lookup_table(uint8_t *lookup_table, uint8_t polynomial) {
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
	for (int i=0; i<256; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e00e      	b.n	8001314 <compute_crc8_lookup_table+0x30>
		lookup_table[i] = compute_crc8_byte(i, polynomial);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	18d4      	adds	r4, r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffc3 	bl	8001290 <compute_crc8_byte>
 800130a:	4603      	mov	r3, r0
 800130c:	7023      	strb	r3, [r4, #0]
	}
	return crc;
}

static void compute_crc8_lookup_table(uint8_t *lookup_table, uint8_t polynomial) {
	for (int i=0; i<256; i++) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	dded      	ble.n	80012f6 <compute_crc8_lookup_table+0x12>
		lookup_table[i] = compute_crc8_byte(i, polynomial);
	}
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop

08001324 <receiver_init>:
static void initCounterTimer(enum TIMs);
static inline void stopTimeoutTimer();
static inline void startTimeoutTimer(uint32_t);

// initiates the receiver module
void receiver_init(bool packet_mode) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	init_usart2(19200, F_CPU);
 800132e:	490e      	ldr	r1, [pc, #56]	; (8001368 <receiver_init+0x44>)
 8001330:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 8001334:	f001 f80a 	bl	800234c <init_usart2>
	init_GPIO(C);
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff fce3 	bl	8000d04 <init_GPIO>
	// DEBUG: PC6 - Sample Toggle
	enable_output_mode(C, 6);
 800133e:	2106      	movs	r1, #6
 8001340:	2002      	movs	r0, #2
 8001342:	f7ff fd33 	bl	8000dac <enable_output_mode>
	// DEBUG: PC8 - Even bitperiod Counter Toggle
	enable_output_mode(C, 8);
 8001346:	2108      	movs	r1, #8
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff fd2f 	bl	8000dac <enable_output_mode>

	packetMode = packet_mode;
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <receiver_init+0x48>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	7013      	strb	r3, [r2, #0]

	// the receive pin has to change based on the specific timer.
	initExternalInterrupt();
 8001354:	f000 f998 	bl	8001688 <initExternalInterrupt>
	initCounterTimer(TIM4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f963 	bl	8001624 <initCounterTimer>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	00f42400 	.word	0x00f42400
 800136c:	200005da 	.word	0x200005da

08001370 <receiver_mainRoutineUpdate>:

// Main routine update, this should execute inside a while(1); by what uses this module.
void receiver_mainRoutineUpdate() {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af02      	add	r7, sp, #8
	static uint8_t msgBuf[sizeof(PacketHeader)];
	static int msgCur = 0;
	// the packet representation of the buffer
	static PacketHeader pkt;

	if (monitor_getState() == MS_IDLE) {
 8001376:	f7ff fdb9 	bl	8000eec <monitor_getState>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d112      	bne.n	80013a6 <receiver_mainRoutineUpdate+0x36>
		// reset the transmission state, since we're IDLE. Next transmission is a new transmission
		currBit = dataByte = 0;
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <receiver_mainRoutineUpdate+0x148>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <receiver_mainRoutineUpdate+0x14c>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
		currentlyReceiving = false;
 800138c:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <receiver_mainRoutineUpdate+0x150>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]

		// set for beginning of transmission, first bit automatically captured as zero
		if (!sample)
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <receiver_mainRoutineUpdate+0x154>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <receiver_mainRoutineUpdate+0x36>
			sample = true;
 80013a0:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <receiver_mainRoutineUpdate+0x154>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
	}

	if (currentlyReceiving) {
 80013a6:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <receiver_mainRoutineUpdate+0x150>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d014      	beq.n	80013d8 <receiver_mainRoutineUpdate+0x68>
		if (monitor_getState() == MS_COLLISION) {
 80013ae:	f7ff fd9d 	bl	8000eec <monitor_getState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d10f      	bne.n	80013d8 <receiver_mainRoutineUpdate+0x68>
			printf("<< COLLISION!\r\n");
 80013b8:	4843      	ldr	r0, [pc, #268]	; (80014c8 <receiver_mainRoutineUpdate+0x158>)
 80013ba:	f001 ff95 	bl	80032e8 <puts>
			// cease all receiving
			stop_counter(TIM4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 fba0 	bl	8001b04 <stop_counter>
			currentlyReceiving = false;
 80013c4:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <receiver_mainRoutineUpdate+0x150>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
			// drop partially received message
			receiveBuf.put = receiveBuf.get = 0;
 80013ca:	4b40      	ldr	r3, [pc, #256]	; (80014cc <receiver_mainRoutineUpdate+0x15c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <receiver_mainRoutineUpdate+0x15c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <receiver_mainRoutineUpdate+0x15c>)
 80013d6:	6013      	str	r3, [r2, #0]
		}
	}

	if (!currentlyReceiving && hasElement(&receiveBuf)) {
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <receiver_mainRoutineUpdate+0x150>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f083 0301 	eor.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <receiver_mainRoutineUpdate+0x13e>
 80013e6:	4839      	ldr	r0, [pc, #228]	; (80014cc <receiver_mainRoutineUpdate+0x15c>)
 80013e8:	f000 f9d8 	bl	800179c <hasElement>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d05d      	beq.n	80014ae <receiver_mainRoutineUpdate+0x13e>
		// grab the transmitted message, and display it
		msgCur = 0;
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
		while (hasElement(&receiveBuf) && msgCur < sizeof(PacketHeader)) {
 80013f8:	e00b      	b.n	8001412 <receiver_mainRoutineUpdate+0xa2>
			msgBuf[msgCur++] = get(&receiveBuf);
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 80013fc:	681c      	ldr	r4, [r3, #0]
 80013fe:	1c63      	adds	r3, r4, #1
 8001400:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4831      	ldr	r0, [pc, #196]	; (80014cc <receiver_mainRoutineUpdate+0x15c>)
 8001406:	f000 f9a9 	bl	800175c <get>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <receiver_mainRoutineUpdate+0x164>)
 8001410:	551a      	strb	r2, [r3, r4]
	}

	if (!currentlyReceiving && hasElement(&receiveBuf)) {
		// grab the transmitted message, and display it
		msgCur = 0;
		while (hasElement(&receiveBuf) && msgCur < sizeof(PacketHeader)) {
 8001412:	482e      	ldr	r0, [pc, #184]	; (80014cc <receiver_mainRoutineUpdate+0x15c>)
 8001414:	f000 f9c2 	bl	800179c <hasElement>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <receiver_mainRoutineUpdate+0xb8>
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001426:	d3e8      	bcc.n	80013fa <receiver_mainRoutineUpdate+0x8a>
			msgBuf[msgCur++] = get(&receiveBuf);
		}

		if (packetMode) {
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <receiver_mainRoutineUpdate+0x168>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d030      	beq.n	8001492 <receiver_mainRoutineUpdate+0x122>
			if (!ph_parse(&pkt, msgBuf, msgCur))
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <receiver_mainRoutineUpdate+0x164>)
 8001438:	4828      	ldr	r0, [pc, #160]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 800143a:	f7ff fea3 	bl	8001184 <ph_parse>
 800143e:	4603      	mov	r3, r0
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <receiver_mainRoutineUpdate+0xe0>
				printf(" ERROR: invalid packet\r\n");
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <receiver_mainRoutineUpdate+0x170>)
 800144c:	f001 ff4c 	bl	80032e8 <puts>

			if (pkt.length < PH_MSG_SIZE-1)
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	2bfd      	cmp	r3, #253	; 0xfd
 8001456:	d806      	bhi.n	8001466 <receiver_mainRoutineUpdate+0xf6>
				pkt.msg[pkt.length] = '\0'; // this is to display the string, since the null terminator of a string literal is not part of the msg
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 800145a:	791b      	ldrb	r3, [r3, #4]
 800145c:	461a      	mov	r2, r3
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 8001460:	4413      	add	r3, r2
 8001462:	2200      	movs	r2, #0
 8001464:	719a      	strb	r2, [r3, #6]

			printf("The source=%x, The destination=%x, length=%d, CRC=%x\r\n", pkt.src, pkt.dest, pkt.length, pkt.crc8_fcs);
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	4619      	mov	r1, r3
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	461a      	mov	r2, r3
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 8001474:	791b      	ldrb	r3, [r3, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <receiver_mainRoutineUpdate+0x16c>)
 800147a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4603      	mov	r3, r0
 8001482:	4818      	ldr	r0, [pc, #96]	; (80014e4 <receiver_mainRoutineUpdate+0x174>)
 8001484:	f001 fea0 	bl	80031c8 <iprintf>
			printf("Recieveing %s\r\n", pkt.msg);
 8001488:	4917      	ldr	r1, [pc, #92]	; (80014e8 <receiver_mainRoutineUpdate+0x178>)
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <receiver_mainRoutineUpdate+0x17c>)
 800148c:	f001 fe9c 	bl	80031c8 <iprintf>
			if (msgCur < PH_MSG_SIZE-1)
				msgBuf[msgCur+1] = '\0'; // for proper display
			printf("Recieveing %s", msgBuf);
		}
	}
}
 8001490:	e00d      	b.n	80014ae <receiver_mainRoutineUpdate+0x13e>

			printf("The source=%x, The destination=%x, length=%d, CRC=%x\r\n", pkt.src, pkt.dest, pkt.length, pkt.crc8_fcs);
			printf("Recieveing %s\r\n", pkt.msg);
		}
		else {
			if (msgCur < PH_MSG_SIZE-1)
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2bfd      	cmp	r3, #253	; 0xfd
 8001498:	dc05      	bgt.n	80014a6 <receiver_mainRoutineUpdate+0x136>
				msgBuf[msgCur+1] = '\0'; // for proper display
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <receiver_mainRoutineUpdate+0x160>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <receiver_mainRoutineUpdate+0x164>)
 80014a2:	2100      	movs	r1, #0
 80014a4:	54d1      	strb	r1, [r2, r3]
			printf("Recieveing %s", msgBuf);
 80014a6:	490b      	ldr	r1, [pc, #44]	; (80014d4 <receiver_mainRoutineUpdate+0x164>)
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <receiver_mainRoutineUpdate+0x180>)
 80014aa:	f001 fe8d 	bl	80031c8 <iprintf>
		}
	}
}
 80014ae:	bf00      	nop
 80014b0:	3704      	adds	r7, #4
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200005d8 	.word	0x200005d8
 80014bc:	200005d4 	.word	0x200005d4
 80014c0:	200005d9 	.word	0x200005d9
 80014c4:	20000000 	.word	0x20000000
 80014c8:	08006b38 	.word	0x08006b38
 80014cc:	200001c8 	.word	0x200001c8
 80014d0:	200005dc 	.word	0x200005dc
 80014d4:	200005e0 	.word	0x200005e0
 80014d8:	200005da 	.word	0x200005da
 80014dc:	200006e8 	.word	0x200006e8
 80014e0:	08006b48 	.word	0x08006b48
 80014e4:	08006b60 	.word	0x08006b60
 80014e8:	200006ee 	.word	0x200006ee
 80014ec:	08006b98 	.word	0x08006b98
 80014f0:	08006ba8 	.word	0x08006ba8

080014f4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

	// Verify Interrupt is from EXTI4
	if (!((*(EXTI_PR)&(1<<4)) != 0))
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <EXTI4_IRQHandler+0xe4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	2b00      	cmp	r3, #0
 8001502:	d067      	beq.n	80015d4 <EXTI4_IRQHandler+0xe0>
		return;

	// Clear Interrupt
	*(EXTI_PR) |= 1<<4;
 8001504:	4a34      	ldr	r2, [pc, #208]	; (80015d8 <EXTI4_IRQHandler+0xe4>)
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <EXTI4_IRQHandler+0xe4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6013      	str	r3, [r2, #0]

	// monitor the state of transmission
	monitor_Edge_Intrr();
 8001510:	f7ff fd9a 	bl	8001048 <monitor_Edge_Intrr>

	// case when we're in a half clock period edge
	if (sample) {
 8001514:	4b31      	ldr	r3, [pc, #196]	; (80015dc <EXTI4_IRQHandler+0xe8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d054      	beq.n	80015c6 <EXTI4_IRQHandler+0xd2>
		// set timeout based on stamp of when edge occurred
		clear_cnt(TIM4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 fa4f 	bl	80019c0 <clear_cnt>
		start_counter(TIM4);
 8001522:	2003      	movs	r0, #3
 8001524:	f000 fac0 	bl	8001aa8 <start_counter>

		// we should not sample next edge, unless timeout
		sample = false;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <EXTI4_IRQHandler+0xe8>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]

		// sample bit
		if ( !!(GPIOC_BASE->IDR & (1<<4))) {
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <EXTI4_IRQHandler+0xec>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <EXTI4_IRQHandler+0x68>
			dataByte |= (1<< (7-currBit));
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <EXTI4_IRQHandler+0xf0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2201      	movs	r2, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <EXTI4_IRQHandler+0xf4>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <EXTI4_IRQHandler+0xf4>)
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e011      	b.n	8001580 <EXTI4_IRQHandler+0x8c>
		}
		else {
			dataByte &= ~(1<< (7-currBit));
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <EXTI4_IRQHandler+0xf0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1c3 0307 	rsb	r3, r3, #7
 8001564:	2201      	movs	r2, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <EXTI4_IRQHandler+0xf4>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4013      	ands	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <EXTI4_IRQHandler+0xf4>)
 800157e:	701a      	strb	r2, [r3, #0]
		}

		currBit++;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <EXTI4_IRQHandler+0xf0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <EXTI4_IRQHandler+0xf0>)
 8001588:	6013      	str	r3, [r2, #0]

		if (currBit == 8) {
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <EXTI4_IRQHandler+0xf0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b08      	cmp	r3, #8
 8001590:	d108      	bne.n	80015a4 <EXTI4_IRQHandler+0xb0>
			put(&receiveBuf, dataByte);
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <EXTI4_IRQHandler+0xf4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <EXTI4_IRQHandler+0xf8>)
 800159a:	f000 f8bf 	bl	800171c <put>
			currBit = 0;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <EXTI4_IRQHandler+0xf0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
		}

		// If this is the very first bit, indicate the start of a transmission
		if (!currentlyReceiving)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <EXTI4_IRQHandler+0xfc>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f083 0301 	eor.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <EXTI4_IRQHandler+0xc4>
			currentlyReceiving = true;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <EXTI4_IRQHandler+0xfc>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]

		// DEBUG PC6: toggle to track sample ISR calls
		GPIOC_BASE->ODR ^= 1<<6;
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <EXTI4_IRQHandler+0xec>)
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <EXTI4_IRQHandler+0xec>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80015c2:	6153      	str	r3, [r2, #20]
 80015c4:	e007      	b.n	80015d6 <EXTI4_IRQHandler+0xe2>
	}
	// case when we're in a clock period edge
	else {
		// the next edge is guaranteed to be a half clock period edge, where we always sample
		sample = true;
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <EXTI4_IRQHandler+0xe8>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]

		// disable timeout, next edge occurs 100% of the time as per the manchester encoding
		// TODO: use input capture, set timeout based on stamp of when edge occurred
		stop_counter(TIM4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 fa99 	bl	8001b04 <stop_counter>
 80015d2:	e000      	b.n	80015d6 <EXTI4_IRQHandler+0xe2>

void EXTI4_IRQHandler() {

	// Verify Interrupt is from EXTI4
	if (!((*(EXTI_PR)&(1<<4)) != 0))
		return;
 80015d4:	bf00      	nop
		// disable timeout, next edge occurs 100% of the time as per the manchester encoding
		// TODO: use input capture, set timeout based on stamp of when edge occurred
		stop_counter(TIM4);

	}
}
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40013c14 	.word	0x40013c14
 80015dc:	20000000 	.word	0x20000000
 80015e0:	40020800 	.word	0x40020800
 80015e4:	200005d4 	.word	0x200005d4
 80015e8:	200005d8 	.word	0x200005d8
 80015ec:	200001c8 	.word	0x200001c8
 80015f0:	200005d9 	.word	0x200005d9

080015f4 <TIM4_IRQHandler>:


// Counter Timer for Half bit timeout. Indicates whether to sample on the next half clock period or not
void TIM4_IRQHandler() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	clear_output_cmp_mode_pending_flag(TIM4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 fb03 	bl	8001c04 <clear_output_cmp_mode_pending_flag>

	// DEBUG PC8: toggle to track ISR calls (halftime)
	GPIOC_BASE->ODR ^= 1<<8;
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <TIM4_IRQHandler+0x28>)
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <TIM4_IRQHandler+0x28>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001608:	6153      	str	r3, [r2, #20]

	// if this timeout occurs, we're at bit period edge, the next must be a sample.
	sample = true;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <TIM4_IRQHandler+0x2c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]

	// timeout occurred, shouldn't occur again unless a half bit period measures to a bit period.
	stop_counter(TIM4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 fa77 	bl	8001b04 <stop_counter>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40020800 	.word	0x40020800
 8001620:	20000000 	.word	0x20000000

08001624 <initCounterTimer>:


// initiates the counter timer based on the HALFBIT_TIMEOUT_TICKS
static void initCounterTimer(enum TIMs TIMER) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	enable_timer_clk(TIMER);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f94f 	bl	80018d4 <enable_timer_clk>
	set_arr(TIMER, HALFBIT_TIMEOUT_TICKS);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f641 71ab 	movw	r1, #8107	; 0x1fab
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f999 	bl	8001974 <set_arr>
	set_ccr1(TIMER, HALFBIT_TIMEOUT_TICKS);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f641 71ab 	movw	r1, #8107	; 0x1fab
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f96d 	bl	8001928 <set_ccr1>
	// enables toggle on CCR1
	set_to_output_cmp_mode(TIMER);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fa85 	bl	8001b60 <set_to_output_cmp_mode>
	// enables output in CCER
	enable_output_output_cmp_mode(TIMER);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 faa5 	bl	8001ba8 <enable_output_output_cmp_mode>
	clear_cnt(TIMER);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f9ad 	bl	80019c0 <clear_cnt>
	start_counter(TIMER);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fa1d 	bl	8001aa8 <start_counter>
	enable_output_cmp_mode_interrupt(TIMER);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 faf5 	bl	8001c60 <enable_output_cmp_mode_interrupt>
	// register and enable within the NVIC
	log_tim_interrupt(TIMER);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f9eb 	bl	8001a54 <log_tim_interrupt>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop

08001688 <initExternalInterrupt>:

static void initExternalInterrupt(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	// Enable Clock to SysCFG
	*(RCC_APB2ENR) |= 1<<14;
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <initExternalInterrupt+0x78>)
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <initExternalInterrupt+0x78>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001696:	6013      	str	r3, [r2, #0]
	// Enable Clock for PC4
	init_GPIO(C);
 8001698:	2002      	movs	r0, #2
 800169a:	f7ff fb33 	bl	8000d04 <init_GPIO>
	enable_input_mode(C, 4);
 800169e:	2104      	movs	r1, #4
 80016a0:	2002      	movs	r0, #2
 80016a2:	f7ff fb69 	bl	8000d78 <enable_input_mode>

	// Connect Syscfg to EXTI4, C-line
	*(SYSCFG_EXTICR2) &= ~(0b1111<<0);
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <initExternalInterrupt+0x7c>)
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <initExternalInterrupt+0x7c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 030f 	bic.w	r3, r3, #15
 80016b0:	6013      	str	r3, [r2, #0]
	*(SYSCFG_EXTICR2) |= (0b0010<<0);
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <initExternalInterrupt+0x7c>)
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <initExternalInterrupt+0x7c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6013      	str	r3, [r2, #0]

	// Unmask EXTI4 in EXTI
	*(EXTI_IMR) |= 1<<4;
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <initExternalInterrupt+0x80>)
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <initExternalInterrupt+0x80>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	6013      	str	r3, [r2, #0]

	// Set falling edge
	*(EXTI_FTSR) |= 1<<4;
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <initExternalInterrupt+0x84>)
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <initExternalInterrupt+0x84>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6013      	str	r3, [r2, #0]

	// Set to rising edge
	*(EXTI_RTSR) |= 1<<4;
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <initExternalInterrupt+0x88>)
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <initExternalInterrupt+0x88>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6013      	str	r3, [r2, #0]

	// Set priority to max (IP[2*4+2] = IP2[24:], where each field is 8-bits, and NVIC idx 10 is field 2
	*(NVIC_IPR2) |= 0xF0 << 24;
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <initExternalInterrupt+0x8c>)
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <initExternalInterrupt+0x8c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80016ec:	6013      	str	r3, [r2, #0]

	// Enable Interrupt in NVIC (Vector table interrupt enable)
	*(NVIC_ISER0) |= 1<<10;
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <initExternalInterrupt+0x90>)
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <initExternalInterrupt+0x90>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023844 	.word	0x40023844
 8001704:	4001380c 	.word	0x4001380c
 8001708:	40013c00 	.word	0x40013c00
 800170c:	40013c0c 	.word	0x40013c0c
 8001710:	40013c08 	.word	0x40013c08
 8001714:	e000e408 	.word	0xe000e408
 8001718:	e000e100 	.word	0xe000e100

0800171c <put>:
#include "ringbuffer.h"
#include <inttypes.h>
#include <stdio.h>

void put(volatile RingBuffer *buffer, char element){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
	buffer->buffer[buffer->put] = element;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	721a      	strb	r2, [r3, #8]
	buffer->put++;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
	if(buffer->put == BUF_SIZE){
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f240 4204 	movw	r2, #1028	; 0x404
 8001746:	4293      	cmp	r3, r2
 8001748:	d102      	bne.n	8001750 <put+0x34>
		buffer->put = 0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
	}
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <get>:

char get(volatile RingBuffer *buffer){
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	char tempChar = buffer->buffer[buffer->get];
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	7a1b      	ldrb	r3, [r3, #8]
 800176e:	73fb      	strb	r3, [r7, #15]
	buffer->get++;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	605a      	str	r2, [r3, #4]
	if(buffer->get == BUF_SIZE){
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f240 4204 	movw	r2, #1028	; 0x404
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <get+0x30>
		buffer->get = 0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
	}
	return tempChar;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop

0800179c <hasElement>:
		return 1;
	}
	return 0;
}

int hasElement(volatile RingBuffer *buffer){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	if(((buffer->put)-(buffer->get)) != 0){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <hasElement+0x18>
		return 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <hasElement+0x1a>
	}
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
	int DataIdx;
// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e012      	b.n	8001800 <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	3301      	adds	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80017e0:	f000 fd82 	bl	80022e8 <usart2_getch>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0a      	cmp	r3, #10
 80017f2:	d00a      	beq.n	800180a <_read+0x46>
		ptr++;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
int _read (int file, char *ptr, int len)
{
	int DataIdx;
// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbe8      	blt.n	80017da <_read+0x16>
 8001808:	e000      	b.n	800180c <_read+0x48>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
		if(*ptr == '\n') break;
 800180a:	bf00      	nop
		ptr++;
	}

//return len;
	return byteCnt; // Return byte count
 800180c:	693b      	ldr	r3, [r7, #16]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop

08001818 <_write>:

int _write(int file, char *ptr, int len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e009      	b.n	800183e <_write+0x26>
	{
		//__io_putchar(*ptr++);
		usart2_putch(*ptr++);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd70 	bl	8002318 <usart2_putch>

int _write(int file, char *ptr, int len)
{
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbf1      	blt.n	800182a <_write+0x12>
	{
		//__io_putchar(*ptr++);
		usart2_putch(*ptr++);
	}
	return len;
 8001846:	687b      	ldr	r3, [r7, #4]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_close>:

	return (caddr_t) prev_heap_end;
}
*/
int _close(int file)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001878:	605a      	str	r2, [r3, #4]
	return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_isatty>:

int _isatty(int file)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	return -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <enable_timer_clk>:

/**
 * Configure the clock for the timer.
 */
void enable_timer_clk(enum TIMs tim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d00b      	beq.n	80018fc <enable_timer_clk+0x28>
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d010      	beq.n	800190a <enable_timer_clk+0x36>
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d000      	beq.n	80018ee <enable_timer_clk+0x1a>
    case TIM4:
    	*RCC_APB1ENR |= 1 << TIM4EN;
    	break;
    default:
        // Keep empty
        break;
 80018ec:	e014      	b.n	8001918 <enable_timer_clk+0x44>
void enable_timer_clk(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        *RCC_APB1ENR |= 1 << TIM2EN;
 80018ee:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <enable_timer_clk+0x50>)
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <enable_timer_clk+0x50>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]
        break;
 80018fa:	e00d      	b.n	8001918 <enable_timer_clk+0x44>
    case TIM3:
        *RCC_APB1ENR |= 1 << TIM3EN; // enable the timer.
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <enable_timer_clk+0x50>)
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <enable_timer_clk+0x50>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6013      	str	r3, [r2, #0]
        break;
 8001908:	e006      	b.n	8001918 <enable_timer_clk+0x44>
    case TIM4:
    	*RCC_APB1ENR |= 1 << TIM4EN;
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <enable_timer_clk+0x50>)
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <enable_timer_clk+0x50>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6013      	str	r3, [r2, #0]
    	break;
 8001916:	bf00      	nop
    default:
        // Keep empty
        break;
    }
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40023840 	.word	0x40023840

08001928 <set_ccr1>:
 * Sets the value in CCR1.
 * Args:
 * ticks: the number of ticks needs to be set in CCR1.
 */
void set_ccr1(enum TIMs tim, uint32_t ticks)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d009      	beq.n	800194e <set_ccr1+0x26>
 800193a:	2b03      	cmp	r3, #3
 800193c:	d00b      	beq.n	8001956 <set_ccr1+0x2e>
 800193e:	2b01      	cmp	r3, #1
 8001940:	d000      	beq.n	8001944 <set_ccr1+0x1c>
    case TIM4:
    	TIM4_BASE->CCR1 = ticks;
    	break;
    default:
        // Keep empty
        break;
 8001942:	e00c      	b.n	800195e <set_ccr1+0x36>
void set_ccr1(enum TIMs tim, uint32_t ticks)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->CCR1 = ticks;
 8001944:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 800194c:	e007      	b.n	800195e <set_ccr1+0x36>
    case TIM3:
        TIM3_BASE->CCR1 = ticks;
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <set_ccr1+0x44>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 8001954:	e003      	b.n	800195e <set_ccr1+0x36>
    case TIM4:
    	TIM4_BASE->CCR1 = ticks;
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <set_ccr1+0x48>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6353      	str	r3, [r2, #52]	; 0x34
    	break;
 800195c:	bf00      	nop
    default:
        // Keep empty
        break;
    }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40000400 	.word	0x40000400
 8001970:	40000800 	.word	0x40000800

08001974 <set_arr>:
 * Sets the value in ARR.
 * Args:
 * ticks: the number of ticks needs to be set in ARR.
 */
void set_arr(enum TIMs tim, uint32_t ticks)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d009      	beq.n	800199a <set_arr+0x26>
 8001986:	2b03      	cmp	r3, #3
 8001988:	d00b      	beq.n	80019a2 <set_arr+0x2e>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d000      	beq.n	8001990 <set_arr+0x1c>
    case TIM4:
    	TIM4_BASE->ARR = ticks;
    	break;
    default:
        // Keep empty
        break;
 800198e:	e00c      	b.n	80019aa <set_arr+0x36>
void set_arr(enum TIMs tim, uint32_t ticks)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->ARR = ticks;
 8001990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8001998:	e007      	b.n	80019aa <set_arr+0x36>
    case TIM3:
        TIM3_BASE->ARR = ticks;
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <set_arr+0x44>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80019a0:	e003      	b.n	80019aa <set_arr+0x36>
    case TIM4:
    	TIM4_BASE->ARR = ticks;
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <set_arr+0x48>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    	break;
 80019a8:	bf00      	nop
    default:
        // Keep empty
        break;
    }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40000800 	.word	0x40000800

080019c0 <clear_cnt>:

void clear_cnt(enum TIMs tim)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d009      	beq.n	80019e4 <clear_cnt+0x24>
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d00b      	beq.n	80019ec <clear_cnt+0x2c>
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d000      	beq.n	80019da <clear_cnt+0x1a>
        break;
    case TIM4:
    	TIM4_BASE->CNT = 0;
    	break;
    default:
        break;
 80019d8:	e00c      	b.n	80019f4 <clear_cnt+0x34>
void clear_cnt(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->CNT = 0;
 80019da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80019e2:	e007      	b.n	80019f4 <clear_cnt+0x34>
    case TIM3:
        TIM3_BASE->CNT = 0;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <clear_cnt+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80019ea:	e003      	b.n	80019f4 <clear_cnt+0x34>
    case TIM4:
    	TIM4_BASE->CNT = 0;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <clear_cnt+0x44>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
    	break;
 80019f2:	bf00      	nop
    default:
        break;
    }
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40000800 	.word	0x40000800

08001a08 <set_psc>:

void set_psc(enum TIMs tim, uint32_t ticks)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d009      	beq.n	8001a2e <set_psc+0x26>
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d00b      	beq.n	8001a36 <set_psc+0x2e>
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d000      	beq.n	8001a24 <set_psc+0x1c>
        break;
    case TIM4:
    	TIM4_BASE->PSC = ticks;
    	break;
    default:
        break;
 8001a22:	e00c      	b.n	8001a3e <set_psc+0x36>
void set_psc(enum TIMs tim, uint32_t ticks)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->PSC = ticks;
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8001a2c:	e007      	b.n	8001a3e <set_psc+0x36>
    case TIM3:
        TIM3_BASE->PSC = ticks;
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <set_psc+0x44>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8001a34:	e003      	b.n	8001a3e <set_psc+0x36>
    case TIM4:
    	TIM4_BASE->PSC = ticks;
 8001a36:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <set_psc+0x48>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6293      	str	r3, [r2, #40]	; 0x28
    	break;
 8001a3c:	bf00      	nop
    default:
        break;
    }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <log_tim_interrupt>:

/**
 * Logs timer's interrupt into NVIC register.
 */
void log_tim_interrupt(enum TIMs tim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d00b      	beq.n	8001a7c <log_tim_interrupt+0x28>
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d010      	beq.n	8001a8a <log_tim_interrupt+0x36>
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d000      	beq.n	8001a6e <log_tim_interrupt+0x1a>
        break;
    case TIM4:
        *ISER0 |= 1 << TIM4_INTERRUPT_EN;
        break;
    default:
        break;
 8001a6c:	e014      	b.n	8001a98 <log_tim_interrupt+0x44>
void log_tim_interrupt(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        *ISER0 |= 1 << TIM2_INTERRUPT_EN;
 8001a6e:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <log_tim_interrupt+0x50>)
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <log_tim_interrupt+0x50>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6013      	str	r3, [r2, #0]
        break;
 8001a7a:	e00d      	b.n	8001a98 <log_tim_interrupt+0x44>
    case TIM3:
        *ISER0 |= 1 << TIM3_INTERRUPT_EN;
 8001a7c:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <log_tim_interrupt+0x50>)
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <log_tim_interrupt+0x50>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a86:	6013      	str	r3, [r2, #0]
        break;
 8001a88:	e006      	b.n	8001a98 <log_tim_interrupt+0x44>
    case TIM4:
        *ISER0 |= 1 << TIM4_INTERRUPT_EN;
 8001a8a:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <log_tim_interrupt+0x50>)
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <log_tim_interrupt+0x50>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a94:	6013      	str	r3, [r2, #0]
        break;
 8001a96:	bf00      	nop
    default:
        break;
    }
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <start_counter>:

/**
 * Starts counting.
 */
void start_counter(enum TIMs tim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d00d      	beq.n	8001ad4 <start_counter+0x2c>
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d012      	beq.n	8001ae2 <start_counter+0x3a>
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d000      	beq.n	8001ac2 <start_counter+0x1a>
        break;
    case TIM4:
    	TIM4_BASE->CR1 |= 1 << CEN;
    	break;
    default:
        break;
 8001ac0:	e016      	b.n	8001af0 <start_counter+0x48>
void start_counter(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->CR1 |= 1 << CEN;
 8001ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
        break;
 8001ad2:	e00d      	b.n	8001af0 <start_counter+0x48>
    case TIM3:
        TIM3_BASE->CR1 |= 1 << CEN;
 8001ad4:	4a09      	ldr	r2, [pc, #36]	; (8001afc <start_counter+0x54>)
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <start_counter+0x54>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6013      	str	r3, [r2, #0]
        break;
 8001ae0:	e006      	b.n	8001af0 <start_counter+0x48>
    case TIM4:
    	TIM4_BASE->CR1 |= 1 << CEN;
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <start_counter+0x58>)
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <start_counter+0x58>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]
    	break;
 8001aee:	bf00      	nop
    default:
        break;
    }
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40000800 	.word	0x40000800

08001b04 <stop_counter>:

/**
 * Stops counting.
 */
void stop_counter(enum TIMs tim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d00d      	beq.n	8001b30 <stop_counter+0x2c>
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d012      	beq.n	8001b3e <stop_counter+0x3a>
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d000      	beq.n	8001b1e <stop_counter+0x1a>
        break;
    case TIM4:
    	TIM4_BASE->CR1 &= ~(1 << CEN);
    	break;
    default:
        break;
 8001b1c:	e016      	b.n	8001b4c <stop_counter+0x48>
void stop_counter(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->CR1 &= ~(1 << CEN);
 8001b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]
        break;
 8001b2e:	e00d      	b.n	8001b4c <stop_counter+0x48>
    case TIM3:
        TIM3_BASE->CR1 &= ~(1 << CEN);
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <stop_counter+0x54>)
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <stop_counter+0x54>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
        break;
 8001b3c:	e006      	b.n	8001b4c <stop_counter+0x48>
    case TIM4:
    	TIM4_BASE->CR1 &= ~(1 << CEN);
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <stop_counter+0x58>)
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <stop_counter+0x58>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6013      	str	r3, [r2, #0]
    	break;
 8001b4a:	bf00      	nop
    default:
        break;
    }
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800

08001b60 <set_to_output_cmp_mode>:

/**
 * Sets the timer into output compare mode.
 */
void set_to_output_cmp_mode(enum TIMs tim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d008      	beq.n	8001b82 <set_to_output_cmp_mode+0x22>
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d00a      	beq.n	8001b8a <set_to_output_cmp_mode+0x2a>
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d000      	beq.n	8001b7a <set_to_output_cmp_mode+0x1a>
        break;
    case TIM4:
        output_cmp_mode(&(TIM4_BASE->CCMR1));
        break;
    default:
        break;
 8001b78:	e00b      	b.n	8001b92 <set_to_output_cmp_mode+0x32>
void set_to_output_cmp_mode(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        output_cmp_mode(&(TIM2_BASE->CCMR1));
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <set_to_output_cmp_mode+0x3c>)
 8001b7c:	f000 f89e 	bl	8001cbc <output_cmp_mode>
        break;
 8001b80:	e007      	b.n	8001b92 <set_to_output_cmp_mode+0x32>
    case TIM3:
        output_cmp_mode(&(TIM3_BASE->CCMR1));
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <set_to_output_cmp_mode+0x40>)
 8001b84:	f000 f89a 	bl	8001cbc <output_cmp_mode>
        break;
 8001b88:	e003      	b.n	8001b92 <set_to_output_cmp_mode+0x32>
    case TIM4:
        output_cmp_mode(&(TIM4_BASE->CCMR1));
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <set_to_output_cmp_mode+0x44>)
 8001b8c:	f000 f896 	bl	8001cbc <output_cmp_mode>
        break;
 8001b90:	bf00      	nop
    default:
        break;
    }
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40000018 	.word	0x40000018
 8001ba0:	40000418 	.word	0x40000418
 8001ba4:	40000818 	.word	0x40000818

08001ba8 <enable_output_output_cmp_mode>:

/**
 * Enables the output of the timer.
 */
void enable_output_output_cmp_mode(enum TIMs tim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d00d      	beq.n	8001bd4 <enable_output_output_cmp_mode+0x2c>
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d012      	beq.n	8001be2 <enable_output_output_cmp_mode+0x3a>
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d000      	beq.n	8001bc2 <enable_output_output_cmp_mode+0x1a>
        break;
    case TIM4:
        TIM4_BASE->CCER |= 1;
        break;
    default:
        break;
 8001bc0:	e016      	b.n	8001bf0 <enable_output_output_cmp_mode+0x48>
void enable_output_output_cmp_mode(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->CCER |= 1;
 8001bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
        break;
 8001bd2:	e00d      	b.n	8001bf0 <enable_output_output_cmp_mode+0x48>
    case TIM3:
        TIM3_BASE->CCER |= 1;
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <enable_output_output_cmp_mode+0x54>)
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <enable_output_output_cmp_mode+0x54>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
        break;
 8001be0:	e006      	b.n	8001bf0 <enable_output_output_cmp_mode+0x48>
    case TIM4:
        TIM4_BASE->CCER |= 1;
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <enable_output_output_cmp_mode+0x58>)
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <enable_output_output_cmp_mode+0x58>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
        break;
 8001bee:	bf00      	nop
    default:
        break;
    }
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800

08001c04 <clear_output_cmp_mode_pending_flag>:

/**
 * Clears the pending flag for the interrupt.
 */
void clear_output_cmp_mode_pending_flag(enum TIMs tim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d00d      	beq.n	8001c30 <clear_output_cmp_mode_pending_flag+0x2c>
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d012      	beq.n	8001c3e <clear_output_cmp_mode_pending_flag+0x3a>
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d000      	beq.n	8001c1e <clear_output_cmp_mode_pending_flag+0x1a>
        break;
    case TIM4:
        TIM4_BASE->SR &= ~(1 << UIF);
        break;
    default:
        break;
 8001c1c:	e016      	b.n	8001c4c <clear_output_cmp_mode_pending_flag+0x48>
void clear_output_cmp_mode_pending_flag(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->SR &= ~(1 << UIF);
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6113      	str	r3, [r2, #16]
        break;
 8001c2e:	e00d      	b.n	8001c4c <clear_output_cmp_mode_pending_flag+0x48>
    case TIM3:
        TIM3_BASE->SR &= ~(1 << UIF);
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <clear_output_cmp_mode_pending_flag+0x54>)
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <clear_output_cmp_mode_pending_flag+0x54>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6113      	str	r3, [r2, #16]
        break;
 8001c3c:	e006      	b.n	8001c4c <clear_output_cmp_mode_pending_flag+0x48>
    case TIM4:
        TIM4_BASE->SR &= ~(1 << UIF);
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <clear_output_cmp_mode_pending_flag+0x58>)
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <clear_output_cmp_mode_pending_flag+0x58>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6113      	str	r3, [r2, #16]
        break;
 8001c4a:	bf00      	nop
    default:
        break;
    }
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40000800 	.word	0x40000800

08001c60 <enable_output_cmp_mode_interrupt>:

/**
 * Enables the update event interrupt.
 */
void enable_output_cmp_mode_interrupt(enum TIMs tim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
    switch (tim)
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d00d      	beq.n	8001c8c <enable_output_cmp_mode_interrupt+0x2c>
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d012      	beq.n	8001c9a <enable_output_cmp_mode_interrupt+0x3a>
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d000      	beq.n	8001c7a <enable_output_cmp_mode_interrupt+0x1a>
        break;
    case TIM4:
        TIM4_BASE->DIER |= 1;
        break;
    default:
        break;
 8001c78:	e016      	b.n	8001ca8 <enable_output_cmp_mode_interrupt+0x48>
void enable_output_cmp_mode_interrupt(enum TIMs tim)
{
    switch (tim)
    {
    case TIM2:
        TIM2_BASE->DIER |= 1;
 8001c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	60d3      	str	r3, [r2, #12]
        break;
 8001c8a:	e00d      	b.n	8001ca8 <enable_output_cmp_mode_interrupt+0x48>
    case TIM3:
        TIM3_BASE->DIER |= 1;
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <enable_output_cmp_mode_interrupt+0x54>)
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <enable_output_cmp_mode_interrupt+0x54>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	60d3      	str	r3, [r2, #12]
        break;
 8001c98:	e006      	b.n	8001ca8 <enable_output_cmp_mode_interrupt+0x48>
    case TIM4:
        TIM4_BASE->DIER |= 1;
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <enable_output_cmp_mode_interrupt+0x58>)
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <enable_output_cmp_mode_interrupt+0x58>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	60d3      	str	r3, [r2, #12]
        break;
 8001ca6:	bf00      	nop
    default:
        break;
    }
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800

08001cbc <output_cmp_mode>:
}

/********************************************************/

static void output_cmp_mode(volatile uint32_t *CCMR1)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	// clear CCMR1.OC1M
    *CCMR1 &= ~(0b111 << 4);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
    // 0b011 is Toggle when TIMx_CNT = TIMx_CCR1
    *CCMR1 |= 0b011 << 4;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <transmitter_init>:
static void initTransmissionTimer();
static void toggleRetransmission(bool retransmission);
static void startTransmission();
static void stopTransmission();

void transmitter_init(uint8_t src_addr, uint8_t dest_addr, bool packet_mode) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71bb      	strb	r3, [r7, #6]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	717b      	strb	r3, [r7, #5]
	// module input
	packetMode = packet_mode;
 8001cfa:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <transmitter_init+0x64>)
 8001cfc:	797b      	ldrb	r3, [r7, #5]
 8001cfe:	7013      	strb	r3, [r2, #0]
	src = src_addr;
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <transmitter_init+0x68>)
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	7013      	strb	r3, [r2, #0]
	dest = dest_addr;
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <transmitter_init+0x6c>)
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	7013      	strb	r3, [r2, #0]

	init_usart2(19200, F_CPU);
 8001d0c:	4912      	ldr	r1, [pc, #72]	; (8001d58 <transmitter_init+0x70>)
 8001d0e:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 8001d12:	f000 fb1b 	bl	800234c <init_usart2>
	initTransmissionTimer();
 8001d16:	f000 f929 	bl	8001f6c <initTransmissionTimer>

	// Enable transmission pin
	init_GPIO(TRANSMISSION_GPIO);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7fe fff2 	bl	8000d04 <init_GPIO>
	enable_output_mode(TRANSMISSION_GPIO, TRANSMISSION_PIN);
 8001d20:	2109      	movs	r1, #9
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7ff f842 	bl	8000dac <enable_output_mode>



	// Init rng, used for retransmission
	srand(clock(0));
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 fbc3 	bl	80024b4 <clock>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fae1 	bl	80032f8 <srand>
	init_GPIO(C);
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7fe ffe4 	bl	8000d04 <init_GPIO>
	// DEBUG: PC6 - Retransmission Timeout Period
//	enable_output_mode(C, 6);
	// DEBUG: PC5 - Sync Signal
	enable_output_mode(C, 5);
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f7ff f834 	bl	8000dac <enable_output_mode>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000c06 	.word	0x20000c06
 8001d50:	20000c07 	.word	0x20000c07
 8001d54:	20000c08 	.word	0x20000c08
 8001d58:	00f42400 	.word	0x00f42400

08001d5c <transmitter_mainRoutineUpdate>:

void transmitter_mainRoutineUpdate() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af02      	add	r7, sp, #8
	// buffer of the data sent through UART
	static uint8_t dataBuf[PH_MSG_SIZE];
	// cursor that makes sure not to retrieve more than PH_MSG_SIZE bytes into dataBuf
	static int dataCur = 0;

	if (inTransmission && transmissionComplete) {
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <transmitter_mainRoutineUpdate+0x1d4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d004      	beq.n	8001d74 <transmitter_mainRoutineUpdate+0x18>
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <transmitter_mainRoutineUpdate+0x1d8>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80d9 	bne.w	8001f26 <transmitter_mainRoutineUpdate+0x1ca>
//		if (currByte > 2*7 + 2*5) {
//			monitor_jam();
//		}
	}
	else if (!inTransmission && transmissionComplete) {
 8001d74:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <transmitter_mainRoutineUpdate+0x1d4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f083 0301 	eor.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80b0 	beq.w	8001ee4 <transmitter_mainRoutineUpdate+0x188>
 8001d84:	4b6b      	ldr	r3, [pc, #428]	; (8001f34 <transmitter_mainRoutineUpdate+0x1d8>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80ab 	beq.w	8001ee4 <transmitter_mainRoutineUpdate+0x188>
		char c = usart2_getch();
 8001d8e:	f000 faab 	bl	80022e8 <usart2_getch>
 8001d92:	4603      	mov	r3, r0
 8001d94:	70fb      	strb	r3, [r7, #3]

		// data to transmit received, transmit it
		if (c == '\r') {
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	2b0d      	cmp	r3, #13
 8001d9a:	d116      	bne.n	8001dca <transmitter_mainRoutineUpdate+0x6e>
			dataBuf[dataCur] = '\0';
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a66      	ldr	r2, [pc, #408]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	54d1      	strb	r1, [r2, r3]

			// just pressed enter. Don't care about that message
			if (!strcmp((char*)dataBuf, "\0e\0p")) {
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <transmitter_mainRoutineUpdate+0x66>
				dataBuf[0] = dataCur = 0;
 8001dae:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
				gotMessage = false;
 8001dba:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <transmitter_mainRoutineUpdate+0x1e4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e00f      	b.n	8001de2 <transmitter_mainRoutineUpdate+0x86>
			}
			else {
				gotMessage = true;
 8001dc2:	4b5f      	ldr	r3, [pc, #380]	; (8001f40 <transmitter_mainRoutineUpdate+0x1e4>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e00b      	b.n	8001de2 <transmitter_mainRoutineUpdate+0x86>
			}
		}
		// read in data until new line or max buffer size reached
		else if (dataCur < PH_MSG_SIZE-1) {
 8001dca:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2bfd      	cmp	r3, #253	; 0xfd
 8001dd0:	dc07      	bgt.n	8001de2 <transmitter_mainRoutineUpdate+0x86>
			dataBuf[dataCur++] = c;
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	4957      	ldr	r1, [pc, #348]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001dda:	600a      	str	r2, [r1, #0]
 8001ddc:	4957      	ldr	r1, [pc, #348]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	54ca      	strb	r2, [r1, r3]
		}

		// start transmission when in TS_IDLE, and there's something to transmit
		if (monitor_getState() == MS_IDLE && !inTransmission && gotMessage) {
 8001de2:	f7ff f883 	bl	8000eec <monitor_getState>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 809b 	bne.w	8001f24 <transmitter_mainRoutineUpdate+0x1c8>
 8001dee:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <transmitter_mainRoutineUpdate+0x1d4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8093 	beq.w	8001f24 <transmitter_mainRoutineUpdate+0x1c8>
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <transmitter_mainRoutineUpdate+0x1e4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 808e 	beq.w	8001f24 <transmitter_mainRoutineUpdate+0x1c8>
			currByte = 0;
 8001e08:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <transmitter_mainRoutineUpdate+0x1e8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
			gotMessage = false;
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <transmitter_mainRoutineUpdate+0x1e4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]

			// transmit all characters
			transBuf.put = transBuf.get = 0;
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <transmitter_mainRoutineUpdate+0x1ec>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <transmitter_mainRoutineUpdate+0x1ec>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <transmitter_mainRoutineUpdate+0x1ec>)
 8001e20:	6013      	str	r3, [r2, #0]

			if (packetMode) {
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <transmitter_mainRoutineUpdate+0x1f0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d031      	beq.n	8001e8e <transmitter_mainRoutineUpdate+0x132>
				// create packet
				ph_create(&pkt, src, dest, true, &dataBuf, dataCur);
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <transmitter_mainRoutineUpdate+0x1f4>)
 8001e2c:	7819      	ldrb	r1, [r3, #0]
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <transmitter_mainRoutineUpdate+0x1f8>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4845      	ldr	r0, [pc, #276]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e42:	f7ff f95f 	bl	8001104 <ph_create>
				if (pkt.length < PH_MSG_SIZE-1)
 8001e46:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e48:	791b      	ldrb	r3, [r3, #4]
 8001e4a:	2bfd      	cmp	r3, #253	; 0xfd
 8001e4c:	d806      	bhi.n	8001e5c <transmitter_mainRoutineUpdate+0x100>
					pkt.msg[pkt.length] = '\0'; // this is to display the string, since the null terminator of a string literal is not part of the msg
 8001e4e:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e50:	791b      	ldrb	r3, [r3, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e56:	4413      	add	r3, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	719a      	strb	r2, [r3, #6]
				// echo packet
				printf("Transmission The source=%x, Destination=%x, the length=%d, CRC =%x\r\n", pkt.src, pkt.dest, pkt.length, pkt.crc8_fcs);
 8001e5c:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e5e:	789b      	ldrb	r3, [r3, #2]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e64:	78db      	ldrb	r3, [r3, #3]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e6a:	791b      	ldrb	r3, [r3, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e70:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4603      	mov	r3, r0
 8001e78:	4838      	ldr	r0, [pc, #224]	; (8001f5c <transmitter_mainRoutineUpdate+0x200>)
 8001e7a:	f001 f9a5 	bl	80031c8 <iprintf>
				printf("Transmitting %s\r\n", pkt.msg);
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <transmitter_mainRoutineUpdate+0x204>)
 8001e80:	4838      	ldr	r0, [pc, #224]	; (8001f64 <transmitter_mainRoutineUpdate+0x208>)
 8001e82:	f001 f9a1 	bl	80031c8 <iprintf>
				// setup for transmission
				transmitMessage(&pkt);
 8001e86:	4834      	ldr	r0, [pc, #208]	; (8001f58 <transmitter_mainRoutineUpdate+0x1fc>)
 8001e88:	f000 f992 	bl	80021b0 <transmitMessage>
 8001e8c:	e021      	b.n	8001ed2 <transmitter_mainRoutineUpdate+0x176>
			}
			else {
				if (dataCur < PH_MSG_SIZE-1)
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2bfd      	cmp	r3, #253	; 0xfd
 8001e94:	dc07      	bgt.n	8001ea6 <transmitter_mainRoutineUpdate+0x14a>
					dataBuf[dataCur++] = '\0'; // this is to display the string, since the null terminator of a string literal is not part of the msg
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	4926      	ldr	r1, [pc, #152]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001e9e:	600a      	str	r2, [r1, #0]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	54d1      	strb	r1, [r2, r3]
				printf("Transmitting %s\r\n", dataBuf);
 8001ea6:	4925      	ldr	r1, [pc, #148]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001ea8:	482e      	ldr	r0, [pc, #184]	; (8001f64 <transmitter_mainRoutineUpdate+0x208>)
 8001eaa:	f001 f98d 	bl	80031c8 <iprintf>
				for (int i=0; i<dataCur; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	e009      	b.n	8001ec8 <transmitter_mainRoutineUpdate+0x16c>
					transmitByte(dataBuf[i]);
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f957 	bl	8002170 <transmitByte>
			}
			else {
				if (dataCur < PH_MSG_SIZE-1)
					dataBuf[dataCur++] = '\0'; // this is to display the string, since the null terminator of a string literal is not part of the msg
				printf("Transmitting %s\r\n", dataBuf);
				for (int i=0; i<dataCur; i++) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <transmitter_mainRoutineUpdate+0x158>
					transmitByte(dataBuf[i]);
				}
			}

			// clear message
			dataBuf[0] = dataCur = 0;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <transmitter_mainRoutineUpdate+0x1dc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <transmitter_mainRoutineUpdate+0x1e0>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]

			startTransmission();
 8001ede:	f000 f9df 	bl	80022a0 <startTransmission>
	if (inTransmission && transmissionComplete) {
//		if (currByte > 2*7 + 2*5) {
//			monitor_jam();
//		}
	}
	else if (!inTransmission && transmissionComplete) {
 8001ee2:	e01f      	b.n	8001f24 <transmitter_mainRoutineUpdate+0x1c8>

			startTransmission();
		}
	}
	// retransmit after a timeout period
	else if (monitor_getState() == MS_IDLE && !inTransmission && !transmissionComplete){
 8001ee4:	f7ff f802 	bl	8000eec <monitor_getState>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11b      	bne.n	8001f26 <transmitter_mainRoutineUpdate+0x1ca>
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <transmitter_mainRoutineUpdate+0x1d4>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <transmitter_mainRoutineUpdate+0x1ca>
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <transmitter_mainRoutineUpdate+0x1d8>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00d      	beq.n	8001f26 <transmitter_mainRoutineUpdate+0x1ca>
		currByte = currBit = 0; // transmit same message from the start
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <transmitter_mainRoutineUpdate+0x20c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <transmitter_mainRoutineUpdate+0x20c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <transmitter_mainRoutineUpdate+0x1e8>)
 8001f16:	6013      	str	r3, [r2, #0]
		toggleRetransmission(true);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f000 f84f 	bl	8001fbc <toggleRetransmission>
		startTransmission();
 8001f1e:	f000 f9bf 	bl	80022a0 <startTransmission>
	}
}
 8001f22:	e000      	b.n	8001f26 <transmitter_mainRoutineUpdate+0x1ca>
	if (inTransmission && transmissionComplete) {
//		if (currByte > 2*7 + 2*5) {
//			monitor_jam();
//		}
	}
	else if (!inTransmission && transmissionComplete) {
 8001f24:	bf00      	nop
	else if (monitor_getState() == MS_IDLE && !inTransmission && !transmissionComplete){
		currByte = currBit = 0; // transmit same message from the start
		toggleRetransmission(true);
		startTransmission();
	}
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000c04 	.word	0x20000c04
 8001f34:	20000001 	.word	0x20000001
 8001f38:	20000c0c 	.word	0x20000c0c
 8001f3c:	20000c10 	.word	0x20000c10
 8001f40:	20000d0f 	.word	0x20000d0f
 8001f44:	20000c00 	.word	0x20000c00
 8001f48:	200007f0 	.word	0x200007f0
 8001f4c:	20000c06 	.word	0x20000c06
 8001f50:	20000c07 	.word	0x20000c07
 8001f54:	20000c08 	.word	0x20000c08
 8001f58:	20000d10 	.word	0x20000d10
 8001f5c:	08006bb8 	.word	0x08006bb8
 8001f60:	20000d16 	.word	0x20000d16
 8001f64:	08006c00 	.word	0x08006c00
 8001f68:	20000bfc 	.word	0x20000bfc

08001f6c <initTransmissionTimer>:

/**
 * Initiates the timer for the transmission on the PC9 line
 */
static void initTransmissionTimer() {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	enable_timer_clk(TRANSMITTER_TIMER);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fcaf 	bl	80018d4 <enable_timer_clk>
	set_arr(TRANSMITTER_TIMER, TRANSMISSION_TICKS);
 8001f76:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff fcfa 	bl	8001974 <set_arr>
	set_ccr1(TRANSMITTER_TIMER, TRANSMISSION_TICKS);
 8001f80:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff fccf 	bl	8001928 <set_ccr1>
	set_psc(TRANSMITTER_TIMER, 0);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff fd3b 	bl	8001a08 <set_psc>
	// enables toggle on CCR1
	set_to_output_cmp_mode(TRANSMITTER_TIMER);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff fde4 	bl	8001b60 <set_to_output_cmp_mode>
	// enables output in CCER
	enable_output_output_cmp_mode(TRANSMITTER_TIMER);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff fe05 	bl	8001ba8 <enable_output_output_cmp_mode>
	clear_cnt(TRANSMITTER_TIMER);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff fd0e 	bl	80019c0 <clear_cnt>
	start_counter(TRANSMITTER_TIMER);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff fd7f 	bl	8001aa8 <start_counter>
	enable_output_cmp_mode_interrupt(TRANSMITTER_TIMER);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff fe58 	bl	8001c60 <enable_output_cmp_mode_interrupt>
	// register and enable within the NVIC
	log_tim_interrupt(TRANSMITTER_TIMER);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fd4f 	bl	8001a54 <log_tim_interrupt>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop

08001fbc <toggleRetransmission>:
 * toggles the function of the timer from transmission to retransission timeout
 * or vice versa. This is to use the same timer for the random timeout period.
 * if set to retransmission mode, this computes a random time and sets the ticks to that
 * and starts the timer.
 */
static void toggleRetransmission(bool retransmission) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	retransmissionTimeoutActive = retransmission;
 8001fc6:	4a24      	ldr	r2, [pc, #144]	; (8002058 <toggleRetransmission+0x9c>)
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	7013      	strb	r3, [r2, #0]
	stop_counter(TRANSMITTER_TIMER);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff fd99 	bl	8001b04 <stop_counter>
	if (retransmission) {
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d02d      	beq.n	8002034 <toggleRetransmission+0x78>
		// configure timer for retransmission timeout
		set_psc(TRANSMITTER_TIMER, 16000); // ms scale
 8001fd8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff fd13 	bl	8001a08 <set_psc>
		// generate exact timeout
		int N = rand() % TRANSMITTER_N_MAX;
 8001fe2:	f001 f9b1 	bl	8003348 <rand>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <toggleRetransmission+0xa0>)
 8001fea:	fb82 1203 	smull	r1, r2, r2, r3
 8001fee:	1191      	asrs	r1, r2, #6
 8001ff0:	17da      	asrs	r2, r3, #31
 8001ff2:	1a8a      	subs	r2, r1, r2
 8001ff4:	21c8      	movs	r1, #200	; 0xc8
 8001ff6:	fb01 f202 	mul.w	r2, r1, r2
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
		int w = N *1000/TRANSMITTER_N_MAX;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <toggleRetransmission+0xa0>)
 800200a:	fb82 1203 	smull	r1, r2, r2, r3
 800200e:	1192      	asrs	r2, r2, #6
 8002010:	17db      	asrs	r3, r3, #31
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	60bb      	str	r3, [r7, #8]
		printf("Retransmitting in %d ms...\r\n", w);
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <toggleRetransmission+0xa4>)
 800201a:	f001 f8d5 	bl	80031c8 <iprintf>
		// set count
		set_arr(TRANSMITTER_TIMER, w);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4619      	mov	r1, r3
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fca6 	bl	8001974 <set_arr>
		set_ccr1(TRANSMITTER_TIMER, w);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4619      	mov	r1, r3
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fc7b 	bl	8001928 <set_ccr1>
		set_psc(TRANSMITTER_TIMER, 0); // cpu scale
		set_arr(TRANSMITTER_TIMER, TRANSMISSION_TICKS);
		set_ccr1(TRANSMITTER_TIMER, TRANSMISSION_TICKS);
	}

}
 8002032:	e00d      	b.n	8002050 <toggleRetransmission+0x94>
		// set count
		set_arr(TRANSMITTER_TIMER, w);
		set_ccr1(TRANSMITTER_TIMER, w);
	}
	else {
		set_psc(TRANSMITTER_TIMER, 0); // cpu scale
 8002034:	2100      	movs	r1, #0
 8002036:	2001      	movs	r0, #1
 8002038:	f7ff fce6 	bl	8001a08 <set_psc>
		set_arr(TRANSMITTER_TIMER, TRANSMISSION_TICKS);
 800203c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff fc97 	bl	8001974 <set_arr>
		set_ccr1(TRANSMITTER_TIMER, TRANSMISSION_TICKS);
 8002046:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff fc6c 	bl	8001928 <set_ccr1>
	}

}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000c05 	.word	0x20000c05
 800205c:	51eb851f 	.word	0x51eb851f
 8002060:	08006c14 	.word	0x08006c14

08002064 <TIM2_IRQHandler>:

/**
 * This resets itself to transmit as long as the transmission buffer is not empty.
 * It changes the PC9 line every half-clock period in order to match the required bit rate.
 */
void TIM2_IRQHandler(){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	clear_output_cmp_mode_pending_flag(TRANSMITTER_TIMER);
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff fdcb 	bl	8001c04 <clear_output_cmp_mode_pending_flag>

	// retransmission mode, start transmission after timeout
	if (retransmissionTimeoutActive) {
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <TIM2_IRQHandler+0xf4>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <TIM2_IRQHandler+0x1e>
		toggleRetransmission(false);
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff ffa0 	bl	8001fbc <toggleRetransmission>
		startTransmission();
 800207c:	f000 f910 	bl	80022a0 <startTransmission>
		// TODO DEBUG PC6: to confirm timeout period
//		clear_cnt(TRANSMITTER_TIMER);
//		select_gpio(C)->ODR ^= (1<<6);
		return;
 8002080:	e068      	b.n	8002154 <TIM2_IRQHandler+0xf0>
	}

	// Transmission complete, nothing else to transmit
	if (!hasElement(&transBuf) || currByte == transBuf.put) {
 8002082:	4836      	ldr	r0, [pc, #216]	; (800215c <TIM2_IRQHandler+0xf8>)
 8002084:	f7ff fb8a 	bl	800179c <hasElement>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <TIM2_IRQHandler+0x36>
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <TIM2_IRQHandler+0xf8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a33      	ldr	r2, [pc, #204]	; (8002160 <TIM2_IRQHandler+0xfc>)
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	4293      	cmp	r3, r2
 8002098:	d10b      	bne.n	80020b2 <TIM2_IRQHandler+0x4e>
			stopTransmission();
 800209a:	f000 f911 	bl	80022c0 <stopTransmission>
			transmissionComplete = true;
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <TIM2_IRQHandler+0x100>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
			// DEBUG PC5: use as sync signal
			GPIOC_BASE->ODR &= ~(1<<5);
 80020a4:	4a30      	ldr	r2, [pc, #192]	; (8002168 <TIM2_IRQHandler+0x104>)
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <TIM2_IRQHandler+0x104>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f023 0320 	bic.w	r3, r3, #32
 80020ae:	6153      	str	r3, [r2, #20]
			return;
 80020b0:	e050      	b.n	8002154 <TIM2_IRQHandler+0xf0>
	}
	// Cease transmission if a collision occurs. Prepare to retransmit message
	else if (monitor_getState() == MS_COLLISION) {
 80020b2:	f7fe ff1b 	bl	8000eec <monitor_getState>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d10b      	bne.n	80020d4 <TIM2_IRQHandler+0x70>
		stopTransmission();
 80020bc:	f000 f900 	bl	80022c0 <stopTransmission>
		transmissionComplete = false;
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <TIM2_IRQHandler+0x100>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		// TODO PC5: use as sync signal
		GPIOC_BASE->ODR &= ~(1<<5);
 80020c6:	4a28      	ldr	r2, [pc, #160]	; (8002168 <TIM2_IRQHandler+0x104>)
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <TIM2_IRQHandler+0x104>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f023 0320 	bic.w	r3, r3, #32
 80020d0:	6153      	str	r3, [r2, #20]
		return;
 80020d2:	e03f      	b.n	8002154 <TIM2_IRQHandler+0xf0>

	}

	if (currByte == 0 && currBit == 0) {
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <TIM2_IRQHandler+0xfc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <TIM2_IRQHandler+0x8c>
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <TIM2_IRQHandler+0x108>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <TIM2_IRQHandler+0x8c>
		// TODO PC5: use as sync signal
		GPIOC_BASE->ODR |= (1<<5);
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <TIM2_IRQHandler+0x104>)
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <TIM2_IRQHandler+0x104>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f043 0320 	orr.w	r3, r3, #32
 80020ee:	6153      	str	r3, [r2, #20]
	}

	// Transmit the one bit by setting its value in the transmission line. bits are sent MSB -> LSB.
	if ((transBuf.buffer[currByte] & (1<<(7-currBit))) != 0)
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <TIM2_IRQHandler+0xfc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <TIM2_IRQHandler+0xf8>)
 80020f6:	4413      	add	r3, r2
 80020f8:	7a1b      	ldrb	r3, [r3, #8]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <TIM2_IRQHandler+0x108>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1c3 0307 	rsb	r3, r3, #7
 8002104:	fa42 f303 	asr.w	r3, r2, r3
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <TIM2_IRQHandler+0xbe>
		select_gpio(TRANSMISSION_GPIO)->ODR |= 1<<TRANSMISSION_PIN;
 8002110:	2002      	movs	r0, #2
 8002112:	f7fe fe6f 	bl	8000df4 <select_gpio>
 8002116:	4603      	mov	r3, r0
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	e007      	b.n	8002132 <TIM2_IRQHandler+0xce>
	else
		select_gpio(TRANSMISSION_GPIO)->ODR &= ~(1<<TRANSMISSION_PIN);
 8002122:	2002      	movs	r0, #2
 8002124:	f7fe fe66 	bl	8000df4 <select_gpio>
 8002128:	4603      	mov	r3, r0
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002130:	615a      	str	r2, [r3, #20]

	// increment the bit to transfer for next ISR call
	currBit++;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <TIM2_IRQHandler+0x108>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <TIM2_IRQHandler+0x108>)
 800213a:	6013      	str	r3, [r2, #0]

	// move on to next byte if reached end of byte
	if (currBit == 8) {
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <TIM2_IRQHandler+0x108>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d107      	bne.n	8002154 <TIM2_IRQHandler+0xf0>
		currBit = 0;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <TIM2_IRQHandler+0x108>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
		currByte++;
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <TIM2_IRQHandler+0xfc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <TIM2_IRQHandler+0xfc>)
 8002152:	6013      	str	r3, [r2, #0]
	}

}
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000c05 	.word	0x20000c05
 800215c:	200007f0 	.word	0x200007f0
 8002160:	20000c00 	.word	0x20000c00
 8002164:	20000001 	.word	0x20000001
 8002168:	40020800 	.word	0x40020800
 800216c:	20000bfc 	.word	0x20000bfc

08002170 <transmitByte>:

/**
 * This converts the byte to manchester encoding, and sets it up for transmission.
*/
static void transmitByte(uint8_t byte) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	uint16_t manchesterSymbol = encodeManchester(byte);
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f857 	bl	8002230 <encodeManchester>
 8002182:	4603      	mov	r3, r0
 8002184:	81fb      	strh	r3, [r7, #14]
	// set the uint16_t manchester encoded byte for transmission
	put(&transBuf, manchesterSymbol >> 8);
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	b29b      	uxth	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4619      	mov	r1, r3
 8002190:	4806      	ldr	r0, [pc, #24]	; (80021ac <transmitByte+0x3c>)
 8002192:	f7ff fac3 	bl	800171c <put>
	put(&transBuf, manchesterSymbol & 0xFF);
 8002196:	89fb      	ldrh	r3, [r7, #14]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4619      	mov	r1, r3
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <transmitByte+0x3c>)
 800219e:	f7ff fabd 	bl	800171c <put>
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200007f0 	.word	0x200007f0

080021b0 <transmitMessage>:

/**
 * Transmits all of the bytes of the packet header, taking into account
 * that message is not necessarily maximum length
 */
static void transmitMessage(const PacketHeader *pkt) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	transmitByte(pkt->synch);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ffd7 	bl	8002170 <transmitByte>
	transmitByte(pkt->ver);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ffd2 	bl	8002170 <transmitByte>
	transmitByte(pkt->src);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	789b      	ldrb	r3, [r3, #2]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffcd 	bl	8002170 <transmitByte>
	transmitByte(pkt->dest);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	78db      	ldrb	r3, [r3, #3]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ffc8 	bl	8002170 <transmitByte>
	transmitByte(pkt->length);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ffc3 	bl	8002170 <transmitByte>
	transmitByte(pkt->crc_flag);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	795b      	ldrb	r3, [r3, #5]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ffbe 	bl	8002170 <transmitByte>
	for (int i = 0; i<pkt->length; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e00a      	b.n	8002210 <transmitMessage+0x60>
		transmitByte(pkt->msg[i]);
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	3306      	adds	r3, #6
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ffb3 	bl	8002170 <transmitByte>
	transmitByte(pkt->ver);
	transmitByte(pkt->src);
	transmitByte(pkt->dest);
	transmitByte(pkt->length);
	transmitByte(pkt->crc_flag);
	for (int i = 0; i<pkt->length; i++)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	461a      	mov	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	dcee      	bgt.n	80021fa <transmitMessage+0x4a>
		transmitByte(pkt->msg[i]);
	transmitByte(pkt->crc8_fcs);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffa4 	bl	8002170 <transmitByte>
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <encodeManchester>:
 * 	0 -> 0b01
 * 	1 -> 0b10
 * This is set so it can be transmitted directly to a pin from bits 0 up to 15,
 * every half-clock period.
 */
static uint16_t encodeManchester(uint8_t data){
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
	uint16_t output = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	82fb      	strh	r3, [r7, #22]
	for (int i=0; i<8; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	e023      	b.n	800228c <encodeManchester+0x5c>
		int bit = (data & (1<<i)) >> i;
 8002244:	79fa      	ldrb	r2, [r7, #7]
 8002246:	2101      	movs	r1, #1
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	401a      	ands	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	fa42 f303 	asr.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
		output |= (0^bit) << (i*2);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	b29a      	uxth	r2, r3
 8002264:	8afb      	ldrh	r3, [r7, #22]
 8002266:	4313      	orrs	r3, r2
 8002268:	b29b      	uxth	r3, r3
 800226a:	82fb      	strh	r3, [r7, #22]
		output |= (1^bit) << (i*2+1); // TODO 1 0 -> 0 1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f083 0201 	eor.w	r2, r3, #1
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	3301      	adds	r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	b29a      	uxth	r2, r3
 800227e:	8afb      	ldrh	r3, [r7, #22]
 8002280:	4313      	orrs	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	82fb      	strh	r3, [r7, #22]
 * This is set so it can be transmitted directly to a pin from bits 0 up to 15,
 * every half-clock period.
 */
static uint16_t encodeManchester(uint8_t data){
	uint16_t output = 0;
	for (int i=0; i<8; i++) {
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	3301      	adds	r3, #1
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b07      	cmp	r3, #7
 8002290:	ddd8      	ble.n	8002244 <encodeManchester+0x14>
		int bit = (data & (1<<i)) >> i;
		output |= (0^bit) << (i*2);
		output |= (1^bit) << (i*2+1); // TODO 1 0 -> 0 1
	}
	return output;
 8002292:	8afb      	ldrh	r3, [r7, #22]
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <startTransmission>:

/**
 * Starts transmission by resetting and enabling the transmission timer's counter.
 * Should only start when in the idle state
 */
static inline void startTransmission() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	inTransmission = true;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <startTransmission+0x1c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
	clear_cnt(TRANSMITTER_TIMER);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fb88 	bl	80019c0 <clear_cnt>
	start_counter(TRANSMITTER_TIMER);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7ff fbf9 	bl	8001aa8 <start_counter>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000c04 	.word	0x20000c04

080022c0 <stopTransmission>:

/**
 * Stop transmission, either due to reaching the end of transmission or due to a collision
 */
static inline void stopTransmission() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	inTransmission = false;
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <stopTransmission+0x24>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
	select_gpio(TRANSMISSION_GPIO)->ODR |= 1<<TRANSMISSION_PIN;
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7fe fd92 	bl	8000df4 <select_gpio>
 80022d0:	4603      	mov	r3, r0
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	615a      	str	r2, [r3, #20]
	stop_counter(TRANSMITTER_TIMER);
 80022da:	2001      	movs	r0, #1
 80022dc:	f7ff fc12 	bl	8001b04 <stop_counter>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000c04 	.word	0x20000c04

080022e8 <usart2_getch>:
#include "isr.h"
#include <inttypes.h>
#include <stdio.h>

char usart2_getch()
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
    char c;
    while ((*(USART_SR ) & (1 << RXNE)) != (1 << RXNE))
 80022ee:	bf00      	nop
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <usart2_getch+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f9      	beq.n	80022f0 <usart2_getch+0x8>
        ;
    c = ((char) *USART_DR ); // Read character from usart
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <usart2_getch+0x2c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	71fb      	strb	r3, [r7, #7]
    return c;
 8002302:	79fb      	ldrb	r3, [r7, #7]
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40004400 	.word	0x40004400
 8002314:	40004404 	.word	0x40004404

08002318 <usart2_putch>:

void usart2_putch(char c)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
    while ((*(USART_SR ) & (1 << TXE)) != (1 << TXE))
 8002322:	bf00      	nop
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <usart2_putch+0x2c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f9      	beq.n	8002324 <usart2_putch+0xc>
        ;
    *(USART_DR ) = c;
 8002330:	4a05      	ldr	r2, [pc, #20]	; (8002348 <usart2_putch+0x30>)
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	6013      	str	r3, [r2, #0]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40004400 	.word	0x40004400
 8002348:	40004404 	.word	0x40004404

0800234c <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    // Enable clocks for GPIOA and USART2
    *(RCC_AHB1ENR) |= (1 << GPIOAEN);
 8002356:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <init_usart2+0x8c>)
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <init_usart2+0x8c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6013      	str	r3, [r2, #0]
    *(RCC_APB1ENR) |= (1 << USART2EN);
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <init_usart2+0x90>)
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <init_usart2+0x90>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	6013      	str	r3, [r2, #0]

    // Function 7 of PORTA pins is USART
    GPIOA_BASE->AFRL &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <init_usart2+0x94>)
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <init_usart2+0x94>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002378:	6213      	str	r3, [r2, #32]
    GPIOA_BASE->AFRL |= (0b01110111 << 8); // Choose function 7 for both PA3 and PA2
 800237a:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <init_usart2+0x94>)
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <init_usart2+0x94>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002384:	6213      	str	r3, [r2, #32]
    GPIOA_BASE->MODER &= (0xFFFFFF0F); // Clear mode bits for PA3 and PA2
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <init_usart2+0x94>)
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <init_usart2+0x94>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002390:	6013      	str	r3, [r2, #0]
    GPIOA_BASE->MODER |= (0b1010 << 4); // Both PA3 and PA2 in alt function mode
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <init_usart2+0x94>)
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <init_usart2+0x94>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800239c:	6013      	str	r3, [r2, #0]
    //USART2_init(); //8n1 no flow control
    // over8 = 0..oversample by 16
    // M = 0..1 start bit, data size is 8, 1 stop bit
    // PCE= 0..Parity check not enabled
    // no interrupts... using polling
    *(USART_CR1 ) = (1 << UE) | (1 << TE) | (1 << RE); // Enable UART, Tx and Rx
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <init_usart2+0x98>)
 80023a0:	f242 020c 	movw	r2, #8204	; 0x200c
 80023a4:	601a      	str	r2, [r3, #0]
    *(USART_CR2 ) = 0; // This is the default, but do it anyway
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <init_usart2+0x9c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    *(USART_CR3 ) = 0; // This is the default, but do it anyway
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <init_usart2+0xa0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    *(USART_BRR ) = sysclk / baud;
 80023b2:	490f      	ldr	r1, [pc, #60]	; (80023f0 <init_usart2+0xa4>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	600b      	str	r3, [r1, #0]

    /* I'm not sure if this is needed for standard IO*/
    //setvbuf(stderr, NULL, _IONBF, 0);
    //setvbuf(stdin, NULL, _IONBF, 0);
    setvbuf(stdout, NULL, _IONBF, 0);
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <init_usart2+0xa8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	2300      	movs	r3, #0
 80023c6:	2202      	movs	r2, #2
 80023c8:	2100      	movs	r1, #0
 80023ca:	f001 f823 	bl	8003414 <setvbuf>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023830 	.word	0x40023830
 80023dc:	40023840 	.word	0x40023840
 80023e0:	40020000 	.word	0x40020000
 80023e4:	4000440c 	.word	0x4000440c
 80023e8:	40004410 	.word	0x40004410
 80023ec:	40004414 	.word	0x40004414
 80023f0:	40004408 	.word	0x40004408
 80023f4:	20000064 	.word	0x20000064

080023f8 <Reset_Handler>:
Reset_Handler:

// enable floating point - added by DER

	# CPACR is located at address 0xE000ED88
	LDR.W   R0, =0xE000ED88
 80023f8:	f8df 0044 	ldr.w	r0, [pc, #68]	; 8002440 <LoopForever+0x2>
	# Read CPACR
	LDR R1, [R0]
 80023fc:	6801      	ldr	r1, [r0, #0]
	# Set bits 20-23 to enable CP10 and CP11 coprocessors
	ORR R1, R1, #(0xF << 20)
 80023fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
	# Write back the modified value to the CPACR
	STR R1, [R0] // wait for store to complete
 8002402:	6001      	str	r1, [r0, #0]
	DSB
 8002404:	f3bf 8f4f 	dsb	sy
	# reset pipeline now the FPU is enabled
	ISB
 8002408:	f3bf 8f6f 	isb	sy

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800240c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800240e:	e003      	b.n	8002418 <LoopCopyDataInit>

08002410 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002412:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002414:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002416:	3104      	adds	r1, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002418:	480b      	ldr	r0, [pc, #44]	; (8002448 <LoopForever+0xa>)
	ldr	r3, =_edata
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <LoopForever+0xe>)
	adds	r2, r0, r1
 800241c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800241e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002420:	d3f6      	bcc.n	8002410 <CopyDataInit>
	ldr	r2, =_sbss
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002424:	e002      	b.n	800242c <LoopFillZerobss>

08002426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 8002426:	2300      	movs	r3, #0
 	str  r3, [r2]
 8002428:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 800242a:	3204      	adds	r2, #4

0800242c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <LoopForever+0x16>)
	cmp	r2, r3
 800242e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002430:	d3f9      	bcc.n	8002426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002432:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 8002436:	f000 f857 	bl	80024e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800243a:	f7fe fd0d 	bl	8000e58 <main>

0800243e <LoopForever>:

LoopForever:
    b LoopForever
 800243e:	e7fe      	b.n	800243e <LoopForever>
Reset_Handler:

// enable floating point - added by DER

	# CPACR is located at address 0xE000ED88
	LDR.W   R0, =0xE000ED88
 8002440:	e000ed88 	.word	0xe000ed88
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002444:	08006f58 	.word	0x08006f58
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002448:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800244c:	200000a4 	.word	0x200000a4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002450:	200000a4 	.word	0x200000a4
	movs r3, #0
 	str  r3, [r2]
	adds r2, r2, #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002454:	20000e2c 	.word	0x20000e2c

08002458 <ADC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC_IRQHandler>
	...

0800245c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <_sbrk+0x50>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <_sbrk+0x16>
		heap_end = &end;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <_sbrk+0x50>)
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <_sbrk+0x54>)
 8002470:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <_sbrk+0x50>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <_sbrk+0x50>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	466a      	mov	r2, sp
 8002482:	4293      	cmp	r3, r2
 8002484:	d907      	bls.n	8002496 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002486:	f000 f829 	bl	80024dc <__errno>
 800248a:	4602      	mov	r2, r0
 800248c:	230c      	movs	r3, #12
 800248e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	e006      	b.n	80024a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <_sbrk+0x50>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	4a03      	ldr	r2, [pc, #12]	; (80024ac <_sbrk+0x50>)
 80024a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000e18 	.word	0x20000e18
 80024b0:	20000e30 	.word	0x20000e30

080024b4 <clock>:
 80024b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <clock+0x24>)
 80024b8:	4669      	mov	r1, sp
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	f001 fefe 	bl	80042bc <_times_r>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d006      	beq.n	80024d2 <clock+0x1e>
 80024c4:	e89d 0009 	ldmia.w	sp, {r0, r3}
 80024c8:	4418      	add	r0, r3
 80024ca:	9b02      	ldr	r3, [sp, #8]
 80024cc:	4418      	add	r0, r3
 80024ce:	9b03      	ldr	r3, [sp, #12]
 80024d0:	4418      	add	r0, r3
 80024d2:	b005      	add	sp, #20
 80024d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d8:	20000064 	.word	0x20000064

080024dc <__errno>:
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <__errno+0x8>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000064 	.word	0x20000064

080024e8 <__libc_init_array>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <__libc_init_array+0x3c>)
 80024ec:	4c0e      	ldr	r4, [pc, #56]	; (8002528 <__libc_init_array+0x40>)
 80024ee:	1ae4      	subs	r4, r4, r3
 80024f0:	10a4      	asrs	r4, r4, #2
 80024f2:	2500      	movs	r5, #0
 80024f4:	461e      	mov	r6, r3
 80024f6:	42a5      	cmp	r5, r4
 80024f8:	d004      	beq.n	8002504 <__libc_init_array+0x1c>
 80024fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024fe:	4798      	blx	r3
 8002500:	3501      	adds	r5, #1
 8002502:	e7f8      	b.n	80024f6 <__libc_init_array+0xe>
 8002504:	f004 fb0c 	bl	8006b20 <_init>
 8002508:	4c08      	ldr	r4, [pc, #32]	; (800252c <__libc_init_array+0x44>)
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <__libc_init_array+0x48>)
 800250c:	1ae4      	subs	r4, r4, r3
 800250e:	10a4      	asrs	r4, r4, #2
 8002510:	2500      	movs	r5, #0
 8002512:	461e      	mov	r6, r3
 8002514:	42a5      	cmp	r5, r4
 8002516:	d004      	beq.n	8002522 <__libc_init_array+0x3a>
 8002518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800251c:	4798      	blx	r3
 800251e:	3501      	adds	r5, #1
 8002520:	e7f8      	b.n	8002514 <__libc_init_array+0x2c>
 8002522:	bd70      	pop	{r4, r5, r6, pc}
 8002524:	08006f50 	.word	0x08006f50
 8002528:	08006f50 	.word	0x08006f50
 800252c:	08006f54 	.word	0x08006f54
 8002530:	08006f50 	.word	0x08006f50

08002534 <memcpy>:
 8002534:	b510      	push	{r4, lr}
 8002536:	1e43      	subs	r3, r0, #1
 8002538:	440a      	add	r2, r1
 800253a:	4291      	cmp	r1, r2
 800253c:	d004      	beq.n	8002548 <memcpy+0x14>
 800253e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002546:	e7f8      	b.n	800253a <memcpy+0x6>
 8002548:	bd10      	pop	{r4, pc}

0800254a <memset>:
 800254a:	4402      	add	r2, r0
 800254c:	4603      	mov	r3, r0
 800254e:	4293      	cmp	r3, r2
 8002550:	d002      	beq.n	8002558 <memset+0xe>
 8002552:	f803 1b01 	strb.w	r1, [r3], #1
 8002556:	e7fa      	b.n	800254e <memset+0x4>
 8002558:	4770      	bx	lr

0800255a <__cvt>:
 800255a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800255e:	ec55 4b10 	vmov	r4, r5, d0
 8002562:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002564:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002568:	2d00      	cmp	r5, #0
 800256a:	460e      	mov	r6, r1
 800256c:	4691      	mov	r9, r2
 800256e:	4619      	mov	r1, r3
 8002570:	bfb8      	it	lt
 8002572:	4622      	movlt	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f027 0720 	bic.w	r7, r7, #32
 800257a:	bfbb      	ittet	lt
 800257c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002580:	461d      	movlt	r5, r3
 8002582:	2300      	movge	r3, #0
 8002584:	232d      	movlt	r3, #45	; 0x2d
 8002586:	bfb8      	it	lt
 8002588:	4614      	movlt	r4, r2
 800258a:	2f46      	cmp	r7, #70	; 0x46
 800258c:	700b      	strb	r3, [r1, #0]
 800258e:	d003      	beq.n	8002598 <__cvt+0x3e>
 8002590:	2f45      	cmp	r7, #69	; 0x45
 8002592:	d103      	bne.n	800259c <__cvt+0x42>
 8002594:	3601      	adds	r6, #1
 8002596:	e001      	b.n	800259c <__cvt+0x42>
 8002598:	2103      	movs	r1, #3
 800259a:	e000      	b.n	800259e <__cvt+0x44>
 800259c:	2102      	movs	r1, #2
 800259e:	ab03      	add	r3, sp, #12
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	ab02      	add	r3, sp, #8
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4632      	mov	r2, r6
 80025a8:	4653      	mov	r3, sl
 80025aa:	ec45 4b10 	vmov	d0, r4, r5
 80025ae:	f001 ffdb 	bl	8004568 <_dtoa_r>
 80025b2:	2f47      	cmp	r7, #71	; 0x47
 80025b4:	4680      	mov	r8, r0
 80025b6:	d102      	bne.n	80025be <__cvt+0x64>
 80025b8:	f019 0f01 	tst.w	r9, #1
 80025bc:	d028      	beq.n	8002610 <__cvt+0xb6>
 80025be:	2f46      	cmp	r7, #70	; 0x46
 80025c0:	eb08 0906 	add.w	r9, r8, r6
 80025c4:	d111      	bne.n	80025ea <__cvt+0x90>
 80025c6:	f898 3000 	ldrb.w	r3, [r8]
 80025ca:	2b30      	cmp	r3, #48	; 0x30
 80025cc:	d10a      	bne.n	80025e4 <__cvt+0x8a>
 80025ce:	2200      	movs	r2, #0
 80025d0:	2300      	movs	r3, #0
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fe facb 	bl	8000b70 <__aeabi_dcmpeq>
 80025da:	b918      	cbnz	r0, 80025e4 <__cvt+0x8a>
 80025dc:	f1c6 0601 	rsb	r6, r6, #1
 80025e0:	f8ca 6000 	str.w	r6, [sl]
 80025e4:	f8da 3000 	ldr.w	r3, [sl]
 80025e8:	4499      	add	r9, r3
 80025ea:	2200      	movs	r2, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fe fabd 	bl	8000b70 <__aeabi_dcmpeq>
 80025f6:	b908      	cbnz	r0, 80025fc <__cvt+0xa2>
 80025f8:	2230      	movs	r2, #48	; 0x30
 80025fa:	e002      	b.n	8002602 <__cvt+0xa8>
 80025fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8002600:	e006      	b.n	8002610 <__cvt+0xb6>
 8002602:	9b03      	ldr	r3, [sp, #12]
 8002604:	4599      	cmp	r9, r3
 8002606:	d903      	bls.n	8002610 <__cvt+0xb6>
 8002608:	1c59      	adds	r1, r3, #1
 800260a:	9103      	str	r1, [sp, #12]
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e7f8      	b.n	8002602 <__cvt+0xa8>
 8002610:	9b03      	ldr	r3, [sp, #12]
 8002612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002614:	ebc8 0303 	rsb	r3, r8, r3
 8002618:	4640      	mov	r0, r8
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	b004      	add	sp, #16
 800261e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002622 <__exponent>:
 8002622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002624:	4603      	mov	r3, r0
 8002626:	2900      	cmp	r1, #0
 8002628:	bfb8      	it	lt
 800262a:	4249      	neglt	r1, r1
 800262c:	f803 2b02 	strb.w	r2, [r3], #2
 8002630:	bfb4      	ite	lt
 8002632:	222d      	movlt	r2, #45	; 0x2d
 8002634:	222b      	movge	r2, #43	; 0x2b
 8002636:	2909      	cmp	r1, #9
 8002638:	7042      	strb	r2, [r0, #1]
 800263a:	dd19      	ble.n	8002670 <__exponent+0x4e>
 800263c:	f10d 0207 	add.w	r2, sp, #7
 8002640:	4616      	mov	r6, r2
 8002642:	250a      	movs	r5, #10
 8002644:	fb91 f4f5 	sdiv	r4, r1, r5
 8002648:	fb05 1114 	mls	r1, r5, r4, r1
 800264c:	3130      	adds	r1, #48	; 0x30
 800264e:	2c09      	cmp	r4, #9
 8002650:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8002654:	4621      	mov	r1, r4
 8002656:	dcf5      	bgt.n	8002644 <__exponent+0x22>
 8002658:	3130      	adds	r1, #48	; 0x30
 800265a:	1e54      	subs	r4, r2, #1
 800265c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002660:	42b4      	cmp	r4, r6
 8002662:	461a      	mov	r2, r3
 8002664:	d20a      	bcs.n	800267c <__exponent+0x5a>
 8002666:	f814 2b01 	ldrb.w	r2, [r4], #1
 800266a:	f803 2b01 	strb.w	r2, [r3], #1
 800266e:	e7f7      	b.n	8002660 <__exponent+0x3e>
 8002670:	2430      	movs	r4, #48	; 0x30
 8002672:	461a      	mov	r2, r3
 8002674:	4421      	add	r1, r4
 8002676:	f802 4b02 	strb.w	r4, [r2], #2
 800267a:	7059      	strb	r1, [r3, #1]
 800267c:	1a10      	subs	r0, r2, r0
 800267e:	b002      	add	sp, #8
 8002680:	bd70      	pop	{r4, r5, r6, pc}
	...

08002684 <_printf_float>:
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002688:	b08b      	sub	sp, #44	; 0x2c
 800268a:	460c      	mov	r4, r1
 800268c:	4616      	mov	r6, r2
 800268e:	461f      	mov	r7, r3
 8002690:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002694:	4605      	mov	r5, r0
 8002696:	f003 f9a1 	bl	80059dc <_localeconv_r>
 800269a:	f8d0 b000 	ldr.w	fp, [r0]
 800269e:	4658      	mov	r0, fp
 80026a0:	f7fd fde8 	bl	8000274 <strlen>
 80026a4:	2300      	movs	r3, #0
 80026a6:	9308      	str	r3, [sp, #32]
 80026a8:	f8d8 3000 	ldr.w	r3, [r8]
 80026ac:	9004      	str	r0, [sp, #16]
 80026ae:	3307      	adds	r3, #7
 80026b0:	f023 0307 	bic.w	r3, r3, #7
 80026b4:	f103 0208 	add.w	r2, r3, #8
 80026b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80026bc:	f8c8 2000 	str.w	r2, [r8]
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80026c8:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80026cc:	f000 fe76 	bl	80033bc <__fpclassifyd>
 80026d0:	2801      	cmp	r0, #1
 80026d2:	d119      	bne.n	8002708 <_printf_float+0x84>
 80026d4:	2200      	movs	r2, #0
 80026d6:	2300      	movs	r3, #0
 80026d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026dc:	f7fe fa52 	bl	8000b84 <__aeabi_dcmplt>
 80026e0:	b110      	cbz	r0, 80026e8 <_printf_float+0x64>
 80026e2:	232d      	movs	r3, #45	; 0x2d
 80026e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e8:	4b97      	ldr	r3, [pc, #604]	; (8002948 <_printf_float+0x2c4>)
 80026ea:	4a98      	ldr	r2, [pc, #608]	; (800294c <_printf_float+0x2c8>)
 80026ec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80026f0:	bf8c      	ite	hi
 80026f2:	4690      	movhi	r8, r2
 80026f4:	4698      	movls	r8, r3
 80026f6:	2303      	movs	r3, #3
 80026f8:	6123      	str	r3, [r4, #16]
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6023      	str	r3, [r4, #0]
 8002702:	f04f 0a00 	mov.w	sl, #0
 8002706:	e08e      	b.n	8002826 <_printf_float+0x1a2>
 8002708:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800270c:	f000 fe56 	bl	80033bc <__fpclassifyd>
 8002710:	6822      	ldr	r2, [r4, #0]
 8002712:	b960      	cbnz	r0, 800272e <_printf_float+0xaa>
 8002714:	4b8e      	ldr	r3, [pc, #568]	; (8002950 <_printf_float+0x2cc>)
 8002716:	498f      	ldr	r1, [pc, #572]	; (8002954 <_printf_float+0x2d0>)
 8002718:	f022 0204 	bic.w	r2, r2, #4
 800271c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002720:	bf8c      	ite	hi
 8002722:	4688      	movhi	r8, r1
 8002724:	4698      	movls	r8, r3
 8002726:	2303      	movs	r3, #3
 8002728:	6123      	str	r3, [r4, #16]
 800272a:	6022      	str	r2, [r4, #0]
 800272c:	e7e9      	b.n	8002702 <_printf_float+0x7e>
 800272e:	6861      	ldr	r1, [r4, #4]
 8002730:	1c4b      	adds	r3, r1, #1
 8002732:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8002736:	a808      	add	r0, sp, #32
 8002738:	d101      	bne.n	800273e <_printf_float+0xba>
 800273a:	2306      	movs	r3, #6
 800273c:	e009      	b.n	8002752 <_printf_float+0xce>
 800273e:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8002742:	d002      	beq.n	800274a <_printf_float+0xc6>
 8002744:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002748:	d104      	bne.n	8002754 <_printf_float+0xd0>
 800274a:	2900      	cmp	r1, #0
 800274c:	f040 81af 	bne.w	8002aae <_printf_float+0x42a>
 8002750:	2301      	movs	r3, #1
 8002752:	6063      	str	r3, [r4, #4]
 8002754:	2300      	movs	r3, #0
 8002756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800275a:	9303      	str	r3, [sp, #12]
 800275c:	ab07      	add	r3, sp, #28
 800275e:	9002      	str	r0, [sp, #8]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	6022      	str	r2, [r4, #0]
 8002764:	f10d 031b 	add.w	r3, sp, #27
 8002768:	f8cd 9004 	str.w	r9, [sp, #4]
 800276c:	6861      	ldr	r1, [r4, #4]
 800276e:	4628      	mov	r0, r5
 8002770:	f7ff fef3 	bl	800255a <__cvt>
 8002774:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8002778:	2b47      	cmp	r3, #71	; 0x47
 800277a:	4680      	mov	r8, r0
 800277c:	d109      	bne.n	8002792 <_printf_float+0x10e>
 800277e:	9b07      	ldr	r3, [sp, #28]
 8002780:	1cd8      	adds	r0, r3, #3
 8002782:	db02      	blt.n	800278a <_printf_float+0x106>
 8002784:	6862      	ldr	r2, [r4, #4]
 8002786:	4293      	cmp	r3, r2
 8002788:	dd30      	ble.n	80027ec <_printf_float+0x168>
 800278a:	f1a9 0902 	sub.w	r9, r9, #2
 800278e:	fa5f f989 	uxtb.w	r9, r9
 8002792:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002796:	9907      	ldr	r1, [sp, #28]
 8002798:	d812      	bhi.n	80027c0 <_printf_float+0x13c>
 800279a:	3901      	subs	r1, #1
 800279c:	464a      	mov	r2, r9
 800279e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80027a2:	9107      	str	r1, [sp, #28]
 80027a4:	f7ff ff3d 	bl	8002622 <__exponent>
 80027a8:	9a08      	ldr	r2, [sp, #32]
 80027aa:	1883      	adds	r3, r0, r2
 80027ac:	2a01      	cmp	r2, #1
 80027ae:	4682      	mov	sl, r0
 80027b0:	6123      	str	r3, [r4, #16]
 80027b2:	dc02      	bgt.n	80027ba <_printf_float+0x136>
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	07d1      	lsls	r1, r2, #31
 80027b8:	d52f      	bpl.n	800281a <_printf_float+0x196>
 80027ba:	3301      	adds	r3, #1
 80027bc:	6123      	str	r3, [r4, #16]
 80027be:	e02c      	b.n	800281a <_printf_float+0x196>
 80027c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80027c4:	d114      	bne.n	80027f0 <_printf_float+0x16c>
 80027c6:	2900      	cmp	r1, #0
 80027c8:	6863      	ldr	r3, [r4, #4]
 80027ca:	dd07      	ble.n	80027dc <_printf_float+0x158>
 80027cc:	6121      	str	r1, [r4, #16]
 80027ce:	b913      	cbnz	r3, 80027d6 <_printf_float+0x152>
 80027d0:	6822      	ldr	r2, [r4, #0]
 80027d2:	07d2      	lsls	r2, r2, #31
 80027d4:	d51d      	bpl.n	8002812 <_printf_float+0x18e>
 80027d6:	3301      	adds	r3, #1
 80027d8:	440b      	add	r3, r1
 80027da:	e019      	b.n	8002810 <_printf_float+0x18c>
 80027dc:	b913      	cbnz	r3, 80027e4 <_printf_float+0x160>
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	07d0      	lsls	r0, r2, #31
 80027e2:	d501      	bpl.n	80027e8 <_printf_float+0x164>
 80027e4:	3302      	adds	r3, #2
 80027e6:	e013      	b.n	8002810 <_printf_float+0x18c>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e011      	b.n	8002810 <_printf_float+0x18c>
 80027ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80027f0:	9b07      	ldr	r3, [sp, #28]
 80027f2:	9a08      	ldr	r2, [sp, #32]
 80027f4:	4293      	cmp	r3, r2
 80027f6:	db05      	blt.n	8002804 <_printf_float+0x180>
 80027f8:	6822      	ldr	r2, [r4, #0]
 80027fa:	6123      	str	r3, [r4, #16]
 80027fc:	07d1      	lsls	r1, r2, #31
 80027fe:	d508      	bpl.n	8002812 <_printf_float+0x18e>
 8002800:	3301      	adds	r3, #1
 8002802:	e005      	b.n	8002810 <_printf_float+0x18c>
 8002804:	2b00      	cmp	r3, #0
 8002806:	bfd4      	ite	le
 8002808:	f1c3 0302 	rsble	r3, r3, #2
 800280c:	2301      	movgt	r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	9b07      	ldr	r3, [sp, #28]
 8002814:	65a3      	str	r3, [r4, #88]	; 0x58
 8002816:	f04f 0a00 	mov.w	sl, #0
 800281a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800281e:	b113      	cbz	r3, 8002826 <_printf_float+0x1a2>
 8002820:	232d      	movs	r3, #45	; 0x2d
 8002822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002826:	9700      	str	r7, [sp, #0]
 8002828:	4633      	mov	r3, r6
 800282a:	aa09      	add	r2, sp, #36	; 0x24
 800282c:	4621      	mov	r1, r4
 800282e:	4628      	mov	r0, r5
 8002830:	f000 f952 	bl	8002ad8 <_printf_common>
 8002834:	3001      	adds	r0, #1
 8002836:	d102      	bne.n	800283e <_printf_float+0x1ba>
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	e148      	b.n	8002ad0 <_printf_float+0x44c>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	055a      	lsls	r2, r3, #21
 8002842:	d401      	bmi.n	8002848 <_printf_float+0x1c4>
 8002844:	6923      	ldr	r3, [r4, #16]
 8002846:	e065      	b.n	8002914 <_printf_float+0x290>
 8002848:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800284c:	f240 80d4 	bls.w	80029f8 <_printf_float+0x374>
 8002850:	2200      	movs	r2, #0
 8002852:	2300      	movs	r3, #0
 8002854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002858:	f7fe f98a 	bl	8000b70 <__aeabi_dcmpeq>
 800285c:	b378      	cbz	r0, 80028be <_printf_float+0x23a>
 800285e:	2301      	movs	r3, #1
 8002860:	4a3d      	ldr	r2, [pc, #244]	; (8002958 <_printf_float+0x2d4>)
 8002862:	4631      	mov	r1, r6
 8002864:	4628      	mov	r0, r5
 8002866:	47b8      	blx	r7
 8002868:	3001      	adds	r0, #1
 800286a:	d0e5      	beq.n	8002838 <_printf_float+0x1b4>
 800286c:	9b08      	ldr	r3, [sp, #32]
 800286e:	9a07      	ldr	r2, [sp, #28]
 8002870:	429a      	cmp	r2, r3
 8002872:	db0b      	blt.n	800288c <_printf_float+0x208>
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	07d8      	lsls	r0, r3, #31
 8002878:	d408      	bmi.n	800288c <_printf_float+0x208>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	079b      	lsls	r3, r3, #30
 800287e:	f140 8110 	bpl.w	8002aa2 <_printf_float+0x41e>
 8002882:	f04f 0800 	mov.w	r8, #0
 8002886:	f104 0919 	add.w	r9, r4, #25
 800288a:	e105      	b.n	8002a98 <_printf_float+0x414>
 800288c:	9b04      	ldr	r3, [sp, #16]
 800288e:	465a      	mov	r2, fp
 8002890:	4631      	mov	r1, r6
 8002892:	4628      	mov	r0, r5
 8002894:	47b8      	blx	r7
 8002896:	3001      	adds	r0, #1
 8002898:	d0ce      	beq.n	8002838 <_printf_float+0x1b4>
 800289a:	f04f 0800 	mov.w	r8, #0
 800289e:	f104 091a 	add.w	r9, r4, #26
 80028a2:	9b08      	ldr	r3, [sp, #32]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	4598      	cmp	r8, r3
 80028a8:	dae7      	bge.n	800287a <_printf_float+0x1f6>
 80028aa:	2301      	movs	r3, #1
 80028ac:	464a      	mov	r2, r9
 80028ae:	4631      	mov	r1, r6
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b8      	blx	r7
 80028b4:	3001      	adds	r0, #1
 80028b6:	d0bf      	beq.n	8002838 <_printf_float+0x1b4>
 80028b8:	f108 0801 	add.w	r8, r8, #1
 80028bc:	e7f1      	b.n	80028a2 <_printf_float+0x21e>
 80028be:	9b07      	ldr	r3, [sp, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dc29      	bgt.n	8002918 <_printf_float+0x294>
 80028c4:	2301      	movs	r3, #1
 80028c6:	4a24      	ldr	r2, [pc, #144]	; (8002958 <_printf_float+0x2d4>)
 80028c8:	4631      	mov	r1, r6
 80028ca:	4628      	mov	r0, r5
 80028cc:	47b8      	blx	r7
 80028ce:	3001      	adds	r0, #1
 80028d0:	d0b2      	beq.n	8002838 <_printf_float+0x1b4>
 80028d2:	9b07      	ldr	r3, [sp, #28]
 80028d4:	b923      	cbnz	r3, 80028e0 <_printf_float+0x25c>
 80028d6:	9b08      	ldr	r3, [sp, #32]
 80028d8:	b913      	cbnz	r3, 80028e0 <_printf_float+0x25c>
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	07d9      	lsls	r1, r3, #31
 80028de:	d5cc      	bpl.n	800287a <_printf_float+0x1f6>
 80028e0:	9b04      	ldr	r3, [sp, #16]
 80028e2:	465a      	mov	r2, fp
 80028e4:	4631      	mov	r1, r6
 80028e6:	4628      	mov	r0, r5
 80028e8:	47b8      	blx	r7
 80028ea:	3001      	adds	r0, #1
 80028ec:	d0a4      	beq.n	8002838 <_printf_float+0x1b4>
 80028ee:	f04f 0900 	mov.w	r9, #0
 80028f2:	f104 0a1a 	add.w	sl, r4, #26
 80028f6:	9b07      	ldr	r3, [sp, #28]
 80028f8:	425b      	negs	r3, r3
 80028fa:	4599      	cmp	r9, r3
 80028fc:	da09      	bge.n	8002912 <_printf_float+0x28e>
 80028fe:	2301      	movs	r3, #1
 8002900:	4652      	mov	r2, sl
 8002902:	4631      	mov	r1, r6
 8002904:	4628      	mov	r0, r5
 8002906:	47b8      	blx	r7
 8002908:	3001      	adds	r0, #1
 800290a:	d095      	beq.n	8002838 <_printf_float+0x1b4>
 800290c:	f109 0901 	add.w	r9, r9, #1
 8002910:	e7f1      	b.n	80028f6 <_printf_float+0x272>
 8002912:	9b08      	ldr	r3, [sp, #32]
 8002914:	4642      	mov	r2, r8
 8002916:	e0a6      	b.n	8002a66 <_printf_float+0x3e2>
 8002918:	9a08      	ldr	r2, [sp, #32]
 800291a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800291c:	429a      	cmp	r2, r3
 800291e:	bfa8      	it	ge
 8002920:	461a      	movge	r2, r3
 8002922:	2a00      	cmp	r2, #0
 8002924:	4691      	mov	r9, r2
 8002926:	dc07      	bgt.n	8002938 <_printf_float+0x2b4>
 8002928:	f104 031a 	add.w	r3, r4, #26
 800292c:	f04f 0a00 	mov.w	sl, #0
 8002930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002934:	9305      	str	r3, [sp, #20]
 8002936:	e01b      	b.n	8002970 <_printf_float+0x2ec>
 8002938:	4613      	mov	r3, r2
 800293a:	4631      	mov	r1, r6
 800293c:	4642      	mov	r2, r8
 800293e:	4628      	mov	r0, r5
 8002940:	47b8      	blx	r7
 8002942:	3001      	adds	r0, #1
 8002944:	d1f0      	bne.n	8002928 <_printf_float+0x2a4>
 8002946:	e777      	b.n	8002838 <_printf_float+0x1b4>
 8002948:	08006c38 	.word	0x08006c38
 800294c:	08006c3c 	.word	0x08006c3c
 8002950:	08006c40 	.word	0x08006c40
 8002954:	08006c44 	.word	0x08006c44
 8002958:	08006c48 	.word	0x08006c48
 800295c:	2301      	movs	r3, #1
 800295e:	9a05      	ldr	r2, [sp, #20]
 8002960:	4631      	mov	r1, r6
 8002962:	4628      	mov	r0, r5
 8002964:	47b8      	blx	r7
 8002966:	3001      	adds	r0, #1
 8002968:	f43f af66 	beq.w	8002838 <_printf_float+0x1b4>
 800296c:	f10a 0a01 	add.w	sl, sl, #1
 8002970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002972:	ebc9 0203 	rsb	r2, r9, r3
 8002976:	4592      	cmp	sl, r2
 8002978:	dbf0      	blt.n	800295c <_printf_float+0x2d8>
 800297a:	eb08 0903 	add.w	r9, r8, r3
 800297e:	9a07      	ldr	r2, [sp, #28]
 8002980:	9b08      	ldr	r3, [sp, #32]
 8002982:	429a      	cmp	r2, r3
 8002984:	db0f      	blt.n	80029a6 <_printf_float+0x322>
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	07da      	lsls	r2, r3, #31
 800298a:	d40c      	bmi.n	80029a6 <_printf_float+0x322>
 800298c:	9b08      	ldr	r3, [sp, #32]
 800298e:	9a07      	ldr	r2, [sp, #28]
 8002990:	4498      	add	r8, r3
 8002992:	ebc9 0808 	rsb	r8, r9, r8
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	4598      	cmp	r8, r3
 800299a:	bfa8      	it	ge
 800299c:	4698      	movge	r8, r3
 800299e:	f1b8 0f00 	cmp.w	r8, #0
 80029a2:	dc08      	bgt.n	80029b6 <_printf_float+0x332>
 80029a4:	e00f      	b.n	80029c6 <_printf_float+0x342>
 80029a6:	9b04      	ldr	r3, [sp, #16]
 80029a8:	465a      	mov	r2, fp
 80029aa:	4631      	mov	r1, r6
 80029ac:	4628      	mov	r0, r5
 80029ae:	47b8      	blx	r7
 80029b0:	3001      	adds	r0, #1
 80029b2:	d1eb      	bne.n	800298c <_printf_float+0x308>
 80029b4:	e740      	b.n	8002838 <_printf_float+0x1b4>
 80029b6:	4643      	mov	r3, r8
 80029b8:	464a      	mov	r2, r9
 80029ba:	4631      	mov	r1, r6
 80029bc:	4628      	mov	r0, r5
 80029be:	47b8      	blx	r7
 80029c0:	3001      	adds	r0, #1
 80029c2:	f43f af39 	beq.w	8002838 <_printf_float+0x1b4>
 80029c6:	f04f 0900 	mov.w	r9, #0
 80029ca:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80029ce:	f104 0a1a 	add.w	sl, r4, #26
 80029d2:	e009      	b.n	80029e8 <_printf_float+0x364>
 80029d4:	2301      	movs	r3, #1
 80029d6:	4652      	mov	r2, sl
 80029d8:	4631      	mov	r1, r6
 80029da:	4628      	mov	r0, r5
 80029dc:	47b8      	blx	r7
 80029de:	3001      	adds	r0, #1
 80029e0:	f43f af2a 	beq.w	8002838 <_printf_float+0x1b4>
 80029e4:	f109 0901 	add.w	r9, r9, #1
 80029e8:	9a07      	ldr	r2, [sp, #28]
 80029ea:	9b08      	ldr	r3, [sp, #32]
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	ebc8 0303 	rsb	r3, r8, r3
 80029f2:	4599      	cmp	r9, r3
 80029f4:	dbee      	blt.n	80029d4 <_printf_float+0x350>
 80029f6:	e740      	b.n	800287a <_printf_float+0x1f6>
 80029f8:	9a08      	ldr	r2, [sp, #32]
 80029fa:	2a01      	cmp	r2, #1
 80029fc:	dc01      	bgt.n	8002a02 <_printf_float+0x37e>
 80029fe:	07db      	lsls	r3, r3, #31
 8002a00:	d538      	bpl.n	8002a74 <_printf_float+0x3f0>
 8002a02:	2301      	movs	r3, #1
 8002a04:	4642      	mov	r2, r8
 8002a06:	4631      	mov	r1, r6
 8002a08:	4628      	mov	r0, r5
 8002a0a:	47b8      	blx	r7
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	f43f af13 	beq.w	8002838 <_printf_float+0x1b4>
 8002a12:	9b04      	ldr	r3, [sp, #16]
 8002a14:	465a      	mov	r2, fp
 8002a16:	4631      	mov	r1, r6
 8002a18:	4628      	mov	r0, r5
 8002a1a:	47b8      	blx	r7
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	f43f af0b 	beq.w	8002838 <_printf_float+0x1b4>
 8002a22:	2200      	movs	r2, #0
 8002a24:	2300      	movs	r3, #0
 8002a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a2a:	f7fe f8a1 	bl	8000b70 <__aeabi_dcmpeq>
 8002a2e:	b120      	cbz	r0, 8002a3a <_printf_float+0x3b6>
 8002a30:	f04f 0800 	mov.w	r8, #0
 8002a34:	f104 091a 	add.w	r9, r4, #26
 8002a38:	e00e      	b.n	8002a58 <_printf_float+0x3d4>
 8002a3a:	9b08      	ldr	r3, [sp, #32]
 8002a3c:	f108 0201 	add.w	r2, r8, #1
 8002a40:	3b01      	subs	r3, #1
 8002a42:	e019      	b.n	8002a78 <_printf_float+0x3f4>
 8002a44:	2301      	movs	r3, #1
 8002a46:	464a      	mov	r2, r9
 8002a48:	4631      	mov	r1, r6
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	47b8      	blx	r7
 8002a4e:	3001      	adds	r0, #1
 8002a50:	f43f aef2 	beq.w	8002838 <_printf_float+0x1b4>
 8002a54:	f108 0801 	add.w	r8, r8, #1
 8002a58:	9b08      	ldr	r3, [sp, #32]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	4598      	cmp	r8, r3
 8002a5e:	dbf1      	blt.n	8002a44 <_printf_float+0x3c0>
 8002a60:	4653      	mov	r3, sl
 8002a62:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002a66:	4631      	mov	r1, r6
 8002a68:	4628      	mov	r0, r5
 8002a6a:	47b8      	blx	r7
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	f47f af04 	bne.w	800287a <_printf_float+0x1f6>
 8002a72:	e6e1      	b.n	8002838 <_printf_float+0x1b4>
 8002a74:	2301      	movs	r3, #1
 8002a76:	4642      	mov	r2, r8
 8002a78:	4631      	mov	r1, r6
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	47b8      	blx	r7
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d1ee      	bne.n	8002a60 <_printf_float+0x3dc>
 8002a82:	e6d9      	b.n	8002838 <_printf_float+0x1b4>
 8002a84:	2301      	movs	r3, #1
 8002a86:	464a      	mov	r2, r9
 8002a88:	4631      	mov	r1, r6
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	47b8      	blx	r7
 8002a8e:	3001      	adds	r0, #1
 8002a90:	f43f aed2 	beq.w	8002838 <_printf_float+0x1b4>
 8002a94:	f108 0801 	add.w	r8, r8, #1
 8002a98:	68e3      	ldr	r3, [r4, #12]
 8002a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	4598      	cmp	r8, r3
 8002aa0:	dbf0      	blt.n	8002a84 <_printf_float+0x400>
 8002aa2:	68e0      	ldr	r0, [r4, #12]
 8002aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa6:	4298      	cmp	r0, r3
 8002aa8:	bfb8      	it	lt
 8002aaa:	4618      	movlt	r0, r3
 8002aac:	e010      	b.n	8002ad0 <_printf_float+0x44c>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab4:	9303      	str	r3, [sp, #12]
 8002ab6:	ab07      	add	r3, sp, #28
 8002ab8:	9002      	str	r0, [sp, #8]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6022      	str	r2, [r4, #0]
 8002abe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ac2:	f10d 031b 	add.w	r3, sp, #27
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f7ff fd47 	bl	800255a <__cvt>
 8002acc:	4680      	mov	r8, r0
 8002ace:	e656      	b.n	800277e <_printf_float+0xfa>
 8002ad0:	b00b      	add	sp, #44	; 0x2c
 8002ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ad6:	bf00      	nop

08002ad8 <_printf_common>:
 8002ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002adc:	4691      	mov	r9, r2
 8002ade:	461f      	mov	r7, r3
 8002ae0:	690a      	ldr	r2, [r1, #16]
 8002ae2:	688b      	ldr	r3, [r1, #8]
 8002ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bfb8      	it	lt
 8002aec:	4613      	movlt	r3, r2
 8002aee:	f8c9 3000 	str.w	r3, [r9]
 8002af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002af6:	4606      	mov	r6, r0
 8002af8:	460c      	mov	r4, r1
 8002afa:	b112      	cbz	r2, 8002b02 <_printf_common+0x2a>
 8002afc:	3301      	adds	r3, #1
 8002afe:	f8c9 3000 	str.w	r3, [r9]
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	0699      	lsls	r1, r3, #26
 8002b06:	bf42      	ittt	mi
 8002b08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b0c:	3302      	addmi	r3, #2
 8002b0e:	f8c9 3000 	strmi.w	r3, [r9]
 8002b12:	6825      	ldr	r5, [r4, #0]
 8002b14:	f015 0506 	ands.w	r5, r5, #6
 8002b18:	d110      	bne.n	8002b3c <_printf_common+0x64>
 8002b1a:	f104 0a19 	add.w	sl, r4, #25
 8002b1e:	e007      	b.n	8002b30 <_printf_common+0x58>
 8002b20:	2301      	movs	r3, #1
 8002b22:	4652      	mov	r2, sl
 8002b24:	4639      	mov	r1, r7
 8002b26:	4630      	mov	r0, r6
 8002b28:	47c0      	blx	r8
 8002b2a:	3001      	adds	r0, #1
 8002b2c:	d01a      	beq.n	8002b64 <_printf_common+0x8c>
 8002b2e:	3501      	adds	r5, #1
 8002b30:	68e3      	ldr	r3, [r4, #12]
 8002b32:	f8d9 2000 	ldr.w	r2, [r9]
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	429d      	cmp	r5, r3
 8002b3a:	dbf1      	blt.n	8002b20 <_printf_common+0x48>
 8002b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b40:	6822      	ldr	r2, [r4, #0]
 8002b42:	3300      	adds	r3, #0
 8002b44:	bf18      	it	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	0692      	lsls	r2, r2, #26
 8002b4a:	d50f      	bpl.n	8002b6c <_printf_common+0x94>
 8002b4c:	18e1      	adds	r1, r4, r3
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	2030      	movs	r0, #48	; 0x30
 8002b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b56:	4422      	add	r2, r4
 8002b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b60:	3302      	adds	r3, #2
 8002b62:	e003      	b.n	8002b6c <_printf_common+0x94>
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b70:	4639      	mov	r1, r7
 8002b72:	4630      	mov	r0, r6
 8002b74:	47c0      	blx	r8
 8002b76:	3001      	adds	r0, #1
 8002b78:	d0f4      	beq.n	8002b64 <_printf_common+0x8c>
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	f8d9 5000 	ldr.w	r5, [r9]
 8002b80:	68e3      	ldr	r3, [r4, #12]
 8002b82:	f002 0206 	and.w	r2, r2, #6
 8002b86:	2a04      	cmp	r2, #4
 8002b88:	bf08      	it	eq
 8002b8a:	1b5d      	subeq	r5, r3, r5
 8002b8c:	6922      	ldr	r2, [r4, #16]
 8002b8e:	68a3      	ldr	r3, [r4, #8]
 8002b90:	bf0c      	ite	eq
 8002b92:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b96:	2500      	movne	r5, #0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bfc4      	itt	gt
 8002b9c:	1a9b      	subgt	r3, r3, r2
 8002b9e:	18ed      	addgt	r5, r5, r3
 8002ba0:	f04f 0900 	mov.w	r9, #0
 8002ba4:	341a      	adds	r4, #26
 8002ba6:	454d      	cmp	r5, r9
 8002ba8:	d009      	beq.n	8002bbe <_printf_common+0xe6>
 8002baa:	2301      	movs	r3, #1
 8002bac:	4622      	mov	r2, r4
 8002bae:	4639      	mov	r1, r7
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	47c0      	blx	r8
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	d0d5      	beq.n	8002b64 <_printf_common+0x8c>
 8002bb8:	f109 0901 	add.w	r9, r9, #1
 8002bbc:	e7f3      	b.n	8002ba6 <_printf_common+0xce>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002bc4 <_printf_i>:
 8002bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	4617      	mov	r7, r2
 8002bca:	7e0a      	ldrb	r2, [r1, #24]
 8002bcc:	b085      	sub	sp, #20
 8002bce:	2a6e      	cmp	r2, #110	; 0x6e
 8002bd0:	4698      	mov	r8, r3
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bd8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002bdc:	f000 80ae 	beq.w	8002d3c <_printf_i+0x178>
 8002be0:	d811      	bhi.n	8002c06 <_printf_i+0x42>
 8002be2:	2a63      	cmp	r2, #99	; 0x63
 8002be4:	d022      	beq.n	8002c2c <_printf_i+0x68>
 8002be6:	d809      	bhi.n	8002bfc <_printf_i+0x38>
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	f000 80bb 	beq.w	8002d64 <_printf_i+0x1a0>
 8002bee:	2a58      	cmp	r2, #88	; 0x58
 8002bf0:	f040 80ca 	bne.w	8002d88 <_printf_i+0x1c4>
 8002bf4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002bf8:	4983      	ldr	r1, [pc, #524]	; (8002e08 <_printf_i+0x244>)
 8002bfa:	e055      	b.n	8002ca8 <_printf_i+0xe4>
 8002bfc:	2a64      	cmp	r2, #100	; 0x64
 8002bfe:	d01e      	beq.n	8002c3e <_printf_i+0x7a>
 8002c00:	2a69      	cmp	r2, #105	; 0x69
 8002c02:	d01c      	beq.n	8002c3e <_printf_i+0x7a>
 8002c04:	e0c0      	b.n	8002d88 <_printf_i+0x1c4>
 8002c06:	2a73      	cmp	r2, #115	; 0x73
 8002c08:	f000 80b0 	beq.w	8002d6c <_printf_i+0x1a8>
 8002c0c:	d809      	bhi.n	8002c22 <_printf_i+0x5e>
 8002c0e:	2a6f      	cmp	r2, #111	; 0x6f
 8002c10:	d02e      	beq.n	8002c70 <_printf_i+0xac>
 8002c12:	2a70      	cmp	r2, #112	; 0x70
 8002c14:	f040 80b8 	bne.w	8002d88 <_printf_i+0x1c4>
 8002c18:	680a      	ldr	r2, [r1, #0]
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	600a      	str	r2, [r1, #0]
 8002c20:	e03e      	b.n	8002ca0 <_printf_i+0xdc>
 8002c22:	2a75      	cmp	r2, #117	; 0x75
 8002c24:	d024      	beq.n	8002c70 <_printf_i+0xac>
 8002c26:	2a78      	cmp	r2, #120	; 0x78
 8002c28:	d03a      	beq.n	8002ca0 <_printf_i+0xdc>
 8002c2a:	e0ad      	b.n	8002d88 <_printf_i+0x1c4>
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002c32:	1d11      	adds	r1, r2, #4
 8002c34:	6019      	str	r1, [r3, #0]
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c3c:	e0a8      	b.n	8002d90 <_printf_i+0x1cc>
 8002c3e:	6821      	ldr	r1, [r4, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c46:	d002      	beq.n	8002c4e <_printf_i+0x8a>
 8002c48:	1d11      	adds	r1, r2, #4
 8002c4a:	6019      	str	r1, [r3, #0]
 8002c4c:	e008      	b.n	8002c60 <_printf_i+0x9c>
 8002c4e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c52:	f102 0104 	add.w	r1, r2, #4
 8002c56:	6019      	str	r1, [r3, #0]
 8002c58:	d002      	beq.n	8002c60 <_printf_i+0x9c>
 8002c5a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002c5e:	e000      	b.n	8002c62 <_printf_i+0x9e>
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da3c      	bge.n	8002ce0 <_printf_i+0x11c>
 8002c66:	222d      	movs	r2, #45	; 0x2d
 8002c68:	425b      	negs	r3, r3
 8002c6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c6e:	e037      	b.n	8002ce0 <_printf_i+0x11c>
 8002c70:	6821      	ldr	r1, [r4, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c78:	d002      	beq.n	8002c80 <_printf_i+0xbc>
 8002c7a:	1d11      	adds	r1, r2, #4
 8002c7c:	6019      	str	r1, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <_printf_i+0xcc>
 8002c80:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002c84:	f102 0104 	add.w	r1, r2, #4
 8002c88:	6019      	str	r1, [r3, #0]
 8002c8a:	d001      	beq.n	8002c90 <_printf_i+0xcc>
 8002c8c:	8813      	ldrh	r3, [r2, #0]
 8002c8e:	e000      	b.n	8002c92 <_printf_i+0xce>
 8002c90:	6813      	ldr	r3, [r2, #0]
 8002c92:	7e22      	ldrb	r2, [r4, #24]
 8002c94:	495c      	ldr	r1, [pc, #368]	; (8002e08 <_printf_i+0x244>)
 8002c96:	2a6f      	cmp	r2, #111	; 0x6f
 8002c98:	bf14      	ite	ne
 8002c9a:	220a      	movne	r2, #10
 8002c9c:	2208      	moveq	r2, #8
 8002c9e:	e01b      	b.n	8002cd8 <_printf_i+0x114>
 8002ca0:	2278      	movs	r2, #120	; 0x78
 8002ca2:	495a      	ldr	r1, [pc, #360]	; (8002e0c <_printf_i+0x248>)
 8002ca4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002ca8:	6822      	ldr	r2, [r4, #0]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cb0:	f100 0504 	add.w	r5, r0, #4
 8002cb4:	601d      	str	r5, [r3, #0]
 8002cb6:	d103      	bne.n	8002cc0 <_printf_i+0xfc>
 8002cb8:	0655      	lsls	r5, r2, #25
 8002cba:	d501      	bpl.n	8002cc0 <_printf_i+0xfc>
 8002cbc:	8803      	ldrh	r3, [r0, #0]
 8002cbe:	e000      	b.n	8002cc2 <_printf_i+0xfe>
 8002cc0:	6803      	ldr	r3, [r0, #0]
 8002cc2:	07d0      	lsls	r0, r2, #31
 8002cc4:	bf44      	itt	mi
 8002cc6:	f042 0220 	orrmi.w	r2, r2, #32
 8002cca:	6022      	strmi	r2, [r4, #0]
 8002ccc:	b91b      	cbnz	r3, 8002cd6 <_printf_i+0x112>
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	f022 0220 	bic.w	r2, r2, #32
 8002cd4:	6022      	str	r2, [r4, #0]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002cde:	e001      	b.n	8002ce4 <_printf_i+0x120>
 8002ce0:	4949      	ldr	r1, [pc, #292]	; (8002e08 <_printf_i+0x244>)
 8002ce2:	220a      	movs	r2, #10
 8002ce4:	6865      	ldr	r5, [r4, #4]
 8002ce6:	60a5      	str	r5, [r4, #8]
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	db08      	blt.n	8002cfe <_printf_i+0x13a>
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	f020 0004 	bic.w	r0, r0, #4
 8002cf2:	6020      	str	r0, [r4, #0]
 8002cf4:	b92b      	cbnz	r3, 8002d02 <_printf_i+0x13e>
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	d17d      	bne.n	8002df6 <_printf_i+0x232>
 8002cfa:	4675      	mov	r5, lr
 8002cfc:	e00c      	b.n	8002d18 <_printf_i+0x154>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d079      	beq.n	8002df6 <_printf_i+0x232>
 8002d02:	4675      	mov	r5, lr
 8002d04:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d08:	fb02 3310 	mls	r3, r2, r0, r3
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d12:	4603      	mov	r3, r0
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d1f5      	bne.n	8002d04 <_printf_i+0x140>
 8002d18:	2a08      	cmp	r2, #8
 8002d1a:	d10b      	bne.n	8002d34 <_printf_i+0x170>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	07da      	lsls	r2, r3, #31
 8002d20:	d508      	bpl.n	8002d34 <_printf_i+0x170>
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	6862      	ldr	r2, [r4, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	bfde      	ittt	le
 8002d2a:	2330      	movle	r3, #48	; 0x30
 8002d2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d34:	ebc5 030e 	rsb	r3, r5, lr
 8002d38:	6123      	str	r3, [r4, #16]
 8002d3a:	e02e      	b.n	8002d9a <_printf_i+0x1d6>
 8002d3c:	6808      	ldr	r0, [r1, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	6949      	ldr	r1, [r1, #20]
 8002d42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d46:	d003      	beq.n	8002d50 <_printf_i+0x18c>
 8002d48:	1d10      	adds	r0, r2, #4
 8002d4a:	6018      	str	r0, [r3, #0]
 8002d4c:	6813      	ldr	r3, [r2, #0]
 8002d4e:	e008      	b.n	8002d62 <_printf_i+0x19e>
 8002d50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d54:	f102 0004 	add.w	r0, r2, #4
 8002d58:	6018      	str	r0, [r3, #0]
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	d001      	beq.n	8002d62 <_printf_i+0x19e>
 8002d5e:	8019      	strh	r1, [r3, #0]
 8002d60:	e000      	b.n	8002d64 <_printf_i+0x1a0>
 8002d62:	6019      	str	r1, [r3, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	6123      	str	r3, [r4, #16]
 8002d68:	4675      	mov	r5, lr
 8002d6a:	e016      	b.n	8002d9a <_printf_i+0x1d6>
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	1d11      	adds	r1, r2, #4
 8002d70:	6019      	str	r1, [r3, #0]
 8002d72:	6815      	ldr	r5, [r2, #0]
 8002d74:	6862      	ldr	r2, [r4, #4]
 8002d76:	2100      	movs	r1, #0
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f7fd fa89 	bl	8000290 <memchr>
 8002d7e:	b108      	cbz	r0, 8002d84 <_printf_i+0x1c0>
 8002d80:	1b40      	subs	r0, r0, r5
 8002d82:	6060      	str	r0, [r4, #4]
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	e004      	b.n	8002d92 <_printf_i+0x1ce>
 8002d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d90:	2301      	movs	r3, #1
 8002d92:	6123      	str	r3, [r4, #16]
 8002d94:	2300      	movs	r3, #0
 8002d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d9a:	f8cd 8000 	str.w	r8, [sp]
 8002d9e:	463b      	mov	r3, r7
 8002da0:	aa03      	add	r2, sp, #12
 8002da2:	4621      	mov	r1, r4
 8002da4:	4630      	mov	r0, r6
 8002da6:	f7ff fe97 	bl	8002ad8 <_printf_common>
 8002daa:	3001      	adds	r0, #1
 8002dac:	d102      	bne.n	8002db4 <_printf_i+0x1f0>
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295
 8002db2:	e026      	b.n	8002e02 <_printf_i+0x23e>
 8002db4:	6923      	ldr	r3, [r4, #16]
 8002db6:	462a      	mov	r2, r5
 8002db8:	4639      	mov	r1, r7
 8002dba:	4630      	mov	r0, r6
 8002dbc:	47c0      	blx	r8
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d0f5      	beq.n	8002dae <_printf_i+0x1ea>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	079b      	lsls	r3, r3, #30
 8002dc6:	d510      	bpl.n	8002dea <_printf_i+0x226>
 8002dc8:	2500      	movs	r5, #0
 8002dca:	f104 0919 	add.w	r9, r4, #25
 8002dce:	e007      	b.n	8002de0 <_printf_i+0x21c>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	464a      	mov	r2, r9
 8002dd4:	4639      	mov	r1, r7
 8002dd6:	4630      	mov	r0, r6
 8002dd8:	47c0      	blx	r8
 8002dda:	3001      	adds	r0, #1
 8002ddc:	d0e7      	beq.n	8002dae <_printf_i+0x1ea>
 8002dde:	3501      	adds	r5, #1
 8002de0:	68e3      	ldr	r3, [r4, #12]
 8002de2:	9a03      	ldr	r2, [sp, #12]
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	429d      	cmp	r5, r3
 8002de8:	dbf2      	blt.n	8002dd0 <_printf_i+0x20c>
 8002dea:	68e0      	ldr	r0, [r4, #12]
 8002dec:	9b03      	ldr	r3, [sp, #12]
 8002dee:	4298      	cmp	r0, r3
 8002df0:	bfb8      	it	lt
 8002df2:	4618      	movlt	r0, r3
 8002df4:	e005      	b.n	8002e02 <_printf_i+0x23e>
 8002df6:	780b      	ldrb	r3, [r1, #0]
 8002df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e00:	e78a      	b.n	8002d18 <_printf_i+0x154>
 8002e02:	b005      	add	sp, #20
 8002e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e08:	08006c4a 	.word	0x08006c4a
 8002e0c:	08006c5b 	.word	0x08006c5b

08002e10 <_scanf_float>:
 8002e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e14:	469a      	mov	sl, r3
 8002e16:	688b      	ldr	r3, [r1, #8]
 8002e18:	4616      	mov	r6, r2
 8002e1a:	1e5a      	subs	r2, r3, #1
 8002e1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002e20:	b087      	sub	sp, #28
 8002e22:	bf83      	ittte	hi
 8002e24:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8002e28:	189b      	addhi	r3, r3, r2
 8002e2a:	9301      	strhi	r3, [sp, #4]
 8002e2c:	2300      	movls	r3, #0
 8002e2e:	bf86      	itte	hi
 8002e30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002e34:	608b      	strhi	r3, [r1, #8]
 8002e36:	9301      	strls	r3, [sp, #4]
 8002e38:	680b      	ldr	r3, [r1, #0]
 8002e3a:	4688      	mov	r8, r1
 8002e3c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002e40:	f848 3b1c 	str.w	r3, [r8], #28
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	4607      	mov	r7, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4645      	mov	r5, r8
 8002e4e:	465a      	mov	r2, fp
 8002e50:	f8cd b010 	str.w	fp, [sp, #16]
 8002e54:	f8cd b00c 	str.w	fp, [sp, #12]
 8002e58:	46d9      	mov	r9, fp
 8002e5a:	f8cd b008 	str.w	fp, [sp, #8]
 8002e5e:	68a1      	ldr	r1, [r4, #8]
 8002e60:	2900      	cmp	r1, #0
 8002e62:	f000 80e5 	beq.w	8003030 <_scanf_float+0x220>
 8002e66:	6833      	ldr	r3, [r6, #0]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b49      	cmp	r3, #73	; 0x49
 8002e6c:	d070      	beq.n	8002f50 <_scanf_float+0x140>
 8002e6e:	d816      	bhi.n	8002e9e <_scanf_float+0x8e>
 8002e70:	2b39      	cmp	r3, #57	; 0x39
 8002e72:	d80d      	bhi.n	8002e90 <_scanf_float+0x80>
 8002e74:	2b31      	cmp	r3, #49	; 0x31
 8002e76:	d240      	bcs.n	8002efa <_scanf_float+0xea>
 8002e78:	2b2d      	cmp	r3, #45	; 0x2d
 8002e7a:	d046      	beq.n	8002f0a <_scanf_float+0xfa>
 8002e7c:	d802      	bhi.n	8002e84 <_scanf_float+0x74>
 8002e7e:	2b2b      	cmp	r3, #43	; 0x2b
 8002e80:	d043      	beq.n	8002f0a <_scanf_float+0xfa>
 8002e82:	e0d5      	b.n	8003030 <_scanf_float+0x220>
 8002e84:	2b2e      	cmp	r3, #46	; 0x2e
 8002e86:	f000 8092 	beq.w	8002fae <_scanf_float+0x19e>
 8002e8a:	2b30      	cmp	r3, #48	; 0x30
 8002e8c:	d023      	beq.n	8002ed6 <_scanf_float+0xc6>
 8002e8e:	e0cf      	b.n	8003030 <_scanf_float+0x220>
 8002e90:	2b45      	cmp	r3, #69	; 0x45
 8002e92:	f000 8095 	beq.w	8002fc0 <_scanf_float+0x1b0>
 8002e96:	2b46      	cmp	r3, #70	; 0x46
 8002e98:	d077      	beq.n	8002f8a <_scanf_float+0x17a>
 8002e9a:	2b41      	cmp	r3, #65	; 0x41
 8002e9c:	e00c      	b.n	8002eb8 <_scanf_float+0xa8>
 8002e9e:	2b65      	cmp	r3, #101	; 0x65
 8002ea0:	f000 808e 	beq.w	8002fc0 <_scanf_float+0x1b0>
 8002ea4:	d80a      	bhi.n	8002ebc <_scanf_float+0xac>
 8002ea6:	2b54      	cmp	r3, #84	; 0x54
 8002ea8:	d075      	beq.n	8002f96 <_scanf_float+0x186>
 8002eaa:	d802      	bhi.n	8002eb2 <_scanf_float+0xa2>
 8002eac:	2b4e      	cmp	r3, #78	; 0x4e
 8002eae:	d034      	beq.n	8002f1a <_scanf_float+0x10a>
 8002eb0:	e0be      	b.n	8003030 <_scanf_float+0x220>
 8002eb2:	2b59      	cmp	r3, #89	; 0x59
 8002eb4:	d075      	beq.n	8002fa2 <_scanf_float+0x192>
 8002eb6:	2b61      	cmp	r3, #97	; 0x61
 8002eb8:	d046      	beq.n	8002f48 <_scanf_float+0x138>
 8002eba:	e0b9      	b.n	8003030 <_scanf_float+0x220>
 8002ebc:	2b6e      	cmp	r3, #110	; 0x6e
 8002ebe:	d02c      	beq.n	8002f1a <_scanf_float+0x10a>
 8002ec0:	d804      	bhi.n	8002ecc <_scanf_float+0xbc>
 8002ec2:	2b66      	cmp	r3, #102	; 0x66
 8002ec4:	d061      	beq.n	8002f8a <_scanf_float+0x17a>
 8002ec6:	2b69      	cmp	r3, #105	; 0x69
 8002ec8:	d042      	beq.n	8002f50 <_scanf_float+0x140>
 8002eca:	e0b1      	b.n	8003030 <_scanf_float+0x220>
 8002ecc:	2b74      	cmp	r3, #116	; 0x74
 8002ece:	d062      	beq.n	8002f96 <_scanf_float+0x186>
 8002ed0:	2b79      	cmp	r3, #121	; 0x79
 8002ed2:	d066      	beq.n	8002fa2 <_scanf_float+0x192>
 8002ed4:	e0ac      	b.n	8003030 <_scanf_float+0x220>
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002edc:	d00d      	beq.n	8002efa <_scanf_float+0xea>
 8002ede:	9b01      	ldr	r3, [sp, #4]
 8002ee0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002ee4:	6020      	str	r0, [r4, #0]
 8002ee6:	f109 0901 	add.w	r9, r9, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8087 	beq.w	8002ffe <_scanf_float+0x1ee>
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	3101      	adds	r1, #1
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	60a1      	str	r1, [r4, #8]
 8002ef8:	e081      	b.n	8002ffe <_scanf_float+0x1ee>
 8002efa:	eb12 0f0b 	cmn.w	r2, fp
 8002efe:	f040 8097 	bne.w	8003030 <_scanf_float+0x220>
 8002f02:	6821      	ldr	r1, [r4, #0]
 8002f04:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8002f08:	e005      	b.n	8002f16 <_scanf_float+0x106>
 8002f0a:	6821      	ldr	r1, [r4, #0]
 8002f0c:	0608      	lsls	r0, r1, #24
 8002f0e:	f140 808f 	bpl.w	8003030 <_scanf_float+0x220>
 8002f12:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002f16:	6021      	str	r1, [r4, #0]
 8002f18:	e06f      	b.n	8002ffa <_scanf_float+0x1ea>
 8002f1a:	b96a      	cbnz	r2, 8002f38 <_scanf_float+0x128>
 8002f1c:	f1b9 0f00 	cmp.w	r9, #0
 8002f20:	d10c      	bne.n	8002f3c <_scanf_float+0x12c>
 8002f22:	6821      	ldr	r1, [r4, #0]
 8002f24:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002f28:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002f2c:	d106      	bne.n	8002f3c <_scanf_float+0x12c>
 8002f2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002f32:	6021      	str	r1, [r4, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	e060      	b.n	8002ffa <_scanf_float+0x1ea>
 8002f38:	2a02      	cmp	r2, #2
 8002f3a:	d05d      	beq.n	8002ff8 <_scanf_float+0x1e8>
 8002f3c:	f1bb 0f01 	cmp.w	fp, #1
 8002f40:	d01e      	beq.n	8002f80 <_scanf_float+0x170>
 8002f42:	f1bb 0f04 	cmp.w	fp, #4
 8002f46:	e01a      	b.n	8002f7e <_scanf_float+0x16e>
 8002f48:	2a01      	cmp	r2, #1
 8002f4a:	d171      	bne.n	8003030 <_scanf_float+0x220>
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	e054      	b.n	8002ffa <_scanf_float+0x1ea>
 8002f50:	f1bb 0f00 	cmp.w	fp, #0
 8002f54:	d10e      	bne.n	8002f74 <_scanf_float+0x164>
 8002f56:	f1b9 0f00 	cmp.w	r9, #0
 8002f5a:	d16c      	bne.n	8003036 <_scanf_float+0x226>
 8002f5c:	6821      	ldr	r1, [r4, #0]
 8002f5e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8002f62:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002f66:	d16a      	bne.n	800303e <_scanf_float+0x22e>
 8002f68:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002f6c:	6021      	str	r1, [r4, #0]
 8002f6e:	f04f 0b01 	mov.w	fp, #1
 8002f72:	e042      	b.n	8002ffa <_scanf_float+0x1ea>
 8002f74:	f1bb 0f03 	cmp.w	fp, #3
 8002f78:	d002      	beq.n	8002f80 <_scanf_float+0x170>
 8002f7a:	f1bb 0f05 	cmp.w	fp, #5
 8002f7e:	d157      	bne.n	8003030 <_scanf_float+0x220>
 8002f80:	f10b 0b01 	add.w	fp, fp, #1
 8002f84:	fa5f fb8b 	uxtb.w	fp, fp
 8002f88:	e037      	b.n	8002ffa <_scanf_float+0x1ea>
 8002f8a:	f1bb 0f02 	cmp.w	fp, #2
 8002f8e:	d14f      	bne.n	8003030 <_scanf_float+0x220>
 8002f90:	f04f 0b03 	mov.w	fp, #3
 8002f94:	e031      	b.n	8002ffa <_scanf_float+0x1ea>
 8002f96:	f1bb 0f06 	cmp.w	fp, #6
 8002f9a:	d149      	bne.n	8003030 <_scanf_float+0x220>
 8002f9c:	f04f 0b07 	mov.w	fp, #7
 8002fa0:	e02b      	b.n	8002ffa <_scanf_float+0x1ea>
 8002fa2:	f1bb 0f07 	cmp.w	fp, #7
 8002fa6:	d143      	bne.n	8003030 <_scanf_float+0x220>
 8002fa8:	f04f 0b08 	mov.w	fp, #8
 8002fac:	e025      	b.n	8002ffa <_scanf_float+0x1ea>
 8002fae:	6821      	ldr	r1, [r4, #0]
 8002fb0:	0588      	lsls	r0, r1, #22
 8002fb2:	d53d      	bpl.n	8003030 <_scanf_float+0x220>
 8002fb4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8002fb8:	6021      	str	r1, [r4, #0]
 8002fba:	f8cd 9008 	str.w	r9, [sp, #8]
 8002fbe:	e01c      	b.n	8002ffa <_scanf_float+0x1ea>
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8002fc6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002fca:	d004      	beq.n	8002fd6 <_scanf_float+0x1c6>
 8002fcc:	0548      	lsls	r0, r1, #21
 8002fce:	d52f      	bpl.n	8003030 <_scanf_float+0x220>
 8002fd0:	f1b9 0f00 	cmp.w	r9, #0
 8002fd4:	d033      	beq.n	800303e <_scanf_float+0x22e>
 8002fd6:	0588      	lsls	r0, r1, #22
 8002fd8:	bf5c      	itt	pl
 8002fda:	9802      	ldrpl	r0, [sp, #8]
 8002fdc:	9504      	strpl	r5, [sp, #16]
 8002fde:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8002fe2:	bf58      	it	pl
 8002fe4:	ebc0 0009 	rsbpl	r0, r0, r9
 8002fe8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002fec:	bf58      	it	pl
 8002fee:	9003      	strpl	r0, [sp, #12]
 8002ff0:	6021      	str	r1, [r4, #0]
 8002ff2:	f04f 0900 	mov.w	r9, #0
 8002ff6:	e000      	b.n	8002ffa <_scanf_float+0x1ea>
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	702b      	strb	r3, [r5, #0]
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	3b01      	subs	r3, #1
 8003002:	60a3      	str	r3, [r4, #8]
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	3301      	adds	r3, #1
 8003008:	6123      	str	r3, [r4, #16]
 800300a:	6873      	ldr	r3, [r6, #4]
 800300c:	3b01      	subs	r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	6073      	str	r3, [r6, #4]
 8003012:	dd03      	ble.n	800301c <_scanf_float+0x20c>
 8003014:	6833      	ldr	r3, [r6, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	6033      	str	r3, [r6, #0]
 800301a:	e720      	b.n	8002e5e <_scanf_float+0x4e>
 800301c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003020:	9205      	str	r2, [sp, #20]
 8003022:	4631      	mov	r1, r6
 8003024:	4638      	mov	r0, r7
 8003026:	4798      	blx	r3
 8003028:	9a05      	ldr	r2, [sp, #20]
 800302a:	2800      	cmp	r0, #0
 800302c:	f43f af17 	beq.w	8002e5e <_scanf_float+0x4e>
 8003030:	f1b9 0f00 	cmp.w	r9, #0
 8003034:	d003      	beq.n	800303e <_scanf_float+0x22e>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	3a01      	subs	r2, #1
 8003040:	2a01      	cmp	r2, #1
 8003042:	d80e      	bhi.n	8003062 <_scanf_float+0x252>
 8003044:	4545      	cmp	r5, r8
 8003046:	d90a      	bls.n	800305e <_scanf_float+0x24e>
 8003048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800304c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003050:	4632      	mov	r2, r6
 8003052:	4638      	mov	r0, r7
 8003054:	4798      	blx	r3
 8003056:	6923      	ldr	r3, [r4, #16]
 8003058:	3b01      	subs	r3, #1
 800305a:	6123      	str	r3, [r4, #16]
 800305c:	e7f2      	b.n	8003044 <_scanf_float+0x234>
 800305e:	2601      	movs	r6, #1
 8003060:	e0ac      	b.n	80031bc <_scanf_float+0x3ac>
 8003062:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003066:	2b06      	cmp	r3, #6
 8003068:	d822      	bhi.n	80030b0 <_scanf_float+0x2a0>
 800306a:	f1bb 0f02 	cmp.w	fp, #2
 800306e:	d912      	bls.n	8003096 <_scanf_float+0x286>
 8003070:	f1ab 0b03 	sub.w	fp, fp, #3
 8003074:	fa5f fb8b 	uxtb.w	fp, fp
 8003078:	ebcb 0b05 	rsb	fp, fp, r5
 800307c:	455d      	cmp	r5, fp
 800307e:	d017      	beq.n	80030b0 <_scanf_float+0x2a0>
 8003080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003084:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003088:	4632      	mov	r2, r6
 800308a:	4638      	mov	r0, r7
 800308c:	4798      	blx	r3
 800308e:	6923      	ldr	r3, [r4, #16]
 8003090:	3b01      	subs	r3, #1
 8003092:	6123      	str	r3, [r4, #16]
 8003094:	e7f2      	b.n	800307c <_scanf_float+0x26c>
 8003096:	4545      	cmp	r5, r8
 8003098:	d9e1      	bls.n	800305e <_scanf_float+0x24e>
 800309a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800309e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80030a2:	4632      	mov	r2, r6
 80030a4:	4638      	mov	r0, r7
 80030a6:	4798      	blx	r3
 80030a8:	6923      	ldr	r3, [r4, #16]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	6123      	str	r3, [r4, #16]
 80030ae:	e7f2      	b.n	8003096 <_scanf_float+0x286>
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	05da      	lsls	r2, r3, #23
 80030b4:	d52c      	bpl.n	8003110 <_scanf_float+0x300>
 80030b6:	055b      	lsls	r3, r3, #21
 80030b8:	d50c      	bpl.n	80030d4 <_scanf_float+0x2c4>
 80030ba:	4545      	cmp	r5, r8
 80030bc:	d9cf      	bls.n	800305e <_scanf_float+0x24e>
 80030be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80030c2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80030c6:	4632      	mov	r2, r6
 80030c8:	4638      	mov	r0, r7
 80030ca:	4798      	blx	r3
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	6123      	str	r3, [r4, #16]
 80030d2:	e7f2      	b.n	80030ba <_scanf_float+0x2aa>
 80030d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	2965      	cmp	r1, #101	; 0x65
 80030dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80030e0:	f105 3bff 	add.w	fp, r5, #4294967295
 80030e4:	6123      	str	r3, [r4, #16]
 80030e6:	d00d      	beq.n	8003104 <_scanf_float+0x2f4>
 80030e8:	2945      	cmp	r1, #69	; 0x45
 80030ea:	d00b      	beq.n	8003104 <_scanf_float+0x2f4>
 80030ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80030f0:	4632      	mov	r2, r6
 80030f2:	4638      	mov	r0, r7
 80030f4:	4798      	blx	r3
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	f1a5 0b02 	sub.w	fp, r5, #2
 8003102:	6123      	str	r3, [r4, #16]
 8003104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003108:	4632      	mov	r2, r6
 800310a:	4638      	mov	r0, r7
 800310c:	4798      	blx	r3
 800310e:	465d      	mov	r5, fp
 8003110:	6826      	ldr	r6, [r4, #0]
 8003112:	f016 0610 	ands.w	r6, r6, #16
 8003116:	d150      	bne.n	80031ba <_scanf_float+0x3aa>
 8003118:	702e      	strb	r6, [r5, #0]
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d105      	bne.n	8003132 <_scanf_float+0x322>
 8003126:	9b02      	ldr	r3, [sp, #8]
 8003128:	ebc3 0309 	rsb	r3, r3, r9
 800312c:	425a      	negs	r2, r3
 800312e:	b963      	cbnz	r3, 800314a <_scanf_float+0x33a>
 8003130:	e015      	b.n	800315e <_scanf_float+0x34e>
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	b19b      	cbz	r3, 800315e <_scanf_float+0x34e>
 8003136:	9904      	ldr	r1, [sp, #16]
 8003138:	230a      	movs	r3, #10
 800313a:	4632      	mov	r2, r6
 800313c:	3101      	adds	r1, #1
 800313e:	4638      	mov	r0, r7
 8003140:	f001 f836 	bl	80041b0 <_strtol_r>
 8003144:	9b03      	ldr	r3, [sp, #12]
 8003146:	9d04      	ldr	r5, [sp, #16]
 8003148:	1ac2      	subs	r2, r0, r3
 800314a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800314e:	429d      	cmp	r5, r3
 8003150:	bf28      	it	cs
 8003152:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003156:	491b      	ldr	r1, [pc, #108]	; (80031c4 <_scanf_float+0x3b4>)
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f9e9 	bl	8003530 <siprintf>
 800315e:	2200      	movs	r2, #0
 8003160:	4641      	mov	r1, r8
 8003162:	4638      	mov	r0, r7
 8003164:	f000 fa24 	bl	80035b0 <_strtod_r>
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	f8da 3000 	ldr.w	r3, [sl]
 800316e:	f012 0f02 	tst.w	r2, #2
 8003172:	ec59 8b10 	vmov	r8, r9, d0
 8003176:	d003      	beq.n	8003180 <_scanf_float+0x370>
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	f8ca 2000 	str.w	r2, [sl]
 800317e:	e006      	b.n	800318e <_scanf_float+0x37e>
 8003180:	f012 0f04 	tst.w	r2, #4
 8003184:	f103 0204 	add.w	r2, r3, #4
 8003188:	f8ca 2000 	str.w	r2, [sl]
 800318c:	d003      	beq.n	8003196 <_scanf_float+0x386>
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	e9c3 8900 	strd	r8, r9, [r3]
 8003194:	e00d      	b.n	80031b2 <_scanf_float+0x3a2>
 8003196:	681d      	ldr	r5, [r3, #0]
 8003198:	f000 f910 	bl	80033bc <__fpclassifyd>
 800319c:	b920      	cbnz	r0, 80031a8 <_scanf_float+0x398>
 800319e:	f000 f9c1 	bl	8003524 <nanf>
 80031a2:	ed85 0a00 	vstr	s0, [r5]
 80031a6:	e004      	b.n	80031b2 <_scanf_float+0x3a2>
 80031a8:	4640      	mov	r0, r8
 80031aa:	4649      	mov	r1, r9
 80031ac:	f7fd fd5a 	bl	8000c64 <__aeabi_d2f>
 80031b0:	6028      	str	r0, [r5, #0]
 80031b2:	68e3      	ldr	r3, [r4, #12]
 80031b4:	3301      	adds	r3, #1
 80031b6:	60e3      	str	r3, [r4, #12]
 80031b8:	e000      	b.n	80031bc <_scanf_float+0x3ac>
 80031ba:	2600      	movs	r6, #0
 80031bc:	4630      	mov	r0, r6
 80031be:	b007      	add	sp, #28
 80031c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c4:	08006c6c 	.word	0x08006c6c

080031c8 <iprintf>:
 80031c8:	b40f      	push	{r0, r1, r2, r3}
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <iprintf+0x2c>)
 80031cc:	b513      	push	{r0, r1, r4, lr}
 80031ce:	681c      	ldr	r4, [r3, #0]
 80031d0:	b124      	cbz	r4, 80031dc <iprintf+0x14>
 80031d2:	69a3      	ldr	r3, [r4, #24]
 80031d4:	b913      	cbnz	r3, 80031dc <iprintf+0x14>
 80031d6:	4620      	mov	r0, r4
 80031d8:	f002 f858 	bl	800528c <__sinit>
 80031dc:	ab05      	add	r3, sp, #20
 80031de:	9a04      	ldr	r2, [sp, #16]
 80031e0:	68a1      	ldr	r1, [r4, #8]
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	4620      	mov	r0, r4
 80031e6:	f003 fa63 	bl	80066b0 <_vfiprintf_r>
 80031ea:	b002      	add	sp, #8
 80031ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f0:	b004      	add	sp, #16
 80031f2:	4770      	bx	lr
 80031f4:	20000064 	.word	0x20000064

080031f8 <_puts_r>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	460e      	mov	r6, r1
 80031fc:	4605      	mov	r5, r0
 80031fe:	b118      	cbz	r0, 8003208 <_puts_r+0x10>
 8003200:	6983      	ldr	r3, [r0, #24]
 8003202:	b90b      	cbnz	r3, 8003208 <_puts_r+0x10>
 8003204:	f002 f842 	bl	800528c <__sinit>
 8003208:	69ab      	ldr	r3, [r5, #24]
 800320a:	68ac      	ldr	r4, [r5, #8]
 800320c:	b913      	cbnz	r3, 8003214 <_puts_r+0x1c>
 800320e:	4628      	mov	r0, r5
 8003210:	f002 f83c 	bl	800528c <__sinit>
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <_puts_r+0xe4>)
 8003216:	429c      	cmp	r4, r3
 8003218:	d101      	bne.n	800321e <_puts_r+0x26>
 800321a:	686c      	ldr	r4, [r5, #4]
 800321c:	e008      	b.n	8003230 <_puts_r+0x38>
 800321e:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <_puts_r+0xe8>)
 8003220:	429c      	cmp	r4, r3
 8003222:	d101      	bne.n	8003228 <_puts_r+0x30>
 8003224:	68ac      	ldr	r4, [r5, #8]
 8003226:	e003      	b.n	8003230 <_puts_r+0x38>
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <_puts_r+0xec>)
 800322a:	429c      	cmp	r4, r3
 800322c:	bf08      	it	eq
 800322e:	68ec      	ldreq	r4, [r5, #12]
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	0719      	lsls	r1, r3, #28
 8003234:	d501      	bpl.n	800323a <_puts_r+0x42>
 8003236:	6923      	ldr	r3, [r4, #16]
 8003238:	b983      	cbnz	r3, 800325c <_puts_r+0x64>
 800323a:	4621      	mov	r1, r4
 800323c:	4628      	mov	r0, r5
 800323e:	f001 f895 	bl	800436c <__swsetup_r>
 8003242:	b158      	cbz	r0, 800325c <_puts_r+0x64>
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	bd70      	pop	{r4, r5, r6, pc}
 800324a:	2b00      	cmp	r3, #0
 800324c:	db0e      	blt.n	800326c <_puts_r+0x74>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	68a3      	ldr	r3, [r4, #8]
 800325e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003262:	3b01      	subs	r3, #1
 8003264:	60a3      	str	r3, [r4, #8]
 8003266:	2a00      	cmp	r2, #0
 8003268:	d1ef      	bne.n	800324a <_puts_r+0x52>
 800326a:	e016      	b.n	800329a <_puts_r+0xa2>
 800326c:	69a2      	ldr	r2, [r4, #24]
 800326e:	4293      	cmp	r3, r2
 8003270:	db09      	blt.n	8003286 <_puts_r+0x8e>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	7819      	ldrb	r1, [r3, #0]
 800327e:	290a      	cmp	r1, #10
 8003280:	d1ea      	bne.n	8003258 <_puts_r+0x60>
 8003282:	4622      	mov	r2, r4
 8003284:	e002      	b.n	800328c <_puts_r+0x94>
 8003286:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800328a:	4622      	mov	r2, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f001 f819 	bl	80042c4 <__swbuf_r>
 8003292:	1c42      	adds	r2, r0, #1
 8003294:	4250      	negs	r0, r2
 8003296:	4150      	adcs	r0, r2
 8003298:	e7d3      	b.n	8003242 <_puts_r+0x4a>
 800329a:	2b00      	cmp	r3, #0
 800329c:	da15      	bge.n	80032ca <_puts_r+0xd2>
 800329e:	69a2      	ldr	r2, [r4, #24]
 80032a0:	4293      	cmp	r3, r2
 80032a2:	db08      	blt.n	80032b6 <_puts_r+0xbe>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	220a      	movs	r2, #10
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	7819      	ldrb	r1, [r3, #0]
 80032ae:	4291      	cmp	r1, r2
 80032b0:	d10f      	bne.n	80032d2 <_puts_r+0xda>
 80032b2:	4622      	mov	r2, r4
 80032b4:	e001      	b.n	80032ba <_puts_r+0xc2>
 80032b6:	4622      	mov	r2, r4
 80032b8:	210a      	movs	r1, #10
 80032ba:	4628      	mov	r0, r5
 80032bc:	f001 f802 	bl	80042c4 <__swbuf_r>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	4258      	negs	r0, r3
 80032c4:	4158      	adcs	r0, r3
 80032c6:	b130      	cbz	r0, 80032d6 <_puts_r+0xde>
 80032c8:	e7bc      	b.n	8003244 <_puts_r+0x4c>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	220a      	movs	r2, #10
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	200a      	movs	r0, #10
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	bf00      	nop
 80032dc:	08006dd8 	.word	0x08006dd8
 80032e0:	08006df8 	.word	0x08006df8
 80032e4:	08006e18 	.word	0x08006e18

080032e8 <puts>:
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <puts+0xc>)
 80032ea:	4601      	mov	r1, r0
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f7ff bf83 	b.w	80031f8 <_puts_r>
 80032f2:	bf00      	nop
 80032f4:	20000064 	.word	0x20000064

080032f8 <srand>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <srand+0x4c>)
 80032fc:	681c      	ldr	r4, [r3, #0]
 80032fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003300:	4605      	mov	r5, r0
 8003302:	b9d3      	cbnz	r3, 800333a <srand+0x42>
 8003304:	2018      	movs	r0, #24
 8003306:	f002 fbbb 	bl	8005a80 <malloc>
 800330a:	f243 330e 	movw	r3, #13070	; 0x330e
 800330e:	63a0      	str	r0, [r4, #56]	; 0x38
 8003310:	8003      	strh	r3, [r0, #0]
 8003312:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8003316:	8043      	strh	r3, [r0, #2]
 8003318:	f241 2334 	movw	r3, #4660	; 0x1234
 800331c:	8083      	strh	r3, [r0, #4]
 800331e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8003322:	80c3      	strh	r3, [r0, #6]
 8003324:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8003328:	8103      	strh	r3, [r0, #8]
 800332a:	2305      	movs	r3, #5
 800332c:	8143      	strh	r3, [r0, #10]
 800332e:	230b      	movs	r3, #11
 8003330:	8183      	strh	r3, [r0, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	2300      	movs	r3, #0
 8003336:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800333a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800333c:	2200      	movs	r2, #0
 800333e:	611d      	str	r5, [r3, #16]
 8003340:	615a      	str	r2, [r3, #20]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	20000064 	.word	0x20000064

08003348 <rand>:
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <rand+0x68>)
 800334a:	b510      	push	{r4, lr}
 800334c:	681c      	ldr	r4, [r3, #0]
 800334e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003350:	b9d3      	cbnz	r3, 8003388 <rand+0x40>
 8003352:	2018      	movs	r0, #24
 8003354:	f002 fb94 	bl	8005a80 <malloc>
 8003358:	f243 330e 	movw	r3, #13070	; 0x330e
 800335c:	63a0      	str	r0, [r4, #56]	; 0x38
 800335e:	8003      	strh	r3, [r0, #0]
 8003360:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8003364:	8043      	strh	r3, [r0, #2]
 8003366:	f241 2334 	movw	r3, #4660	; 0x1234
 800336a:	8083      	strh	r3, [r0, #4]
 800336c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8003370:	80c3      	strh	r3, [r0, #6]
 8003372:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8003376:	8103      	strh	r3, [r0, #8]
 8003378:	2305      	movs	r3, #5
 800337a:	8143      	strh	r3, [r0, #10]
 800337c:	230b      	movs	r3, #11
 800337e:	8183      	strh	r3, [r0, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	2300      	movs	r3, #0
 8003384:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003388:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800338a:	4c0a      	ldr	r4, [pc, #40]	; (80033b4 <rand+0x6c>)
 800338c:	690b      	ldr	r3, [r1, #16]
 800338e:	6948      	ldr	r0, [r1, #20]
 8003390:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <rand+0x70>)
 8003392:	435c      	muls	r4, r3
 8003394:	fb02 4000 	mla	r0, r2, r0, r4
 8003398:	fba3 2302 	umull	r2, r3, r3, r2
 800339c:	3201      	adds	r2, #1
 800339e:	4403      	add	r3, r0
 80033a0:	f143 0300 	adc.w	r3, r3, #0
 80033a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80033a8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	bf00      	nop
 80033b0:	20000064 	.word	0x20000064
 80033b4:	5851f42d 	.word	0x5851f42d
 80033b8:	4c957f2d 	.word	0x4c957f2d

080033bc <__fpclassifyd>:
 80033bc:	ec53 2b10 	vmov	r2, r3, d0
 80033c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80033c4:	b510      	push	{r4, lr}
 80033c6:	ee10 0a10 	vmov	r0, s0
 80033ca:	d01b      	beq.n	8003404 <__fpclassifyd+0x48>
 80033cc:	490f      	ldr	r1, [pc, #60]	; (800340c <__fpclassifyd+0x50>)
 80033ce:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 80033d2:	428c      	cmp	r4, r1
 80033d4:	d910      	bls.n	80033f8 <__fpclassifyd+0x3c>
 80033d6:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80033da:	490c      	ldr	r1, [pc, #48]	; (800340c <__fpclassifyd+0x50>)
 80033dc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80033e0:	428b      	cmp	r3, r1
 80033e2:	d909      	bls.n	80033f8 <__fpclassifyd+0x3c>
 80033e4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80033e8:	d308      	bcc.n	80033fc <__fpclassifyd+0x40>
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <__fpclassifyd+0x54>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <__fpclassifyd+0x44>
 80033f0:	fab0 f080 	clz	r0, r0
 80033f4:	0940      	lsrs	r0, r0, #5
 80033f6:	bd10      	pop	{r4, pc}
 80033f8:	2004      	movs	r0, #4
 80033fa:	bd10      	pop	{r4, pc}
 80033fc:	2003      	movs	r0, #3
 80033fe:	bd10      	pop	{r4, pc}
 8003400:	2000      	movs	r0, #0
 8003402:	bd10      	pop	{r4, pc}
 8003404:	2800      	cmp	r0, #0
 8003406:	d1e6      	bne.n	80033d6 <__fpclassifyd+0x1a>
 8003408:	2002      	movs	r0, #2
 800340a:	bd10      	pop	{r4, pc}
 800340c:	7fdfffff 	.word	0x7fdfffff
 8003410:	7ff00000 	.word	0x7ff00000

08003414 <setvbuf>:
 8003414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003418:	461d      	mov	r5, r3
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <setvbuf+0xfc>)
 800341c:	681e      	ldr	r6, [r3, #0]
 800341e:	4604      	mov	r4, r0
 8003420:	460f      	mov	r7, r1
 8003422:	4690      	mov	r8, r2
 8003424:	b126      	cbz	r6, 8003430 <setvbuf+0x1c>
 8003426:	69b3      	ldr	r3, [r6, #24]
 8003428:	b913      	cbnz	r3, 8003430 <setvbuf+0x1c>
 800342a:	4630      	mov	r0, r6
 800342c:	f001 ff2e 	bl	800528c <__sinit>
 8003430:	4b38      	ldr	r3, [pc, #224]	; (8003514 <setvbuf+0x100>)
 8003432:	429c      	cmp	r4, r3
 8003434:	d101      	bne.n	800343a <setvbuf+0x26>
 8003436:	6874      	ldr	r4, [r6, #4]
 8003438:	e008      	b.n	800344c <setvbuf+0x38>
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <setvbuf+0x104>)
 800343c:	429c      	cmp	r4, r3
 800343e:	d101      	bne.n	8003444 <setvbuf+0x30>
 8003440:	68b4      	ldr	r4, [r6, #8]
 8003442:	e003      	b.n	800344c <setvbuf+0x38>
 8003444:	4b35      	ldr	r3, [pc, #212]	; (800351c <setvbuf+0x108>)
 8003446:	429c      	cmp	r4, r3
 8003448:	bf08      	it	eq
 800344a:	68f4      	ldreq	r4, [r6, #12]
 800344c:	f1b8 0f02 	cmp.w	r8, #2
 8003450:	d859      	bhi.n	8003506 <setvbuf+0xf2>
 8003452:	2d00      	cmp	r5, #0
 8003454:	db57      	blt.n	8003506 <setvbuf+0xf2>
 8003456:	4621      	mov	r1, r4
 8003458:	4630      	mov	r0, r6
 800345a:	f001 fead 	bl	80051b8 <_fflush_r>
 800345e:	2300      	movs	r3, #0
 8003460:	6063      	str	r3, [r4, #4]
 8003462:	61a3      	str	r3, [r4, #24]
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	d503      	bpl.n	8003472 <setvbuf+0x5e>
 800346a:	6921      	ldr	r1, [r4, #16]
 800346c:	4630      	mov	r0, r6
 800346e:	f002 ff0d 	bl	800628c <_free_r>
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	f1b8 0f02 	cmp.w	r8, #2
 8003478:	f023 0383 	bic.w	r3, r3, #131	; 0x83
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	d012      	beq.n	80034a6 <setvbuf+0x92>
 8003480:	bb37      	cbnz	r7, 80034d0 <setvbuf+0xbc>
 8003482:	2d00      	cmp	r5, #0
 8003484:	bf08      	it	eq
 8003486:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 800348a:	4628      	mov	r0, r5
 800348c:	f002 faf8 	bl	8005a80 <malloc>
 8003490:	4607      	mov	r7, r0
 8003492:	b9c8      	cbnz	r0, 80034c8 <setvbuf+0xb4>
 8003494:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003498:	f002 faf2 	bl	8005a80 <malloc>
 800349c:	4607      	mov	r7, r0
 800349e:	b988      	cbnz	r0, 80034c4 <setvbuf+0xb0>
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	e000      	b.n	80034a8 <setvbuf+0x94>
 80034a6:	2000      	movs	r0, #0
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	81a3      	strh	r3, [r4, #12]
 80034b0:	2300      	movs	r3, #0
 80034b2:	60a3      	str	r3, [r4, #8]
 80034b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	6123      	str	r3, [r4, #16]
 80034bc:	2301      	movs	r3, #1
 80034be:	6163      	str	r3, [r4, #20]
 80034c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ce:	81a3      	strh	r3, [r4, #12]
 80034d0:	f1b8 0f01 	cmp.w	r8, #1
 80034d4:	d105      	bne.n	80034e2 <setvbuf+0xce>
 80034d6:	89a3      	ldrh	r3, [r4, #12]
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	81a3      	strh	r3, [r4, #12]
 80034de:	426b      	negs	r3, r5
 80034e0:	61a3      	str	r3, [r4, #24]
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <setvbuf+0x10c>)
 80034e4:	62b3      	str	r3, [r6, #40]	; 0x28
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	6027      	str	r7, [r4, #0]
 80034ea:	f003 0008 	and.w	r0, r3, #8
 80034ee:	b280      	uxth	r0, r0
 80034f0:	6127      	str	r7, [r4, #16]
 80034f2:	6165      	str	r5, [r4, #20]
 80034f4:	b148      	cbz	r0, 800350a <setvbuf+0xf6>
 80034f6:	f013 0f03 	tst.w	r3, #3
 80034fa:	bf18      	it	ne
 80034fc:	2500      	movne	r5, #0
 80034fe:	60a5      	str	r5, [r4, #8]
 8003500:	2000      	movs	r0, #0
 8003502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800350e:	bf00      	nop
 8003510:	20000064 	.word	0x20000064
 8003514:	08006dd8 	.word	0x08006dd8
 8003518:	08006df8 	.word	0x08006df8
 800351c:	08006e18 	.word	0x08006e18
 8003520:	0800520d 	.word	0x0800520d

08003524 <nanf>:
 8003524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800352c <nanf+0x8>
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	7fc00000 	.word	0x7fc00000

08003530 <siprintf>:
 8003530:	b40e      	push	{r1, r2, r3}
 8003532:	b500      	push	{lr}
 8003534:	b09c      	sub	sp, #112	; 0x70
 8003536:	f44f 7102 	mov.w	r1, #520	; 0x208
 800353a:	ab1d      	add	r3, sp, #116	; 0x74
 800353c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003540:	9002      	str	r0, [sp, #8]
 8003542:	9006      	str	r0, [sp, #24]
 8003544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003548:	480a      	ldr	r0, [pc, #40]	; (8003574 <siprintf+0x44>)
 800354a:	9104      	str	r1, [sp, #16]
 800354c:	9107      	str	r1, [sp, #28]
 800354e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003552:	f853 2b04 	ldr.w	r2, [r3], #4
 8003556:	f8ad 1016 	strh.w	r1, [sp, #22]
 800355a:	6800      	ldr	r0, [r0, #0]
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	a902      	add	r1, sp, #8
 8003560:	f002 ff88 	bl	8006474 <_svfiprintf_r>
 8003564:	9b02      	ldr	r3, [sp, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	b01c      	add	sp, #112	; 0x70
 800356c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003570:	b003      	add	sp, #12
 8003572:	4770      	bx	lr
 8003574:	20000064 	.word	0x20000064

08003578 <sulp>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	460d      	mov	r5, r1
 800357e:	ec45 4b10 	vmov	d0, r4, r5
 8003582:	4616      	mov	r6, r2
 8003584:	f002 fd4a 	bl	800601c <__ulp>
 8003588:	ec51 0b10 	vmov	r0, r1, d0
 800358c:	b17e      	cbz	r6, 80035ae <sulp+0x36>
 800358e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003596:	2b00      	cmp	r3, #0
 8003598:	dd09      	ble.n	80035ae <sulp+0x36>
 800359a:	051b      	lsls	r3, r3, #20
 800359c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80035a0:	2400      	movs	r4, #0
 80035a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80035a6:	4622      	mov	r2, r4
 80035a8:	462b      	mov	r3, r5
 80035aa:	f7fd f879 	bl	80006a0 <__aeabi_dmul>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}

080035b0 <_strtod_r>:
 80035b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b4:	b09d      	sub	sp, #116	; 0x74
 80035b6:	2300      	movs	r3, #0
 80035b8:	9002      	str	r0, [sp, #8]
 80035ba:	460c      	mov	r4, r1
 80035bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80035be:	9318      	str	r3, [sp, #96]	; 0x60
 80035c0:	f04f 0a00 	mov.w	sl, #0
 80035c4:	f04f 0b00 	mov.w	fp, #0
 80035c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80035ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	2a0d      	cmp	r2, #13
 80035d0:	d805      	bhi.n	80035de <_strtod_r+0x2e>
 80035d2:	2a09      	cmp	r2, #9
 80035d4:	d213      	bcs.n	80035fe <_strtod_r+0x4e>
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	f000 81ac 	beq.w	8003934 <_strtod_r+0x384>
 80035dc:	e012      	b.n	8003604 <_strtod_r+0x54>
 80035de:	2a2b      	cmp	r2, #43	; 0x2b
 80035e0:	d004      	beq.n	80035ec <_strtod_r+0x3c>
 80035e2:	2a2d      	cmp	r2, #45	; 0x2d
 80035e4:	d004      	beq.n	80035f0 <_strtod_r+0x40>
 80035e6:	2a20      	cmp	r2, #32
 80035e8:	d10c      	bne.n	8003604 <_strtod_r+0x54>
 80035ea:	e008      	b.n	80035fe <_strtod_r+0x4e>
 80035ec:	2200      	movs	r2, #0
 80035ee:	e000      	b.n	80035f2 <_strtod_r+0x42>
 80035f0:	2201      	movs	r2, #1
 80035f2:	920c      	str	r2, [sp, #48]	; 0x30
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	b92b      	cbnz	r3, 8003608 <_strtod_r+0x58>
 80035fc:	e19a      	b.n	8003934 <_strtod_r+0x384>
 80035fe:	3301      	adds	r3, #1
 8003600:	9317      	str	r3, [sp, #92]	; 0x5c
 8003602:	e7e2      	b.n	80035ca <_strtod_r+0x1a>
 8003604:	2300      	movs	r3, #0
 8003606:	930c      	str	r3, [sp, #48]	; 0x30
 8003608:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800360a:	782b      	ldrb	r3, [r5, #0]
 800360c:	2b30      	cmp	r3, #48	; 0x30
 800360e:	d15c      	bne.n	80036ca <_strtod_r+0x11a>
 8003610:	786b      	ldrb	r3, [r5, #1]
 8003612:	2b58      	cmp	r3, #88	; 0x58
 8003614:	d001      	beq.n	800361a <_strtod_r+0x6a>
 8003616:	2b78      	cmp	r3, #120	; 0x78
 8003618:	d14c      	bne.n	80036b4 <_strtod_r+0x104>
 800361a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	ab18      	add	r3, sp, #96	; 0x60
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	4aa9      	ldr	r2, [pc, #676]	; (80038c8 <_strtod_r+0x318>)
 8003624:	9802      	ldr	r0, [sp, #8]
 8003626:	ab19      	add	r3, sp, #100	; 0x64
 8003628:	a917      	add	r1, sp, #92	; 0x5c
 800362a:	f001 ff04 	bl	8005436 <__gethex>
 800362e:	f010 0607 	ands.w	r6, r0, #7
 8003632:	4604      	mov	r4, r0
 8003634:	f000 8587 	beq.w	8004146 <_strtod_r+0xb96>
 8003638:	2e06      	cmp	r6, #6
 800363a:	d105      	bne.n	8003648 <_strtod_r+0x98>
 800363c:	3501      	adds	r5, #1
 800363e:	2300      	movs	r3, #0
 8003640:	9517      	str	r5, [sp, #92]	; 0x5c
 8003642:	930c      	str	r3, [sp, #48]	; 0x30
 8003644:	f000 bd7f 	b.w	8004146 <_strtod_r+0xb96>
 8003648:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800364a:	b13a      	cbz	r2, 800365c <_strtod_r+0xac>
 800364c:	2135      	movs	r1, #53	; 0x35
 800364e:	a81a      	add	r0, sp, #104	; 0x68
 8003650:	f002 fdd1 	bl	80061f6 <__copybits>
 8003654:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003656:	9802      	ldr	r0, [sp, #8]
 8003658:	f002 fa4f 	bl	8005afa <_Bfree>
 800365c:	2e06      	cmp	r6, #6
 800365e:	d822      	bhi.n	80036a6 <_strtod_r+0xf6>
 8003660:	e8df f006 	tbb	[pc, r6]
 8003664:	18080d04 	.word	0x18080d04
 8003668:	0d1d      	.short	0x0d1d
 800366a:	04          	.byte	0x04
 800366b:	00          	.byte	0x00
 800366c:	f04f 0b00 	mov.w	fp, #0
 8003670:	46da      	mov	sl, fp
 8003672:	e018      	b.n	80036a6 <_strtod_r+0xf6>
 8003674:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003678:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800367c:	e013      	b.n	80036a6 <_strtod_r+0xf6>
 800367e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003680:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003682:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003686:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800368a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800368e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003692:	e008      	b.n	80036a6 <_strtod_r+0xf6>
 8003694:	f8df b234 	ldr.w	fp, [pc, #564]	; 80038cc <_strtod_r+0x31c>
 8003698:	f04f 0a00 	mov.w	sl, #0
 800369c:	e003      	b.n	80036a6 <_strtod_r+0xf6>
 800369e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80036a2:	f04f 3aff 	mov.w	sl, #4294967295
 80036a6:	0721      	lsls	r1, r4, #28
 80036a8:	f140 854d 	bpl.w	8004146 <_strtod_r+0xb96>
 80036ac:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80036b0:	f000 bd49 	b.w	8004146 <_strtod_r+0xb96>
 80036b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b30      	cmp	r3, #48	; 0x30
 80036be:	d0f9      	beq.n	80036b4 <_strtod_r+0x104>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8540 	beq.w	8004146 <_strtod_r+0xb96>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <_strtod_r+0x11c>
 80036ca:	2300      	movs	r3, #0
 80036cc:	f04f 0800 	mov.w	r8, #0
 80036d0:	9306      	str	r3, [sp, #24]
 80036d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036d4:	9307      	str	r3, [sp, #28]
 80036d6:	f8cd 8014 	str.w	r8, [sp, #20]
 80036da:	f8cd 8010 	str.w	r8, [sp, #16]
 80036de:	220a      	movs	r2, #10
 80036e0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80036e2:	782e      	ldrb	r6, [r5, #0]
 80036e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80036e8:	b2d9      	uxtb	r1, r3
 80036ea:	2909      	cmp	r1, #9
 80036ec:	d80e      	bhi.n	800370c <_strtod_r+0x15c>
 80036ee:	9904      	ldr	r1, [sp, #16]
 80036f0:	2908      	cmp	r1, #8
 80036f2:	bfdd      	ittte	le
 80036f4:	9905      	ldrle	r1, [sp, #20]
 80036f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80036fa:	9305      	strle	r3, [sp, #20]
 80036fc:	fb02 3808 	mlagt	r8, r2, r8, r3
 8003700:	9b04      	ldr	r3, [sp, #16]
 8003702:	3501      	adds	r5, #1
 8003704:	3301      	adds	r3, #1
 8003706:	9304      	str	r3, [sp, #16]
 8003708:	9517      	str	r5, [sp, #92]	; 0x5c
 800370a:	e7e9      	b.n	80036e0 <_strtod_r+0x130>
 800370c:	9802      	ldr	r0, [sp, #8]
 800370e:	f002 f965 	bl	80059dc <_localeconv_r>
 8003712:	6807      	ldr	r7, [r0, #0]
 8003714:	9802      	ldr	r0, [sp, #8]
 8003716:	f002 f961 	bl	80059dc <_localeconv_r>
 800371a:	6800      	ldr	r0, [r0, #0]
 800371c:	f7fc fdaa 	bl	8000274 <strlen>
 8003720:	4639      	mov	r1, r7
 8003722:	4602      	mov	r2, r0
 8003724:	4628      	mov	r0, r5
 8003726:	f003 f932 	bl	800698e <strncmp>
 800372a:	4607      	mov	r7, r0
 800372c:	b128      	cbz	r0, 800373a <_strtod_r+0x18a>
 800372e:	2000      	movs	r0, #0
 8003730:	4633      	mov	r3, r6
 8003732:	9d04      	ldr	r5, [sp, #16]
 8003734:	4602      	mov	r2, r0
 8003736:	4601      	mov	r1, r0
 8003738:	e057      	b.n	80037ea <_strtod_r+0x23a>
 800373a:	9802      	ldr	r0, [sp, #8]
 800373c:	f002 f94e 	bl	80059dc <_localeconv_r>
 8003740:	6800      	ldr	r0, [r0, #0]
 8003742:	f7fc fd97 	bl	8000274 <strlen>
 8003746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003748:	181a      	adds	r2, r3, r0
 800374a:	9217      	str	r2, [sp, #92]	; 0x5c
 800374c:	9a04      	ldr	r2, [sp, #16]
 800374e:	5c1b      	ldrb	r3, [r3, r0]
 8003750:	2a00      	cmp	r2, #0
 8003752:	d142      	bne.n	80037da <_strtod_r+0x22a>
 8003754:	4610      	mov	r0, r2
 8003756:	2b30      	cmp	r3, #48	; 0x30
 8003758:	d105      	bne.n	8003766 <_strtod_r+0x1b6>
 800375a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003760:	3001      	adds	r0, #1
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	e7f7      	b.n	8003756 <_strtod_r+0x1a6>
 8003766:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800376a:	2a08      	cmp	r2, #8
 800376c:	d843      	bhi.n	80037f6 <_strtod_r+0x246>
 800376e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003770:	9207      	str	r2, [sp, #28]
 8003772:	4602      	mov	r2, r0
 8003774:	2000      	movs	r0, #0
 8003776:	4605      	mov	r5, r0
 8003778:	3b30      	subs	r3, #48	; 0x30
 800377a:	f100 0101 	add.w	r1, r0, #1
 800377e:	d026      	beq.n	80037ce <_strtod_r+0x21e>
 8003780:	440a      	add	r2, r1
 8003782:	eb05 0c00 	add.w	ip, r5, r0
 8003786:	4629      	mov	r1, r5
 8003788:	260a      	movs	r6, #10
 800378a:	4561      	cmp	r1, ip
 800378c:	d00e      	beq.n	80037ac <_strtod_r+0x1fc>
 800378e:	3101      	adds	r1, #1
 8003790:	f101 3eff 	add.w	lr, r1, #4294967295
 8003794:	f1be 0f08 	cmp.w	lr, #8
 8003798:	dc03      	bgt.n	80037a2 <_strtod_r+0x1f2>
 800379a:	9f05      	ldr	r7, [sp, #20]
 800379c:	4377      	muls	r7, r6
 800379e:	9705      	str	r7, [sp, #20]
 80037a0:	e7f3      	b.n	800378a <_strtod_r+0x1da>
 80037a2:	2910      	cmp	r1, #16
 80037a4:	bfd8      	it	le
 80037a6:	fb06 f808 	mulle.w	r8, r6, r8
 80037aa:	e7ee      	b.n	800378a <_strtod_r+0x1da>
 80037ac:	4428      	add	r0, r5
 80037ae:	2808      	cmp	r0, #8
 80037b0:	f100 0501 	add.w	r5, r0, #1
 80037b4:	dc05      	bgt.n	80037c2 <_strtod_r+0x212>
 80037b6:	9805      	ldr	r0, [sp, #20]
 80037b8:	210a      	movs	r1, #10
 80037ba:	fb01 3300 	mla	r3, r1, r0, r3
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	e004      	b.n	80037cc <_strtod_r+0x21c>
 80037c2:	2d10      	cmp	r5, #16
 80037c4:	bfdc      	itt	le
 80037c6:	210a      	movle	r1, #10
 80037c8:	fb01 3808 	mlale	r8, r1, r8, r3
 80037cc:	2100      	movs	r1, #0
 80037ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80037d0:	1c58      	adds	r0, r3, #1
 80037d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	4608      	mov	r0, r1
 80037d8:	e002      	b.n	80037e0 <_strtod_r+0x230>
 80037da:	9d04      	ldr	r5, [sp, #16]
 80037dc:	4638      	mov	r0, r7
 80037de:	463a      	mov	r2, r7
 80037e0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80037e4:	2909      	cmp	r1, #9
 80037e6:	d9c7      	bls.n	8003778 <_strtod_r+0x1c8>
 80037e8:	2101      	movs	r1, #1
 80037ea:	2b65      	cmp	r3, #101	; 0x65
 80037ec:	d001      	beq.n	80037f2 <_strtod_r+0x242>
 80037ee:	2b45      	cmp	r3, #69	; 0x45
 80037f0:	d151      	bne.n	8003896 <_strtod_r+0x2e6>
 80037f2:	b96d      	cbnz	r5, 8003810 <_strtod_r+0x260>
 80037f4:	e004      	b.n	8003800 <_strtod_r+0x250>
 80037f6:	2b65      	cmp	r3, #101	; 0x65
 80037f8:	f040 84b3 	bne.w	8004162 <_strtod_r+0xbb2>
 80037fc:	2200      	movs	r2, #0
 80037fe:	2101      	movs	r1, #1
 8003800:	b928      	cbnz	r0, 800380e <_strtod_r+0x25e>
 8003802:	9b06      	ldr	r3, [sp, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8095 	beq.w	8003934 <_strtod_r+0x384>
 800380a:	4605      	mov	r5, r0
 800380c:	e000      	b.n	8003810 <_strtod_r+0x260>
 800380e:	2500      	movs	r5, #0
 8003810:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003812:	1c63      	adds	r3, r4, #1
 8003814:	9317      	str	r3, [sp, #92]	; 0x5c
 8003816:	7863      	ldrb	r3, [r4, #1]
 8003818:	2b2b      	cmp	r3, #43	; 0x2b
 800381a:	d006      	beq.n	800382a <_strtod_r+0x27a>
 800381c:	2b2d      	cmp	r3, #45	; 0x2d
 800381e:	d002      	beq.n	8003826 <_strtod_r+0x276>
 8003820:	2600      	movs	r6, #0
 8003822:	9603      	str	r6, [sp, #12]
 8003824:	e006      	b.n	8003834 <_strtod_r+0x284>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <_strtod_r+0x27c>
 800382a:	2300      	movs	r3, #0
 800382c:	9303      	str	r3, [sp, #12]
 800382e:	1ca3      	adds	r3, r4, #2
 8003830:	9317      	str	r3, [sp, #92]	; 0x5c
 8003832:	78a3      	ldrb	r3, [r4, #2]
 8003834:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003838:	2e09      	cmp	r6, #9
 800383a:	d82b      	bhi.n	8003894 <_strtod_r+0x2e4>
 800383c:	2b30      	cmp	r3, #48	; 0x30
 800383e:	d104      	bne.n	800384a <_strtod_r+0x29a>
 8003840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003842:	1c5e      	adds	r6, r3, #1
 8003844:	9617      	str	r6, [sp, #92]	; 0x5c
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	e7f8      	b.n	800383c <_strtod_r+0x28c>
 800384a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 800384e:	2e08      	cmp	r6, #8
 8003850:	d821      	bhi.n	8003896 <_strtod_r+0x2e6>
 8003852:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003856:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003858:	f04f 0c0a 	mov.w	ip, #10
 800385c:	461f      	mov	r7, r3
 800385e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003860:	1c5e      	adds	r6, r3, #1
 8003862:	9617      	str	r6, [sp, #92]	; 0x5c
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 800386a:	f1b9 0f09 	cmp.w	r9, #9
 800386e:	d804      	bhi.n	800387a <_strtod_r+0x2ca>
 8003870:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8003874:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003878:	e7f1      	b.n	800385e <_strtod_r+0x2ae>
 800387a:	1bf6      	subs	r6, r6, r7
 800387c:	2e08      	cmp	r6, #8
 800387e:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8003882:	dc02      	bgt.n	800388a <_strtod_r+0x2da>
 8003884:	45f1      	cmp	r9, lr
 8003886:	bfa8      	it	ge
 8003888:	46f1      	movge	r9, lr
 800388a:	9e03      	ldr	r6, [sp, #12]
 800388c:	b12e      	cbz	r6, 800389a <_strtod_r+0x2ea>
 800388e:	f1c9 0900 	rsb	r9, r9, #0
 8003892:	e002      	b.n	800389a <_strtod_r+0x2ea>
 8003894:	9417      	str	r4, [sp, #92]	; 0x5c
 8003896:	f04f 0900 	mov.w	r9, #0
 800389a:	2d00      	cmp	r5, #0
 800389c:	d153      	bne.n	8003946 <_strtod_r+0x396>
 800389e:	2800      	cmp	r0, #0
 80038a0:	f040 8451 	bne.w	8004146 <_strtod_r+0xb96>
 80038a4:	9a06      	ldr	r2, [sp, #24]
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	f040 844d 	bne.w	8004146 <_strtod_r+0xb96>
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d141      	bne.n	8003934 <_strtod_r+0x384>
 80038b0:	2b4e      	cmp	r3, #78	; 0x4e
 80038b2:	d020      	beq.n	80038f6 <_strtod_r+0x346>
 80038b4:	dc02      	bgt.n	80038bc <_strtod_r+0x30c>
 80038b6:	2b49      	cmp	r3, #73	; 0x49
 80038b8:	d00a      	beq.n	80038d0 <_strtod_r+0x320>
 80038ba:	e03b      	b.n	8003934 <_strtod_r+0x384>
 80038bc:	2b69      	cmp	r3, #105	; 0x69
 80038be:	d007      	beq.n	80038d0 <_strtod_r+0x320>
 80038c0:	2b6e      	cmp	r3, #110	; 0x6e
 80038c2:	d018      	beq.n	80038f6 <_strtod_r+0x346>
 80038c4:	e036      	b.n	8003934 <_strtod_r+0x384>
 80038c6:	bf00      	nop
 80038c8:	08006c88 	.word	0x08006c88
 80038cc:	7ff00000 	.word	0x7ff00000
 80038d0:	49a8      	ldr	r1, [pc, #672]	; (8003b74 <_strtod_r+0x5c4>)
 80038d2:	a817      	add	r0, sp, #92	; 0x5c
 80038d4:	f001 ffe0 	bl	8005898 <__match>
 80038d8:	b360      	cbz	r0, 8003934 <_strtod_r+0x384>
 80038da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80038dc:	49a6      	ldr	r1, [pc, #664]	; (8003b78 <_strtod_r+0x5c8>)
 80038de:	3b01      	subs	r3, #1
 80038e0:	a817      	add	r0, sp, #92	; 0x5c
 80038e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80038e4:	f001 ffd8 	bl	8005898 <__match>
 80038e8:	b910      	cbnz	r0, 80038f0 <_strtod_r+0x340>
 80038ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80038ec:	3301      	adds	r3, #1
 80038ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80038f0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8003b94 <_strtod_r+0x5e4>
 80038f4:	e01a      	b.n	800392c <_strtod_r+0x37c>
 80038f6:	49a1      	ldr	r1, [pc, #644]	; (8003b7c <_strtod_r+0x5cc>)
 80038f8:	a817      	add	r0, sp, #92	; 0x5c
 80038fa:	f001 ffcd 	bl	8005898 <__match>
 80038fe:	b1c8      	cbz	r0, 8003934 <_strtod_r+0x384>
 8003900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b28      	cmp	r3, #40	; 0x28
 8003906:	d10f      	bne.n	8003928 <_strtod_r+0x378>
 8003908:	aa1a      	add	r2, sp, #104	; 0x68
 800390a:	499d      	ldr	r1, [pc, #628]	; (8003b80 <_strtod_r+0x5d0>)
 800390c:	a817      	add	r0, sp, #92	; 0x5c
 800390e:	f001 ffd6 	bl	80058be <__hexnan>
 8003912:	2805      	cmp	r0, #5
 8003914:	d108      	bne.n	8003928 <_strtod_r+0x378>
 8003916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003918:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800391c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003920:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003924:	f000 bc0f 	b.w	8004146 <_strtod_r+0xb96>
 8003928:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8003b98 <_strtod_r+0x5e8>
 800392c:	f04f 0a00 	mov.w	sl, #0
 8003930:	f000 bc09 	b.w	8004146 <_strtod_r+0xb96>
 8003934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003936:	9417      	str	r4, [sp, #92]	; 0x5c
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 840f 	beq.w	800415c <_strtod_r+0xbac>
 800393e:	2300      	movs	r3, #0
 8003940:	930c      	str	r3, [sp, #48]	; 0x30
 8003942:	f000 bc02 	b.w	800414a <_strtod_r+0xb9a>
 8003946:	9b04      	ldr	r3, [sp, #16]
 8003948:	9805      	ldr	r0, [sp, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf08      	it	eq
 800394e:	462b      	moveq	r3, r5
 8003950:	2d10      	cmp	r5, #16
 8003952:	462c      	mov	r4, r5
 8003954:	ebc2 0909 	rsb	r9, r2, r9
 8003958:	bfa8      	it	ge
 800395a:	2410      	movge	r4, #16
 800395c:	9304      	str	r3, [sp, #16]
 800395e:	f7fc fe29 	bl	80005b4 <__aeabi_ui2d>
 8003962:	2c09      	cmp	r4, #9
 8003964:	4682      	mov	sl, r0
 8003966:	468b      	mov	fp, r1
 8003968:	dd13      	ble.n	8003992 <_strtod_r+0x3e2>
 800396a:	4b86      	ldr	r3, [pc, #536]	; (8003b84 <_strtod_r+0x5d4>)
 800396c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003970:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003974:	f7fc fe94 	bl	80006a0 <__aeabi_dmul>
 8003978:	4606      	mov	r6, r0
 800397a:	4640      	mov	r0, r8
 800397c:	460f      	mov	r7, r1
 800397e:	f7fc fe19 	bl	80005b4 <__aeabi_ui2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fc fcd7 	bl	800033c <__adddf3>
 800398e:	4682      	mov	sl, r0
 8003990:	468b      	mov	fp, r1
 8003992:	2d0f      	cmp	r5, #15
 8003994:	dc36      	bgt.n	8003a04 <_strtod_r+0x454>
 8003996:	f1b9 0f00 	cmp.w	r9, #0
 800399a:	f000 83d4 	beq.w	8004146 <_strtod_r+0xb96>
 800399e:	dd24      	ble.n	80039ea <_strtod_r+0x43a>
 80039a0:	f1b9 0f16 	cmp.w	r9, #22
 80039a4:	dc07      	bgt.n	80039b6 <_strtod_r+0x406>
 80039a6:	4d77      	ldr	r5, [pc, #476]	; (8003b84 <_strtod_r+0x5d4>)
 80039a8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80039ac:	4652      	mov	r2, sl
 80039ae:	465b      	mov	r3, fp
 80039b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80039b4:	e014      	b.n	80039e0 <_strtod_r+0x430>
 80039b6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80039ba:	4599      	cmp	r9, r3
 80039bc:	dc22      	bgt.n	8003a04 <_strtod_r+0x454>
 80039be:	4c71      	ldr	r4, [pc, #452]	; (8003b84 <_strtod_r+0x5d4>)
 80039c0:	f1c5 050f 	rsb	r5, r5, #15
 80039c4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80039c8:	ebc5 0509 	rsb	r5, r5, r9
 80039cc:	4652      	mov	r2, sl
 80039ce:	465b      	mov	r3, fp
 80039d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039d4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80039d8:	f7fc fe62 	bl	80006a0 <__aeabi_dmul>
 80039dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80039e0:	f7fc fe5e 	bl	80006a0 <__aeabi_dmul>
 80039e4:	4682      	mov	sl, r0
 80039e6:	468b      	mov	fp, r1
 80039e8:	e3ad      	b.n	8004146 <_strtod_r+0xb96>
 80039ea:	f119 0f16 	cmn.w	r9, #22
 80039ee:	db09      	blt.n	8003a04 <_strtod_r+0x454>
 80039f0:	4d64      	ldr	r5, [pc, #400]	; (8003b84 <_strtod_r+0x5d4>)
 80039f2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 80039f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80039fa:	4650      	mov	r0, sl
 80039fc:	4659      	mov	r1, fp
 80039fe:	f7fc ff79 	bl	80008f4 <__aeabi_ddiv>
 8003a02:	e7ef      	b.n	80039e4 <_strtod_r+0x434>
 8003a04:	1b2c      	subs	r4, r5, r4
 8003a06:	444c      	add	r4, r9
 8003a08:	2c00      	cmp	r4, #0
 8003a0a:	dd57      	ble.n	8003abc <_strtod_r+0x50c>
 8003a0c:	f014 010f 	ands.w	r1, r4, #15
 8003a10:	d00a      	beq.n	8003a28 <_strtod_r+0x478>
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <_strtod_r+0x5d4>)
 8003a14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003a18:	4652      	mov	r2, sl
 8003a1a:	465b      	mov	r3, fp
 8003a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a20:	f7fc fe3e 	bl	80006a0 <__aeabi_dmul>
 8003a24:	4682      	mov	sl, r0
 8003a26:	468b      	mov	fp, r1
 8003a28:	f034 040f 	bics.w	r4, r4, #15
 8003a2c:	f000 80b8 	beq.w	8003ba0 <_strtod_r+0x5f0>
 8003a30:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8003a34:	dd0b      	ble.n	8003a4e <_strtod_r+0x49e>
 8003a36:	2400      	movs	r4, #0
 8003a38:	4625      	mov	r5, r4
 8003a3a:	9405      	str	r4, [sp, #20]
 8003a3c:	9404      	str	r4, [sp, #16]
 8003a3e:	9a02      	ldr	r2, [sp, #8]
 8003a40:	f8df b150 	ldr.w	fp, [pc, #336]	; 8003b94 <_strtod_r+0x5e4>
 8003a44:	2322      	movs	r3, #34	; 0x22
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	f04f 0a00 	mov.w	sl, #0
 8003a4c:	e187      	b.n	8003d5e <_strtod_r+0x7ae>
 8003a4e:	4e4e      	ldr	r6, [pc, #312]	; (8003b88 <_strtod_r+0x5d8>)
 8003a50:	2300      	movs	r3, #0
 8003a52:	1124      	asrs	r4, r4, #4
 8003a54:	4650      	mov	r0, sl
 8003a56:	4659      	mov	r1, fp
 8003a58:	4698      	mov	r8, r3
 8003a5a:	4637      	mov	r7, r6
 8003a5c:	2c01      	cmp	r4, #1
 8003a5e:	dd0b      	ble.n	8003a78 <_strtod_r+0x4c8>
 8003a60:	07e2      	lsls	r2, r4, #31
 8003a62:	d504      	bpl.n	8003a6e <_strtod_r+0x4be>
 8003a64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a68:	f7fc fe1a 	bl	80006a0 <__aeabi_dmul>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f108 0801 	add.w	r8, r8, #1
 8003a72:	1064      	asrs	r4, r4, #1
 8003a74:	3608      	adds	r6, #8
 8003a76:	e7f1      	b.n	8003a5c <_strtod_r+0x4ac>
 8003a78:	b10b      	cbz	r3, 8003a7e <_strtod_r+0x4ce>
 8003a7a:	4682      	mov	sl, r0
 8003a7c:	468b      	mov	fp, r1
 8003a7e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003a82:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8003a86:	4652      	mov	r2, sl
 8003a88:	465b      	mov	r3, fp
 8003a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a8e:	f7fc fe07 	bl	80006a0 <__aeabi_dmul>
 8003a92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a96:	468b      	mov	fp, r1
 8003a98:	460a      	mov	r2, r1
 8003a9a:	0d1b      	lsrs	r3, r3, #20
 8003a9c:	493b      	ldr	r1, [pc, #236]	; (8003b8c <_strtod_r+0x5dc>)
 8003a9e:	051b      	lsls	r3, r3, #20
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	4682      	mov	sl, r0
 8003aa4:	d8c7      	bhi.n	8003a36 <_strtod_r+0x486>
 8003aa6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003aaa:	428b      	cmp	r3, r1
 8003aac:	bf86      	itte	hi
 8003aae:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 8003b9c <_strtod_r+0x5ec>
 8003ab2:	f04f 3aff 	movhi.w	sl, #4294967295
 8003ab6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003aba:	e071      	b.n	8003ba0 <_strtod_r+0x5f0>
 8003abc:	d070      	beq.n	8003ba0 <_strtod_r+0x5f0>
 8003abe:	4264      	negs	r4, r4
 8003ac0:	f014 020f 	ands.w	r2, r4, #15
 8003ac4:	d00a      	beq.n	8003adc <_strtod_r+0x52c>
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <_strtod_r+0x5d4>)
 8003ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003acc:	4650      	mov	r0, sl
 8003ace:	4659      	mov	r1, fp
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f7fc ff0e 	bl	80008f4 <__aeabi_ddiv>
 8003ad8:	4682      	mov	sl, r0
 8003ada:	468b      	mov	fp, r1
 8003adc:	1124      	asrs	r4, r4, #4
 8003ade:	d05f      	beq.n	8003ba0 <_strtod_r+0x5f0>
 8003ae0:	2c1f      	cmp	r4, #31
 8003ae2:	dd04      	ble.n	8003aee <_strtod_r+0x53e>
 8003ae4:	2400      	movs	r4, #0
 8003ae6:	4625      	mov	r5, r4
 8003ae8:	9405      	str	r4, [sp, #20]
 8003aea:	9404      	str	r4, [sp, #16]
 8003aec:	e130      	b.n	8003d50 <_strtod_r+0x7a0>
 8003aee:	f014 0f10 	tst.w	r4, #16
 8003af2:	bf0c      	ite	eq
 8003af4:	2300      	moveq	r3, #0
 8003af6:	236a      	movne	r3, #106	; 0x6a
 8003af8:	4e25      	ldr	r6, [pc, #148]	; (8003b90 <_strtod_r+0x5e0>)
 8003afa:	9303      	str	r3, [sp, #12]
 8003afc:	4650      	mov	r0, sl
 8003afe:	4659      	mov	r1, fp
 8003b00:	2300      	movs	r3, #0
 8003b02:	2c00      	cmp	r4, #0
 8003b04:	dd09      	ble.n	8003b1a <_strtod_r+0x56a>
 8003b06:	07e2      	lsls	r2, r4, #31
 8003b08:	d504      	bpl.n	8003b14 <_strtod_r+0x564>
 8003b0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b0e:	f7fc fdc7 	bl	80006a0 <__aeabi_dmul>
 8003b12:	2301      	movs	r3, #1
 8003b14:	1064      	asrs	r4, r4, #1
 8003b16:	3608      	adds	r6, #8
 8003b18:	e7f3      	b.n	8003b02 <_strtod_r+0x552>
 8003b1a:	b10b      	cbz	r3, 8003b20 <_strtod_r+0x570>
 8003b1c:	4682      	mov	sl, r0
 8003b1e:	468b      	mov	fp, r1
 8003b20:	9b03      	ldr	r3, [sp, #12]
 8003b22:	b1eb      	cbz	r3, 8003b60 <_strtod_r+0x5b0>
 8003b24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003b28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	4659      	mov	r1, fp
 8003b30:	dd16      	ble.n	8003b60 <_strtod_r+0x5b0>
 8003b32:	2b1f      	cmp	r3, #31
 8003b34:	dd0e      	ble.n	8003b54 <_strtod_r+0x5a4>
 8003b36:	2b34      	cmp	r3, #52	; 0x34
 8003b38:	bfde      	ittt	le
 8003b3a:	3b20      	suble	r3, #32
 8003b3c:	f04f 32ff 	movle.w	r2, #4294967295
 8003b40:	fa02 f303 	lslle.w	r3, r2, r3
 8003b44:	f04f 0a00 	mov.w	sl, #0
 8003b48:	bfcc      	ite	gt
 8003b4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003b4e:	ea03 0b01 	andle.w	fp, r3, r1
 8003b52:	e005      	b.n	8003b60 <_strtod_r+0x5b0>
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	ea03 0a0a 	and.w	sl, r3, sl
 8003b60:	2200      	movs	r2, #0
 8003b62:	2300      	movs	r3, #0
 8003b64:	4650      	mov	r0, sl
 8003b66:	4659      	mov	r1, fp
 8003b68:	f7fd f802 	bl	8000b70 <__aeabi_dcmpeq>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d1b9      	bne.n	8003ae4 <_strtod_r+0x534>
 8003b70:	e018      	b.n	8003ba4 <_strtod_r+0x5f4>
 8003b72:	bf00      	nop
 8003b74:	08006c3d 	.word	0x08006c3d
 8003b78:	08006dcc 	.word	0x08006dcc
 8003b7c:	08006c45 	.word	0x08006c45
 8003b80:	08006c74 	.word	0x08006c74
 8003b84:	08006e40 	.word	0x08006e40
 8003b88:	08006f08 	.word	0x08006f08
 8003b8c:	7ca00000 	.word	0x7ca00000
 8003b90:	08006ca0 	.word	0x08006ca0
 8003b94:	7ff00000 	.word	0x7ff00000
 8003b98:	fff80000 	.word	0xfff80000
 8003b9c:	7fefffff 	.word	0x7fefffff
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9303      	str	r3, [sp, #12]
 8003ba4:	9b05      	ldr	r3, [sp, #20]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	9a04      	ldr	r2, [sp, #16]
 8003baa:	9907      	ldr	r1, [sp, #28]
 8003bac:	9802      	ldr	r0, [sp, #8]
 8003bae:	462b      	mov	r3, r5
 8003bb0:	f001 fff5 	bl	8005b9e <__s2b>
 8003bb4:	9005      	str	r0, [sp, #20]
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	f43f af3d 	beq.w	8003a36 <_strtod_r+0x486>
 8003bbc:	f1b9 0f00 	cmp.w	r9, #0
 8003bc0:	f1c9 0300 	rsb	r3, r9, #0
 8003bc4:	bfa8      	it	ge
 8003bc6:	2300      	movge	r3, #0
 8003bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8003bca:	2400      	movs	r4, #0
 8003bcc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8003bd0:	9312      	str	r3, [sp, #72]	; 0x48
 8003bd2:	4625      	mov	r5, r4
 8003bd4:	9b05      	ldr	r3, [sp, #20]
 8003bd6:	9802      	ldr	r0, [sp, #8]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	f001 ff59 	bl	8005a90 <_Balloc>
 8003bde:	9004      	str	r0, [sp, #16]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	f43f af2c 	beq.w	8003a3e <_strtod_r+0x48e>
 8003be6:	9b05      	ldr	r3, [sp, #20]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	3202      	adds	r2, #2
 8003bec:	f103 010c 	add.w	r1, r3, #12
 8003bf0:	0092      	lsls	r2, r2, #2
 8003bf2:	300c      	adds	r0, #12
 8003bf4:	f7fe fc9e 	bl	8002534 <memcpy>
 8003bf8:	aa1a      	add	r2, sp, #104	; 0x68
 8003bfa:	a919      	add	r1, sp, #100	; 0x64
 8003bfc:	ec4b ab10 	vmov	d0, sl, fp
 8003c00:	9802      	ldr	r0, [sp, #8]
 8003c02:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003c06:	f002 fa7e 	bl	8006106 <__d2b>
 8003c0a:	9018      	str	r0, [sp, #96]	; 0x60
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f43f af16 	beq.w	8003a3e <_strtod_r+0x48e>
 8003c12:	2101      	movs	r1, #1
 8003c14:	9802      	ldr	r0, [sp, #8]
 8003c16:	f002 f84d 	bl	8005cb4 <__i2b>
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	f43f af0e 	beq.w	8003a3e <_strtod_r+0x48e>
 8003c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c24:	9903      	ldr	r1, [sp, #12]
 8003c26:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bfad      	iteet	ge
 8003c2c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 8003c2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003c30:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 8003c34:	eb02 0803 	addge.w	r8, r2, r3
 8003c38:	bfb8      	it	lt
 8003c3a:	1ad2      	sublt	r2, r2, r3
 8003c3c:	eba3 0301 	sub.w	r3, r3, r1
 8003c40:	4433      	add	r3, r6
 8003c42:	49b5      	ldr	r1, [pc, #724]	; (8003f18 <_strtod_r+0x968>)
 8003c44:	bfa8      	it	ge
 8003c46:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	428b      	cmp	r3, r1
 8003c4c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 8003c50:	f280 808a 	bge.w	8003d68 <_strtod_r+0x7b8>
 8003c54:	1ac9      	subs	r1, r1, r3
 8003c56:	291f      	cmp	r1, #31
 8003c58:	bfc8      	it	gt
 8003c5a:	4fb0      	ldrgt	r7, [pc, #704]	; (8003f1c <_strtod_r+0x96c>)
 8003c5c:	f04f 0901 	mov.w	r9, #1
 8003c60:	bfd4      	ite	le
 8003c62:	fa09 f301 	lslle.w	r3, r9, r1
 8003c66:	1aff      	subgt	r7, r7, r3
 8003c68:	eba6 0601 	sub.w	r6, r6, r1
 8003c6c:	bfd9      	ittee	le
 8003c6e:	9306      	strle	r3, [sp, #24]
 8003c70:	2700      	movle	r7, #0
 8003c72:	fa09 f707 	lslgt.w	r7, r9, r7
 8003c76:	f8cd 9018 	strgt.w	r9, [sp, #24]
 8003c7a:	eb08 0906 	add.w	r9, r8, r6
 8003c7e:	9b03      	ldr	r3, [sp, #12]
 8003c80:	45c8      	cmp	r8, r9
 8003c82:	4416      	add	r6, r2
 8003c84:	441e      	add	r6, r3
 8003c86:	4643      	mov	r3, r8
 8003c88:	bfa8      	it	ge
 8003c8a:	464b      	movge	r3, r9
 8003c8c:	42b3      	cmp	r3, r6
 8003c8e:	bfa8      	it	ge
 8003c90:	4633      	movge	r3, r6
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bfc2      	ittt	gt
 8003c96:	ebc3 0909 	rsbgt	r9, r3, r9
 8003c9a:	1af6      	subgt	r6, r6, r3
 8003c9c:	ebc3 0808 	rsbgt	r8, r3, r8
 8003ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d164      	bne.n	8003d70 <_strtod_r+0x7c0>
 8003ca6:	f1b9 0f00 	cmp.w	r9, #0
 8003caa:	dc7a      	bgt.n	8003da2 <_strtod_r+0x7f2>
 8003cac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f040 8081 	bne.w	8003db6 <_strtod_r+0x806>
 8003cb4:	2e00      	cmp	r6, #0
 8003cb6:	f300 8088 	bgt.w	8003dca <_strtod_r+0x81a>
 8003cba:	f1b8 0f00 	cmp.w	r8, #0
 8003cbe:	f300 808e 	bgt.w	8003dde <_strtod_r+0x82e>
 8003cc2:	9a04      	ldr	r2, [sp, #16]
 8003cc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003cc6:	9802      	ldr	r0, [sp, #8]
 8003cc8:	f002 f949 	bl	8005f5e <__mdiff>
 8003ccc:	4604      	mov	r4, r0
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	f43f aeb5 	beq.w	8003a3e <_strtod_r+0x48e>
 8003cd4:	68c3      	ldr	r3, [r0, #12]
 8003cd6:	9307      	str	r3, [sp, #28]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60c3      	str	r3, [r0, #12]
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f002 f922 	bl	8005f26 <__mcmp>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	f280 8089 	bge.w	8003dfa <_strtod_r+0x84a>
 8003ce8:	9b07      	ldr	r3, [sp, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 8204 	bne.w	80040f8 <_strtod_r+0xb48>
 8003cf0:	f1ba 0f00 	cmp.w	sl, #0
 8003cf4:	f040 8200 	bne.w	80040f8 <_strtod_r+0xb48>
 8003cf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 81fb 	bne.w	80040f8 <_strtod_r+0xb48>
 8003d02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003d06:	0d1b      	lsrs	r3, r3, #20
 8003d08:	051b      	lsls	r3, r3, #20
 8003d0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003d0e:	f240 81f3 	bls.w	80040f8 <_strtod_r+0xb48>
 8003d12:	6963      	ldr	r3, [r4, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d06c      	beq.n	8003df2 <_strtod_r+0x842>
 8003d18:	4621      	mov	r1, r4
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	9802      	ldr	r0, [sp, #8]
 8003d1e:	f002 f8b1 	bl	8005e84 <__lshift>
 8003d22:	4629      	mov	r1, r5
 8003d24:	4604      	mov	r4, r0
 8003d26:	f002 f8fe 	bl	8005f26 <__mcmp>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	f340 81e4 	ble.w	80040f8 <_strtod_r+0xb48>
 8003d30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003d34:	9a03      	ldr	r2, [sp, #12]
 8003d36:	0d1b      	lsrs	r3, r3, #20
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	2a00      	cmp	r2, #0
 8003d3c:	f000 808c 	beq.w	8003e58 <_strtod_r+0x8a8>
 8003d40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003d44:	f300 8088 	bgt.w	8003e58 <_strtod_r+0x8a8>
 8003d48:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8003d4c:	f300 81d6 	bgt.w	80040fc <_strtod_r+0xb4c>
 8003d50:	9a02      	ldr	r2, [sp, #8]
 8003d52:	2322      	movs	r3, #34	; 0x22
 8003d54:	f04f 0a00 	mov.w	sl, #0
 8003d58:	f04f 0b00 	mov.w	fp, #0
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	9b05      	ldr	r3, [sp, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 81dc 	bne.w	800411e <_strtod_r+0xb6e>
 8003d66:	e1ee      	b.n	8004146 <_strtod_r+0xb96>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	2700      	movs	r7, #0
 8003d6c:	9306      	str	r3, [sp, #24]
 8003d6e:	e784      	b.n	8003c7a <_strtod_r+0x6ca>
 8003d70:	4629      	mov	r1, r5
 8003d72:	461a      	mov	r2, r3
 8003d74:	9802      	ldr	r0, [sp, #8]
 8003d76:	f002 f837 	bl	8005de8 <__pow5mult>
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	f43f ae5e 	beq.w	8003a3e <_strtod_r+0x48e>
 8003d82:	4601      	mov	r1, r0
 8003d84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003d86:	9802      	ldr	r0, [sp, #8]
 8003d88:	f001 ff9d 	bl	8005cc6 <__multiply>
 8003d8c:	9007      	str	r0, [sp, #28]
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	f43f ae55 	beq.w	8003a3e <_strtod_r+0x48e>
 8003d94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003d96:	9802      	ldr	r0, [sp, #8]
 8003d98:	f001 feaf 	bl	8005afa <_Bfree>
 8003d9c:	9b07      	ldr	r3, [sp, #28]
 8003d9e:	9318      	str	r3, [sp, #96]	; 0x60
 8003da0:	e781      	b.n	8003ca6 <_strtod_r+0x6f6>
 8003da2:	464a      	mov	r2, r9
 8003da4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003da6:	9802      	ldr	r0, [sp, #8]
 8003da8:	f002 f86c 	bl	8005e84 <__lshift>
 8003dac:	9018      	str	r0, [sp, #96]	; 0x60
 8003dae:	2800      	cmp	r0, #0
 8003db0:	f47f af7c 	bne.w	8003cac <_strtod_r+0x6fc>
 8003db4:	e643      	b.n	8003a3e <_strtod_r+0x48e>
 8003db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003db8:	9904      	ldr	r1, [sp, #16]
 8003dba:	9802      	ldr	r0, [sp, #8]
 8003dbc:	f002 f814 	bl	8005de8 <__pow5mult>
 8003dc0:	9004      	str	r0, [sp, #16]
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	f47f af76 	bne.w	8003cb4 <_strtod_r+0x704>
 8003dc8:	e639      	b.n	8003a3e <_strtod_r+0x48e>
 8003dca:	4632      	mov	r2, r6
 8003dcc:	9904      	ldr	r1, [sp, #16]
 8003dce:	9802      	ldr	r0, [sp, #8]
 8003dd0:	f002 f858 	bl	8005e84 <__lshift>
 8003dd4:	9004      	str	r0, [sp, #16]
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	f47f af6f 	bne.w	8003cba <_strtod_r+0x70a>
 8003ddc:	e62f      	b.n	8003a3e <_strtod_r+0x48e>
 8003dde:	4629      	mov	r1, r5
 8003de0:	4642      	mov	r2, r8
 8003de2:	9802      	ldr	r0, [sp, #8]
 8003de4:	f002 f84e 	bl	8005e84 <__lshift>
 8003de8:	4605      	mov	r5, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	f47f af69 	bne.w	8003cc2 <_strtod_r+0x712>
 8003df0:	e625      	b.n	8003a3e <_strtod_r+0x48e>
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	dc8f      	bgt.n	8003d18 <_strtod_r+0x768>
 8003df8:	e17e      	b.n	80040f8 <_strtod_r+0xb48>
 8003dfa:	d161      	bne.n	8003ec0 <_strtod_r+0x910>
 8003dfc:	9a07      	ldr	r2, [sp, #28]
 8003dfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003e02:	b322      	cbz	r2, 8003e4e <_strtod_r+0x89e>
 8003e04:	4946      	ldr	r1, [pc, #280]	; (8003f20 <_strtod_r+0x970>)
 8003e06:	428b      	cmp	r3, r1
 8003e08:	465a      	mov	r2, fp
 8003e0a:	d12e      	bne.n	8003e6a <_strtod_r+0x8ba>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	4651      	mov	r1, sl
 8003e10:	b163      	cbz	r3, 8003e2c <_strtod_r+0x87c>
 8003e12:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <_strtod_r+0x974>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003e1a:	d807      	bhi.n	8003e2c <_strtod_r+0x87c>
 8003e1c:	0d1b      	lsrs	r3, r3, #20
 8003e1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e22:	f04f 30ff 	mov.w	r0, #4294967295
 8003e26:	fa00 f303 	lsl.w	r3, r0, r3
 8003e2a:	e001      	b.n	8003e30 <_strtod_r+0x880>
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d11a      	bne.n	8003e6a <_strtod_r+0x8ba>
 8003e34:	493c      	ldr	r1, [pc, #240]	; (8003f28 <_strtod_r+0x978>)
 8003e36:	428a      	cmp	r2, r1
 8003e38:	d102      	bne.n	8003e40 <_strtod_r+0x890>
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f43f adff 	beq.w	8003a3e <_strtod_r+0x48e>
 8003e40:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <_strtod_r+0x974>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8003e48:	f04f 0a00 	mov.w	sl, #0
 8003e4c:	e154      	b.n	80040f8 <_strtod_r+0xb48>
 8003e4e:	b963      	cbnz	r3, 8003e6a <_strtod_r+0x8ba>
 8003e50:	f1ba 0f00 	cmp.w	sl, #0
 8003e54:	d109      	bne.n	8003e6a <_strtod_r+0x8ba>
 8003e56:	e76b      	b.n	8003d30 <_strtod_r+0x780>
 8003e58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003e5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003e60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003e64:	f04f 3aff 	mov.w	sl, #4294967295
 8003e68:	e146      	b.n	80040f8 <_strtod_r+0xb48>
 8003e6a:	b117      	cbz	r7, 8003e72 <_strtod_r+0x8c2>
 8003e6c:	ea17 0f0b 	tst.w	r7, fp
 8003e70:	e002      	b.n	8003e78 <_strtod_r+0x8c8>
 8003e72:	9b06      	ldr	r3, [sp, #24]
 8003e74:	ea13 0f0a 	tst.w	r3, sl
 8003e78:	f000 813e 	beq.w	80040f8 <_strtod_r+0xb48>
 8003e7c:	9b07      	ldr	r3, [sp, #28]
 8003e7e:	9a03      	ldr	r2, [sp, #12]
 8003e80:	4650      	mov	r0, sl
 8003e82:	4659      	mov	r1, fp
 8003e84:	b153      	cbz	r3, 8003e9c <_strtod_r+0x8ec>
 8003e86:	f7ff fb77 	bl	8003578 <sulp>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e92:	f7fc fa53 	bl	800033c <__adddf3>
 8003e96:	4682      	mov	sl, r0
 8003e98:	468b      	mov	fp, r1
 8003e9a:	e12d      	b.n	80040f8 <_strtod_r+0xb48>
 8003e9c:	f7ff fb6c 	bl	8003578 <sulp>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ea8:	f7fc fa46 	bl	8000338 <__aeabi_dsub>
 8003eac:	2200      	movs	r2, #0
 8003eae:	2300      	movs	r3, #0
 8003eb0:	4682      	mov	sl, r0
 8003eb2:	468b      	mov	fp, r1
 8003eb4:	f7fc fe5c 	bl	8000b70 <__aeabi_dcmpeq>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	f47f af49 	bne.w	8003d50 <_strtod_r+0x7a0>
 8003ebe:	e11b      	b.n	80040f8 <_strtod_r+0xb48>
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f002 f96d 	bl	80061a2 <__ratio>
 8003ec8:	ec57 6b10 	vmov	r6, r7, d0
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ed2:	ee10 0a10 	vmov	r0, s0
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	f7fc fe5e 	bl	8000b98 <__aeabi_dcmple>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d042      	beq.n	8003f66 <_strtod_r+0x9b6>
 8003ee0:	9b07      	ldr	r3, [sp, #28]
 8003ee2:	b123      	cbz	r3, 8003eee <_strtod_r+0x93e>
 8003ee4:	f04f 0800 	mov.w	r8, #0
 8003ee8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8003f2c <_strtod_r+0x97c>
 8003eec:	e011      	b.n	8003f12 <_strtod_r+0x962>
 8003eee:	f1ba 0f00 	cmp.w	sl, #0
 8003ef2:	d103      	bne.n	8003efc <_strtod_r+0x94c>
 8003ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003ef8:	b93b      	cbnz	r3, 8003f0a <_strtod_r+0x95a>
 8003efa:	e01b      	b.n	8003f34 <_strtod_r+0x984>
 8003efc:	f1ba 0f01 	cmp.w	sl, #1
 8003f00:	d103      	bne.n	8003f0a <_strtod_r+0x95a>
 8003f02:	f1bb 0f00 	cmp.w	fp, #0
 8003f06:	f43f af23 	beq.w	8003d50 <_strtod_r+0x7a0>
 8003f0a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8003f30 <_strtod_r+0x980>
 8003f0e:	f04f 0800 	mov.w	r8, #0
 8003f12:	2600      	movs	r6, #0
 8003f14:	4f05      	ldr	r7, [pc, #20]	; (8003f2c <_strtod_r+0x97c>)
 8003f16:	e039      	b.n	8003f8c <_strtod_r+0x9dc>
 8003f18:	fffffc02 	.word	0xfffffc02
 8003f1c:	fffffbe2 	.word	0xfffffbe2
 8003f20:	000fffff 	.word	0x000fffff
 8003f24:	7ff00000 	.word	0x7ff00000
 8003f28:	7fefffff 	.word	0x7fefffff
 8003f2c:	3ff00000 	.word	0x3ff00000
 8003f30:	bff00000 	.word	0xbff00000
 8003f34:	2200      	movs	r2, #0
 8003f36:	4b98      	ldr	r3, [pc, #608]	; (8004198 <_strtod_r+0xbe8>)
 8003f38:	4630      	mov	r0, r6
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	f7fc fe22 	bl	8000b84 <__aeabi_dcmplt>
 8003f40:	b940      	cbnz	r0, 8003f54 <_strtod_r+0x9a4>
 8003f42:	4630      	mov	r0, r6
 8003f44:	4639      	mov	r1, r7
 8003f46:	2200      	movs	r2, #0
 8003f48:	4b94      	ldr	r3, [pc, #592]	; (800419c <_strtod_r+0xbec>)
 8003f4a:	f7fc fba9 	bl	80006a0 <__aeabi_dmul>
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460f      	mov	r7, r1
 8003f52:	e001      	b.n	8003f58 <_strtod_r+0x9a8>
 8003f54:	4f91      	ldr	r7, [pc, #580]	; (800419c <_strtod_r+0xbec>)
 8003f56:	2600      	movs	r6, #0
 8003f58:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003f5c:	9614      	str	r6, [sp, #80]	; 0x50
 8003f5e:	9315      	str	r3, [sp, #84]	; 0x54
 8003f60:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8003f64:	e012      	b.n	8003f8c <_strtod_r+0x9dc>
 8003f66:	4b8d      	ldr	r3, [pc, #564]	; (800419c <_strtod_r+0xbec>)
 8003f68:	4630      	mov	r0, r6
 8003f6a:	4639      	mov	r1, r7
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f7fc fb97 	bl	80006a0 <__aeabi_dmul>
 8003f72:	9b07      	ldr	r3, [sp, #28]
 8003f74:	4606      	mov	r6, r0
 8003f76:	460f      	mov	r7, r1
 8003f78:	b923      	cbnz	r3, 8003f84 <_strtod_r+0x9d4>
 8003f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f7e:	900e      	str	r0, [sp, #56]	; 0x38
 8003f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f82:	e001      	b.n	8003f88 <_strtod_r+0x9d8>
 8003f84:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8003f88:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8003f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003f90:	0d1b      	lsrs	r3, r3, #20
 8003f92:	051b      	lsls	r3, r3, #20
 8003f94:	9306      	str	r3, [sp, #24]
 8003f96:	9a06      	ldr	r2, [sp, #24]
 8003f98:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <_strtod_r+0xbf0>)
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d12b      	bne.n	8003ff6 <_strtod_r+0xa46>
 8003f9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fa2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003fa6:	ec4b ab10 	vmov	d0, sl, fp
 8003faa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003fae:	f002 f835 	bl	800601c <__ulp>
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	ec53 2b10 	vmov	r2, r3, d0
 8003fb8:	4649      	mov	r1, r9
 8003fba:	f7fc fb71 	bl	80006a0 <__aeabi_dmul>
 8003fbe:	4652      	mov	r2, sl
 8003fc0:	465b      	mov	r3, fp
 8003fc2:	f7fc f9bb 	bl	800033c <__adddf3>
 8003fc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003fca:	0d1b      	lsrs	r3, r3, #20
 8003fcc:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <_strtod_r+0xbf4>)
 8003fce:	051b      	lsls	r3, r3, #20
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	4682      	mov	sl, r0
 8003fd4:	d90c      	bls.n	8003ff0 <_strtod_r+0xa40>
 8003fd6:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <_strtod_r+0xbf8>)
 8003fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d103      	bne.n	8003fe6 <_strtod_r+0xa36>
 8003fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f43f ad2c 	beq.w	8003a3e <_strtod_r+0x48e>
 8003fe6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 80041a8 <_strtod_r+0xbf8>
 8003fea:	f04f 3aff 	mov.w	sl, #4294967295
 8003fee:	e072      	b.n	80040d6 <_strtod_r+0xb26>
 8003ff0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8003ff4:	e038      	b.n	8004068 <_strtod_r+0xab8>
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	b333      	cbz	r3, 8004048 <_strtod_r+0xa98>
 8003ffa:	9b06      	ldr	r3, [sp, #24]
 8003ffc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004000:	d822      	bhi.n	8004048 <_strtod_r+0xa98>
 8004002:	a35d      	add	r3, pc, #372	; (adr r3, 8004178 <_strtod_r+0xbc8>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	4630      	mov	r0, r6
 800400a:	4639      	mov	r1, r7
 800400c:	f7fc fdc4 	bl	8000b98 <__aeabi_dcmple>
 8004010:	b1a8      	cbz	r0, 800403e <_strtod_r+0xa8e>
 8004012:	4639      	mov	r1, r7
 8004014:	4630      	mov	r0, r6
 8004016:	f7fc fe05 	bl	8000c24 <__aeabi_d2uiz>
 800401a:	2800      	cmp	r0, #0
 800401c:	bf08      	it	eq
 800401e:	2001      	moveq	r0, #1
 8004020:	f7fc fac8 	bl	80005b4 <__aeabi_ui2d>
 8004024:	9b07      	ldr	r3, [sp, #28]
 8004026:	4606      	mov	r6, r0
 8004028:	460f      	mov	r7, r1
 800402a:	b923      	cbnz	r3, 8004036 <_strtod_r+0xa86>
 800402c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004030:	9010      	str	r0, [sp, #64]	; 0x40
 8004032:	9311      	str	r3, [sp, #68]	; 0x44
 8004034:	e001      	b.n	800403a <_strtod_r+0xa8a>
 8004036:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800403a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800403e:	9a06      	ldr	r2, [sp, #24]
 8004040:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8004044:	ebc2 0903 	rsb	r9, r2, r3
 8004048:	ed9d 0b08 	vldr	d0, [sp, #32]
 800404c:	f001 ffe6 	bl	800601c <__ulp>
 8004050:	4640      	mov	r0, r8
 8004052:	ec53 2b10 	vmov	r2, r3, d0
 8004056:	4649      	mov	r1, r9
 8004058:	f7fc fb22 	bl	80006a0 <__aeabi_dmul>
 800405c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004060:	f7fc f96c 	bl	800033c <__adddf3>
 8004064:	4682      	mov	sl, r0
 8004066:	468b      	mov	fp, r1
 8004068:	9b03      	ldr	r3, [sp, #12]
 800406a:	bba3      	cbnz	r3, 80040d6 <_strtod_r+0xb26>
 800406c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004070:	0d1b      	lsrs	r3, r3, #20
 8004072:	9a06      	ldr	r2, [sp, #24]
 8004074:	051b      	lsls	r3, r3, #20
 8004076:	429a      	cmp	r2, r3
 8004078:	46d8      	mov	r8, fp
 800407a:	d12c      	bne.n	80040d6 <_strtod_r+0xb26>
 800407c:	4639      	mov	r1, r7
 800407e:	4630      	mov	r0, r6
 8004080:	f7fc fda8 	bl	8000bd4 <__aeabi_d2iz>
 8004084:	f7fc faa6 	bl	80005d4 <__aeabi_i2d>
 8004088:	460b      	mov	r3, r1
 800408a:	4602      	mov	r2, r0
 800408c:	4639      	mov	r1, r7
 800408e:	4630      	mov	r0, r6
 8004090:	f7fc f952 	bl	8000338 <__aeabi_dsub>
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	4606      	mov	r6, r0
 8004098:	460f      	mov	r7, r1
 800409a:	b92b      	cbnz	r3, 80040a8 <_strtod_r+0xaf8>
 800409c:	f1ba 0f00 	cmp.w	sl, #0
 80040a0:	d102      	bne.n	80040a8 <_strtod_r+0xaf8>
 80040a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040a6:	b183      	cbz	r3, 80040ca <_strtod_r+0xb1a>
 80040a8:	a335      	add	r3, pc, #212	; (adr r3, 8004180 <_strtod_r+0xbd0>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	4630      	mov	r0, r6
 80040b0:	4639      	mov	r1, r7
 80040b2:	f7fc fd67 	bl	8000b84 <__aeabi_dcmplt>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d131      	bne.n	800411e <_strtod_r+0xb6e>
 80040ba:	a333      	add	r3, pc, #204	; (adr r3, 8004188 <_strtod_r+0xbd8>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	4630      	mov	r0, r6
 80040c2:	4639      	mov	r1, r7
 80040c4:	f7fc fd7c 	bl	8000bc0 <__aeabi_dcmpgt>
 80040c8:	e004      	b.n	80040d4 <_strtod_r+0xb24>
 80040ca:	a331      	add	r3, pc, #196	; (adr r3, 8004190 <_strtod_r+0xbe0>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f7fc fd58 	bl	8000b84 <__aeabi_dcmplt>
 80040d4:	bb18      	cbnz	r0, 800411e <_strtod_r+0xb6e>
 80040d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80040d8:	9802      	ldr	r0, [sp, #8]
 80040da:	f001 fd0e 	bl	8005afa <_Bfree>
 80040de:	9904      	ldr	r1, [sp, #16]
 80040e0:	9802      	ldr	r0, [sp, #8]
 80040e2:	f001 fd0a 	bl	8005afa <_Bfree>
 80040e6:	4629      	mov	r1, r5
 80040e8:	9802      	ldr	r0, [sp, #8]
 80040ea:	f001 fd06 	bl	8005afa <_Bfree>
 80040ee:	4621      	mov	r1, r4
 80040f0:	9802      	ldr	r0, [sp, #8]
 80040f2:	f001 fd02 	bl	8005afa <_Bfree>
 80040f6:	e56d      	b.n	8003bd4 <_strtod_r+0x624>
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	b183      	cbz	r3, 800411e <_strtod_r+0xb6e>
 80040fc:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <_strtod_r+0xbfc>)
 80040fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004100:	2300      	movs	r3, #0
 8004102:	930a      	str	r3, [sp, #40]	; 0x28
 8004104:	4650      	mov	r0, sl
 8004106:	4659      	mov	r1, fp
 8004108:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800410c:	f7fc fac8 	bl	80006a0 <__aeabi_dmul>
 8004110:	4682      	mov	sl, r0
 8004112:	468b      	mov	fp, r1
 8004114:	b919      	cbnz	r1, 800411e <_strtod_r+0xb6e>
 8004116:	b910      	cbnz	r0, 800411e <_strtod_r+0xb6e>
 8004118:	9a02      	ldr	r2, [sp, #8]
 800411a:	2322      	movs	r3, #34	; 0x22
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004120:	9802      	ldr	r0, [sp, #8]
 8004122:	f001 fcea 	bl	8005afa <_Bfree>
 8004126:	9904      	ldr	r1, [sp, #16]
 8004128:	9802      	ldr	r0, [sp, #8]
 800412a:	f001 fce6 	bl	8005afa <_Bfree>
 800412e:	4629      	mov	r1, r5
 8004130:	9802      	ldr	r0, [sp, #8]
 8004132:	f001 fce2 	bl	8005afa <_Bfree>
 8004136:	9905      	ldr	r1, [sp, #20]
 8004138:	9802      	ldr	r0, [sp, #8]
 800413a:	f001 fcde 	bl	8005afa <_Bfree>
 800413e:	4621      	mov	r1, r4
 8004140:	9802      	ldr	r0, [sp, #8]
 8004142:	f001 fcda 	bl	8005afa <_Bfree>
 8004146:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004148:	b113      	cbz	r3, 8004150 <_strtod_r+0xba0>
 800414a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800414c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004152:	b11b      	cbz	r3, 800415c <_strtod_r+0xbac>
 8004154:	4652      	mov	r2, sl
 8004156:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800415a:	e007      	b.n	800416c <_strtod_r+0xbbc>
 800415c:	4652      	mov	r2, sl
 800415e:	465b      	mov	r3, fp
 8004160:	e004      	b.n	800416c <_strtod_r+0xbbc>
 8004162:	2500      	movs	r5, #0
 8004164:	462a      	mov	r2, r5
 8004166:	2101      	movs	r1, #1
 8004168:	f7ff bb41 	b.w	80037ee <_strtod_r+0x23e>
 800416c:	ec43 2b10 	vmov	d0, r2, r3
 8004170:	b01d      	add	sp, #116	; 0x74
 8004172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	ffc00000 	.word	0xffc00000
 800417c:	41dfffff 	.word	0x41dfffff
 8004180:	94a03595 	.word	0x94a03595
 8004184:	3fdfffff 	.word	0x3fdfffff
 8004188:	35afe535 	.word	0x35afe535
 800418c:	3fe00000 	.word	0x3fe00000
 8004190:	94a03595 	.word	0x94a03595
 8004194:	3fcfffff 	.word	0x3fcfffff
 8004198:	3ff00000 	.word	0x3ff00000
 800419c:	3fe00000 	.word	0x3fe00000
 80041a0:	7fe00000 	.word	0x7fe00000
 80041a4:	7c9fffff 	.word	0x7c9fffff
 80041a8:	7fefffff 	.word	0x7fefffff
 80041ac:	39500000 	.word	0x39500000

080041b0 <_strtol_r>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	4680      	mov	r8, r0
 80041b6:	4840      	ldr	r0, [pc, #256]	; (80042b8 <_strtol_r+0x108>)
 80041b8:	f8d0 9000 	ldr.w	r9, [r0]
 80041bc:	460f      	mov	r7, r1
 80041be:	463d      	mov	r5, r7
 80041c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041c4:	eb09 0004 	add.w	r0, r9, r4
 80041c8:	7840      	ldrb	r0, [r0, #1]
 80041ca:	f000 0008 	and.w	r0, r0, #8
 80041ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80041d2:	b108      	cbz	r0, 80041d8 <_strtol_r+0x28>
 80041d4:	462f      	mov	r7, r5
 80041d6:	e7f2      	b.n	80041be <_strtol_r+0xe>
 80041d8:	2c2d      	cmp	r4, #45	; 0x2d
 80041da:	d103      	bne.n	80041e4 <_strtol_r+0x34>
 80041dc:	1cbd      	adds	r5, r7, #2
 80041de:	787c      	ldrb	r4, [r7, #1]
 80041e0:	2601      	movs	r6, #1
 80041e2:	e003      	b.n	80041ec <_strtol_r+0x3c>
 80041e4:	2c2b      	cmp	r4, #43	; 0x2b
 80041e6:	bf04      	itt	eq
 80041e8:	787c      	ldrbeq	r4, [r7, #1]
 80041ea:	1cbd      	addeq	r5, r7, #2
 80041ec:	b113      	cbz	r3, 80041f4 <_strtol_r+0x44>
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d10a      	bne.n	8004208 <_strtol_r+0x58>
 80041f2:	e05b      	b.n	80042ac <_strtol_r+0xfc>
 80041f4:	2c30      	cmp	r4, #48	; 0x30
 80041f6:	d157      	bne.n	80042a8 <_strtol_r+0xf8>
 80041f8:	7828      	ldrb	r0, [r5, #0]
 80041fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80041fe:	2858      	cmp	r0, #88	; 0x58
 8004200:	d14d      	bne.n	800429e <_strtol_r+0xee>
 8004202:	786c      	ldrb	r4, [r5, #1]
 8004204:	2310      	movs	r3, #16
 8004206:	3502      	adds	r5, #2
 8004208:	2e00      	cmp	r6, #0
 800420a:	bf14      	ite	ne
 800420c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8004210:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8004214:	2700      	movs	r7, #0
 8004216:	fbbc faf3 	udiv	sl, ip, r3
 800421a:	4638      	mov	r0, r7
 800421c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8004220:	eb09 0e04 	add.w	lr, r9, r4
 8004224:	f89e e001 	ldrb.w	lr, [lr, #1]
 8004228:	f01e 0f04 	tst.w	lr, #4
 800422c:	d001      	beq.n	8004232 <_strtol_r+0x82>
 800422e:	3c30      	subs	r4, #48	; 0x30
 8004230:	e00b      	b.n	800424a <_strtol_r+0x9a>
 8004232:	f01e 0e03 	ands.w	lr, lr, #3
 8004236:	d01b      	beq.n	8004270 <_strtol_r+0xc0>
 8004238:	f1be 0f01 	cmp.w	lr, #1
 800423c:	bf0c      	ite	eq
 800423e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8004242:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8004246:	ebce 0404 	rsb	r4, lr, r4
 800424a:	42a3      	cmp	r3, r4
 800424c:	dd10      	ble.n	8004270 <_strtol_r+0xc0>
 800424e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004252:	d00a      	beq.n	800426a <_strtol_r+0xba>
 8004254:	4550      	cmp	r0, sl
 8004256:	d806      	bhi.n	8004266 <_strtol_r+0xb6>
 8004258:	d101      	bne.n	800425e <_strtol_r+0xae>
 800425a:	4564      	cmp	r4, ip
 800425c:	dc03      	bgt.n	8004266 <_strtol_r+0xb6>
 800425e:	fb03 4000 	mla	r0, r3, r0, r4
 8004262:	2701      	movs	r7, #1
 8004264:	e001      	b.n	800426a <_strtol_r+0xba>
 8004266:	f04f 37ff 	mov.w	r7, #4294967295
 800426a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800426e:	e7d7      	b.n	8004220 <_strtol_r+0x70>
 8004270:	1c7b      	adds	r3, r7, #1
 8004272:	d10c      	bne.n	800428e <_strtol_r+0xde>
 8004274:	2e00      	cmp	r6, #0
 8004276:	f04f 0322 	mov.w	r3, #34	; 0x22
 800427a:	bf14      	ite	ne
 800427c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8004280:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004284:	f8c8 3000 	str.w	r3, [r8]
 8004288:	b92a      	cbnz	r2, 8004296 <_strtol_r+0xe6>
 800428a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428e:	b106      	cbz	r6, 8004292 <_strtol_r+0xe2>
 8004290:	4240      	negs	r0, r0
 8004292:	b172      	cbz	r2, 80042b2 <_strtol_r+0x102>
 8004294:	b107      	cbz	r7, 8004298 <_strtol_r+0xe8>
 8004296:	1e69      	subs	r1, r5, #1
 8004298:	6011      	str	r1, [r2, #0]
 800429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429e:	2430      	movs	r4, #48	; 0x30
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1b1      	bne.n	8004208 <_strtol_r+0x58>
 80042a4:	2308      	movs	r3, #8
 80042a6:	e7af      	b.n	8004208 <_strtol_r+0x58>
 80042a8:	230a      	movs	r3, #10
 80042aa:	e7ad      	b.n	8004208 <_strtol_r+0x58>
 80042ac:	2c30      	cmp	r4, #48	; 0x30
 80042ae:	d0a3      	beq.n	80041f8 <_strtol_r+0x48>
 80042b0:	e7aa      	b.n	8004208 <_strtol_r+0x58>
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	bf00      	nop
 80042b8:	20000068 	.word	0x20000068

080042bc <_times_r>:
 80042bc:	4608      	mov	r0, r1
 80042be:	f7fd bafd 	b.w	80018bc <_times>
	...

080042c4 <__swbuf_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	460f      	mov	r7, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4606      	mov	r6, r0
 80042cc:	b118      	cbz	r0, 80042d6 <__swbuf_r+0x12>
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	b90b      	cbnz	r3, 80042d6 <__swbuf_r+0x12>
 80042d2:	f000 ffdb 	bl	800528c <__sinit>
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <__swbuf_r+0x9c>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d101      	bne.n	80042e0 <__swbuf_r+0x1c>
 80042dc:	6874      	ldr	r4, [r6, #4]
 80042de:	e008      	b.n	80042f2 <__swbuf_r+0x2e>
 80042e0:	4b20      	ldr	r3, [pc, #128]	; (8004364 <__swbuf_r+0xa0>)
 80042e2:	429c      	cmp	r4, r3
 80042e4:	d101      	bne.n	80042ea <__swbuf_r+0x26>
 80042e6:	68b4      	ldr	r4, [r6, #8]
 80042e8:	e003      	b.n	80042f2 <__swbuf_r+0x2e>
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <__swbuf_r+0xa4>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	bf08      	it	eq
 80042f0:	68f4      	ldreq	r4, [r6, #12]
 80042f2:	69a3      	ldr	r3, [r4, #24]
 80042f4:	60a3      	str	r3, [r4, #8]
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	071a      	lsls	r2, r3, #28
 80042fa:	d509      	bpl.n	8004310 <__swbuf_r+0x4c>
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	b13b      	cbz	r3, 8004310 <__swbuf_r+0x4c>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	6920      	ldr	r0, [r4, #16]
 8004304:	1a18      	subs	r0, r3, r0
 8004306:	6963      	ldr	r3, [r4, #20]
 8004308:	4298      	cmp	r0, r3
 800430a:	b2fd      	uxtb	r5, r7
 800430c:	db0f      	blt.n	800432e <__swbuf_r+0x6a>
 800430e:	e008      	b.n	8004322 <__swbuf_r+0x5e>
 8004310:	4621      	mov	r1, r4
 8004312:	4630      	mov	r0, r6
 8004314:	f000 f82a 	bl	800436c <__swsetup_r>
 8004318:	2800      	cmp	r0, #0
 800431a:	d0f1      	beq.n	8004300 <__swbuf_r+0x3c>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004322:	4621      	mov	r1, r4
 8004324:	4630      	mov	r0, r6
 8004326:	f000 ff47 	bl	80051b8 <_fflush_r>
 800432a:	2800      	cmp	r0, #0
 800432c:	d1f6      	bne.n	800431c <__swbuf_r+0x58>
 800432e:	68a3      	ldr	r3, [r4, #8]
 8004330:	3b01      	subs	r3, #1
 8004332:	60a3      	str	r3, [r4, #8]
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	6022      	str	r2, [r4, #0]
 800433a:	701f      	strb	r7, [r3, #0]
 800433c:	6962      	ldr	r2, [r4, #20]
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <__swbuf_r+0x8a>
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	07db      	lsls	r3, r3, #31
 8004348:	d507      	bpl.n	800435a <__swbuf_r+0x96>
 800434a:	2d0a      	cmp	r5, #10
 800434c:	d105      	bne.n	800435a <__swbuf_r+0x96>
 800434e:	4621      	mov	r1, r4
 8004350:	4630      	mov	r0, r6
 8004352:	f000 ff31 	bl	80051b8 <_fflush_r>
 8004356:	2800      	cmp	r0, #0
 8004358:	d1e0      	bne.n	800431c <__swbuf_r+0x58>
 800435a:	4628      	mov	r0, r5
 800435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800435e:	bf00      	nop
 8004360:	08006dd8 	.word	0x08006dd8
 8004364:	08006df8 	.word	0x08006df8
 8004368:	08006e18 	.word	0x08006e18

0800436c <__swsetup_r>:
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <__swsetup_r+0xc8>)
 800436e:	b570      	push	{r4, r5, r6, lr}
 8004370:	681d      	ldr	r5, [r3, #0]
 8004372:	4606      	mov	r6, r0
 8004374:	460c      	mov	r4, r1
 8004376:	b125      	cbz	r5, 8004382 <__swsetup_r+0x16>
 8004378:	69ab      	ldr	r3, [r5, #24]
 800437a:	b913      	cbnz	r3, 8004382 <__swsetup_r+0x16>
 800437c:	4628      	mov	r0, r5
 800437e:	f000 ff85 	bl	800528c <__sinit>
 8004382:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <__swsetup_r+0xcc>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d101      	bne.n	800438c <__swsetup_r+0x20>
 8004388:	686c      	ldr	r4, [r5, #4]
 800438a:	e008      	b.n	800439e <__swsetup_r+0x32>
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <__swsetup_r+0xd0>)
 800438e:	429c      	cmp	r4, r3
 8004390:	d101      	bne.n	8004396 <__swsetup_r+0x2a>
 8004392:	68ac      	ldr	r4, [r5, #8]
 8004394:	e003      	b.n	800439e <__swsetup_r+0x32>
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <__swsetup_r+0xd4>)
 8004398:	429c      	cmp	r4, r3
 800439a:	bf08      	it	eq
 800439c:	68ec      	ldreq	r4, [r5, #12]
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	0711      	lsls	r1, r2, #28
 80043a4:	d41d      	bmi.n	80043e2 <__swsetup_r+0x76>
 80043a6:	06d5      	lsls	r5, r2, #27
 80043a8:	d402      	bmi.n	80043b0 <__swsetup_r+0x44>
 80043aa:	2209      	movs	r2, #9
 80043ac:	6032      	str	r2, [r6, #0]
 80043ae:	e038      	b.n	8004422 <__swsetup_r+0xb6>
 80043b0:	0750      	lsls	r0, r2, #29
 80043b2:	d512      	bpl.n	80043da <__swsetup_r+0x6e>
 80043b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b6:	b141      	cbz	r1, 80043ca <__swsetup_r+0x5e>
 80043b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043bc:	4299      	cmp	r1, r3
 80043be:	d002      	beq.n	80043c6 <__swsetup_r+0x5a>
 80043c0:	4630      	mov	r0, r6
 80043c2:	f001 ff63 	bl	800628c <_free_r>
 80043c6:	2300      	movs	r3, #0
 80043c8:	6363      	str	r3, [r4, #52]	; 0x34
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	2300      	movs	r3, #0
 80043d4:	6063      	str	r3, [r4, #4]
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	f043 0308 	orr.w	r3, r3, #8
 80043e0:	81a3      	strh	r3, [r4, #12]
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	b94b      	cbnz	r3, 80043fa <__swsetup_r+0x8e>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d003      	beq.n	80043fa <__swsetup_r+0x8e>
 80043f2:	4621      	mov	r1, r4
 80043f4:	4630      	mov	r0, r6
 80043f6:	f001 faf5 	bl	80059e4 <__smakebuf_r>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	f013 0201 	ands.w	r2, r3, #1
 8004400:	d005      	beq.n	800440e <__swsetup_r+0xa2>
 8004402:	2200      	movs	r2, #0
 8004404:	60a2      	str	r2, [r4, #8]
 8004406:	6962      	ldr	r2, [r4, #20]
 8004408:	4252      	negs	r2, r2
 800440a:	61a2      	str	r2, [r4, #24]
 800440c:	e003      	b.n	8004416 <__swsetup_r+0xaa>
 800440e:	0799      	lsls	r1, r3, #30
 8004410:	bf58      	it	pl
 8004412:	6962      	ldrpl	r2, [r4, #20]
 8004414:	60a2      	str	r2, [r4, #8]
 8004416:	6922      	ldr	r2, [r4, #16]
 8004418:	b94a      	cbnz	r2, 800442e <__swsetup_r+0xc2>
 800441a:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800441e:	b280      	uxth	r0, r0
 8004420:	b130      	cbz	r0, 8004430 <__swsetup_r+0xc4>
 8004422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	2000      	movs	r0, #0
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	bf00      	nop
 8004434:	20000064 	.word	0x20000064
 8004438:	08006dd8 	.word	0x08006dd8
 800443c:	08006df8 	.word	0x08006df8
 8004440:	08006e18 	.word	0x08006e18

08004444 <quorem>:
 8004444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004448:	6903      	ldr	r3, [r0, #16]
 800444a:	690c      	ldr	r4, [r1, #16]
 800444c:	429c      	cmp	r4, r3
 800444e:	4680      	mov	r8, r0
 8004450:	f300 8083 	bgt.w	800455a <quorem+0x116>
 8004454:	3c01      	subs	r4, #1
 8004456:	f101 0714 	add.w	r7, r1, #20
 800445a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800445e:	f100 0614 	add.w	r6, r0, #20
 8004462:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004466:	eb06 030e 	add.w	r3, r6, lr
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	3501      	adds	r5, #1
 800446e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8004472:	fbb3 f5f5 	udiv	r5, r3, r5
 8004476:	eb07 090e 	add.w	r9, r7, lr
 800447a:	2d00      	cmp	r5, #0
 800447c:	d039      	beq.n	80044f2 <quorem+0xae>
 800447e:	f04f 0a00 	mov.w	sl, #0
 8004482:	4638      	mov	r0, r7
 8004484:	46b4      	mov	ip, r6
 8004486:	46d3      	mov	fp, sl
 8004488:	f850 2b04 	ldr.w	r2, [r0], #4
 800448c:	b293      	uxth	r3, r2
 800448e:	fb05 a303 	mla	r3, r5, r3, sl
 8004492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004496:	b29b      	uxth	r3, r3
 8004498:	ebc3 030b 	rsb	r3, r3, fp
 800449c:	0c12      	lsrs	r2, r2, #16
 800449e:	f8bc b000 	ldrh.w	fp, [ip]
 80044a2:	fb05 a202 	mla	r2, r5, r2, sl
 80044a6:	fa13 f38b 	uxtah	r3, r3, fp
 80044aa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80044ae:	fa1f fb82 	uxth.w	fp, r2
 80044b2:	f8dc 2000 	ldr.w	r2, [ip]
 80044b6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80044ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044be:	b29b      	uxth	r3, r3
 80044c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044c4:	4581      	cmp	r9, r0
 80044c6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80044ca:	f84c 3b04 	str.w	r3, [ip], #4
 80044ce:	d2db      	bcs.n	8004488 <quorem+0x44>
 80044d0:	f856 300e 	ldr.w	r3, [r6, lr]
 80044d4:	b96b      	cbnz	r3, 80044f2 <quorem+0xae>
 80044d6:	9b01      	ldr	r3, [sp, #4]
 80044d8:	3b04      	subs	r3, #4
 80044da:	429e      	cmp	r6, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	d302      	bcc.n	80044e6 <quorem+0xa2>
 80044e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80044e4:	e005      	b.n	80044f2 <quorem+0xae>
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d1f8      	bne.n	80044e0 <quorem+0x9c>
 80044ee:	3c01      	subs	r4, #1
 80044f0:	e7f3      	b.n	80044da <quorem+0x96>
 80044f2:	4640      	mov	r0, r8
 80044f4:	f001 fd17 	bl	8005f26 <__mcmp>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	db2c      	blt.n	8004556 <quorem+0x112>
 80044fc:	3501      	adds	r5, #1
 80044fe:	4630      	mov	r0, r6
 8004500:	f04f 0e00 	mov.w	lr, #0
 8004504:	f857 1b04 	ldr.w	r1, [r7], #4
 8004508:	f8d0 c000 	ldr.w	ip, [r0]
 800450c:	b28a      	uxth	r2, r1
 800450e:	ebc2 030e 	rsb	r3, r2, lr
 8004512:	0c09      	lsrs	r1, r1, #16
 8004514:	fa13 f38c 	uxtah	r3, r3, ip
 8004518:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800451c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004520:	b29b      	uxth	r3, r3
 8004522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004526:	45b9      	cmp	r9, r7
 8004528:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800452c:	f840 3b04 	str.w	r3, [r0], #4
 8004530:	d2e8      	bcs.n	8004504 <quorem+0xc0>
 8004532:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004536:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800453a:	b962      	cbnz	r2, 8004556 <quorem+0x112>
 800453c:	3b04      	subs	r3, #4
 800453e:	429e      	cmp	r6, r3
 8004540:	461a      	mov	r2, r3
 8004542:	d302      	bcc.n	800454a <quorem+0x106>
 8004544:	f8c8 4010 	str.w	r4, [r8, #16]
 8004548:	e005      	b.n	8004556 <quorem+0x112>
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	3b04      	subs	r3, #4
 800454e:	2a00      	cmp	r2, #0
 8004550:	d1f8      	bne.n	8004544 <quorem+0x100>
 8004552:	3c01      	subs	r4, #1
 8004554:	e7f3      	b.n	800453e <quorem+0xfa>
 8004556:	4628      	mov	r0, r5
 8004558:	e000      	b.n	800455c <quorem+0x118>
 800455a:	2000      	movs	r0, #0
 800455c:	b003      	add	sp, #12
 800455e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004562:	0000      	movs	r0, r0
 8004564:	0000      	movs	r0, r0
	...

08004568 <_dtoa_r>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	ec59 8b10 	vmov	r8, r9, d0
 8004570:	b097      	sub	sp, #92	; 0x5c
 8004572:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004574:	9106      	str	r1, [sp, #24]
 8004576:	4682      	mov	sl, r0
 8004578:	9209      	str	r2, [sp, #36]	; 0x24
 800457a:	9310      	str	r3, [sp, #64]	; 0x40
 800457c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800457e:	e9cd 8900 	strd	r8, r9, [sp]
 8004582:	b945      	cbnz	r5, 8004596 <_dtoa_r+0x2e>
 8004584:	2010      	movs	r0, #16
 8004586:	f001 fa7b 	bl	8005a80 <malloc>
 800458a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800458e:	6045      	str	r5, [r0, #4]
 8004590:	6085      	str	r5, [r0, #8]
 8004592:	6005      	str	r5, [r0, #0]
 8004594:	60c5      	str	r5, [r0, #12]
 8004596:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	b159      	cbz	r1, 80045b6 <_dtoa_r+0x4e>
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	604a      	str	r2, [r1, #4]
 80045a2:	2301      	movs	r3, #1
 80045a4:	4093      	lsls	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]
 80045a8:	4650      	mov	r0, sl
 80045aa:	f001 faa6 	bl	8005afa <_Bfree>
 80045ae:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	4a9f      	ldr	r2, [pc, #636]	; (8004838 <_dtoa_r+0x2d0>)
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bfbf      	itttt	lt
 80045be:	2301      	movlt	r3, #1
 80045c0:	6023      	strlt	r3, [r4, #0]
 80045c2:	9b01      	ldrlt	r3, [sp, #4]
 80045c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045c8:	bfb8      	it	lt
 80045ca:	9301      	strlt	r3, [sp, #4]
 80045cc:	9f01      	ldr	r7, [sp, #4]
 80045ce:	bfa4      	itt	ge
 80045d0:	2300      	movge	r3, #0
 80045d2:	6023      	strge	r3, [r4, #0]
 80045d4:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80045d8:	0d1b      	lsrs	r3, r3, #20
 80045da:	051b      	lsls	r3, r3, #20
 80045dc:	4293      	cmp	r3, r2
 80045de:	d11d      	bne.n	800461c <_dtoa_r+0xb4>
 80045e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	9b00      	ldr	r3, [sp, #0]
 80045ea:	b943      	cbnz	r3, 80045fe <_dtoa_r+0x96>
 80045ec:	4a93      	ldr	r2, [pc, #588]	; (800483c <_dtoa_r+0x2d4>)
 80045ee:	4b94      	ldr	r3, [pc, #592]	; (8004840 <_dtoa_r+0x2d8>)
 80045f0:	f3c7 0013 	ubfx	r0, r7, #0, #20
 80045f4:	2800      	cmp	r0, #0
 80045f6:	bf14      	ite	ne
 80045f8:	4618      	movne	r0, r3
 80045fa:	4610      	moveq	r0, r2
 80045fc:	e000      	b.n	8004600 <_dtoa_r+0x98>
 80045fe:	4890      	ldr	r0, [pc, #576]	; (8004840 <_dtoa_r+0x2d8>)
 8004600:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 854a 	beq.w	800509c <_dtoa_r+0xb34>
 8004608:	78c3      	ldrb	r3, [r0, #3]
 800460a:	b113      	cbz	r3, 8004612 <_dtoa_r+0xaa>
 800460c:	f100 0308 	add.w	r3, r0, #8
 8004610:	e000      	b.n	8004614 <_dtoa_r+0xac>
 8004612:	1cc3      	adds	r3, r0, #3
 8004614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	f000 bd40 	b.w	800509c <_dtoa_r+0xb34>
 800461c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004620:	2200      	movs	r2, #0
 8004622:	2300      	movs	r3, #0
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7fc faa2 	bl	8000b70 <__aeabi_dcmpeq>
 800462c:	4680      	mov	r8, r0
 800462e:	b158      	cbz	r0, 8004648 <_dtoa_r+0xe0>
 8004630:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004632:	2301      	movs	r3, #1
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8522 	beq.w	8005082 <_dtoa_r+0xb1a>
 800463e:	4881      	ldr	r0, [pc, #516]	; (8004844 <_dtoa_r+0x2dc>)
 8004640:	6018      	str	r0, [r3, #0]
 8004642:	3801      	subs	r0, #1
 8004644:	f000 bd2a 	b.w	800509c <_dtoa_r+0xb34>
 8004648:	aa14      	add	r2, sp, #80	; 0x50
 800464a:	a915      	add	r1, sp, #84	; 0x54
 800464c:	ec45 4b10 	vmov	d0, r4, r5
 8004650:	4650      	mov	r0, sl
 8004652:	f001 fd58 	bl	8006106 <__d2b>
 8004656:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800465a:	9002      	str	r0, [sp, #8]
 800465c:	b15e      	cbz	r6, 8004676 <_dtoa_r+0x10e>
 800465e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004662:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004666:	4620      	mov	r0, r4
 8004668:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800466c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8004670:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8004674:	e01d      	b.n	80046b2 <_dtoa_r+0x14a>
 8004676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004678:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800467a:	441e      	add	r6, r3
 800467c:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8004680:	2b20      	cmp	r3, #32
 8004682:	dd0a      	ble.n	800469a <_dtoa_r+0x132>
 8004684:	9a00      	ldr	r2, [sp, #0]
 8004686:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800468a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800468e:	fa22 f000 	lsr.w	r0, r2, r0
 8004692:	fa07 f303 	lsl.w	r3, r7, r3
 8004696:	4318      	orrs	r0, r3
 8004698:	e004      	b.n	80046a4 <_dtoa_r+0x13c>
 800469a:	f1c3 0020 	rsb	r0, r3, #32
 800469e:	9b00      	ldr	r3, [sp, #0]
 80046a0:	fa03 f000 	lsl.w	r0, r3, r0
 80046a4:	f7fb ff86 	bl	80005b4 <__aeabi_ui2d>
 80046a8:	2301      	movs	r3, #1
 80046aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80046ae:	3e01      	subs	r6, #1
 80046b0:	9311      	str	r3, [sp, #68]	; 0x44
 80046b2:	2200      	movs	r2, #0
 80046b4:	4b64      	ldr	r3, [pc, #400]	; (8004848 <_dtoa_r+0x2e0>)
 80046b6:	f7fb fe3f 	bl	8000338 <__aeabi_dsub>
 80046ba:	a359      	add	r3, pc, #356	; (adr r3, 8004820 <_dtoa_r+0x2b8>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f7fb ffee 	bl	80006a0 <__aeabi_dmul>
 80046c4:	a358      	add	r3, pc, #352	; (adr r3, 8004828 <_dtoa_r+0x2c0>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb fe37 	bl	800033c <__adddf3>
 80046ce:	4604      	mov	r4, r0
 80046d0:	4630      	mov	r0, r6
 80046d2:	460d      	mov	r5, r1
 80046d4:	f7fb ff7e 	bl	80005d4 <__aeabi_i2d>
 80046d8:	a355      	add	r3, pc, #340	; (adr r3, 8004830 <_dtoa_r+0x2c8>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fb ffdf 	bl	80006a0 <__aeabi_dmul>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4620      	mov	r0, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7fb fe27 	bl	800033c <__adddf3>
 80046ee:	4604      	mov	r4, r0
 80046f0:	460d      	mov	r5, r1
 80046f2:	f7fc fa6f 	bl	8000bd4 <__aeabi_d2iz>
 80046f6:	2200      	movs	r2, #0
 80046f8:	4683      	mov	fp, r0
 80046fa:	2300      	movs	r3, #0
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	f7fc fa40 	bl	8000b84 <__aeabi_dcmplt>
 8004704:	b158      	cbz	r0, 800471e <_dtoa_r+0x1b6>
 8004706:	4658      	mov	r0, fp
 8004708:	f7fb ff64 	bl	80005d4 <__aeabi_i2d>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4620      	mov	r0, r4
 8004712:	4629      	mov	r1, r5
 8004714:	f7fc fa2c 	bl	8000b70 <__aeabi_dcmpeq>
 8004718:	b908      	cbnz	r0, 800471e <_dtoa_r+0x1b6>
 800471a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800471e:	f1bb 0f16 	cmp.w	fp, #22
 8004722:	d80d      	bhi.n	8004740 <_dtoa_r+0x1d8>
 8004724:	4949      	ldr	r1, [pc, #292]	; (800484c <_dtoa_r+0x2e4>)
 8004726:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800472a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800472e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004732:	f7fc fa45 	bl	8000bc0 <__aeabi_dcmpgt>
 8004736:	b130      	cbz	r0, 8004746 <_dtoa_r+0x1de>
 8004738:	f10b 3bff 	add.w	fp, fp, #4294967295
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <_dtoa_r+0x1da>
 8004740:	2301      	movs	r3, #1
 8004742:	930d      	str	r3, [sp, #52]	; 0x34
 8004744:	e000      	b.n	8004748 <_dtoa_r+0x1e0>
 8004746:	900d      	str	r0, [sp, #52]	; 0x34
 8004748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800474a:	1b9e      	subs	r6, r3, r6
 800474c:	1e73      	subs	r3, r6, #1
 800474e:	9305      	str	r3, [sp, #20]
 8004750:	bf43      	ittte	mi
 8004752:	f1c3 0900 	rsbmi	r9, r3, #0
 8004756:	2300      	movmi	r3, #0
 8004758:	9305      	strmi	r3, [sp, #20]
 800475a:	f04f 0900 	movpl.w	r9, #0
 800475e:	f1bb 0f00 	cmp.w	fp, #0
 8004762:	db07      	blt.n	8004774 <_dtoa_r+0x20c>
 8004764:	9b05      	ldr	r3, [sp, #20]
 8004766:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800476a:	445b      	add	r3, fp
 800476c:	9305      	str	r3, [sp, #20]
 800476e:	2300      	movs	r3, #0
 8004770:	9307      	str	r3, [sp, #28]
 8004772:	e006      	b.n	8004782 <_dtoa_r+0x21a>
 8004774:	f1cb 0300 	rsb	r3, fp, #0
 8004778:	9307      	str	r3, [sp, #28]
 800477a:	2300      	movs	r3, #0
 800477c:	ebcb 0909 	rsb	r9, fp, r9
 8004780:	930c      	str	r3, [sp, #48]	; 0x30
 8004782:	9b06      	ldr	r3, [sp, #24]
 8004784:	2b09      	cmp	r3, #9
 8004786:	d827      	bhi.n	80047d8 <_dtoa_r+0x270>
 8004788:	2b05      	cmp	r3, #5
 800478a:	bfc4      	itt	gt
 800478c:	3b04      	subgt	r3, #4
 800478e:	9306      	strgt	r3, [sp, #24]
 8004790:	9b06      	ldr	r3, [sp, #24]
 8004792:	f1a3 0302 	sub.w	r3, r3, #2
 8004796:	bfcc      	ite	gt
 8004798:	2500      	movgt	r5, #0
 800479a:	2501      	movle	r5, #1
 800479c:	2b03      	cmp	r3, #3
 800479e:	d820      	bhi.n	80047e2 <_dtoa_r+0x27a>
 80047a0:	e8df f003 	tbb	[pc, r3]
 80047a4:	04020e06 	.word	0x04020e06
 80047a8:	2301      	movs	r3, #1
 80047aa:	e002      	b.n	80047b2 <_dtoa_r+0x24a>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e008      	b.n	80047c2 <_dtoa_r+0x25a>
 80047b0:	2300      	movs	r3, #0
 80047b2:	9308      	str	r3, [sp, #32]
 80047b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dd1c      	ble.n	80047f4 <_dtoa_r+0x28c>
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	4698      	mov	r8, r3
 80047be:	e01e      	b.n	80047fe <_dtoa_r+0x296>
 80047c0:	2300      	movs	r3, #0
 80047c2:	9308      	str	r3, [sp, #32]
 80047c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c6:	445b      	add	r3, fp
 80047c8:	f103 0801 	add.w	r8, r3, #1
 80047cc:	9303      	str	r3, [sp, #12]
 80047ce:	4643      	mov	r3, r8
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bfb8      	it	lt
 80047d4:	2301      	movlt	r3, #1
 80047d6:	e012      	b.n	80047fe <_dtoa_r+0x296>
 80047d8:	2501      	movs	r5, #1
 80047da:	2300      	movs	r3, #0
 80047dc:	9306      	str	r3, [sp, #24]
 80047de:	9508      	str	r5, [sp, #32]
 80047e0:	e001      	b.n	80047e6 <_dtoa_r+0x27e>
 80047e2:	2301      	movs	r3, #1
 80047e4:	9308      	str	r3, [sp, #32]
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	9303      	str	r3, [sp, #12]
 80047ec:	4698      	mov	r8, r3
 80047ee:	2200      	movs	r2, #0
 80047f0:	2312      	movs	r3, #18
 80047f2:	e003      	b.n	80047fc <_dtoa_r+0x294>
 80047f4:	2301      	movs	r3, #1
 80047f6:	9303      	str	r3, [sp, #12]
 80047f8:	4698      	mov	r8, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	9209      	str	r2, [sp, #36]	; 0x24
 80047fe:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004802:	2200      	movs	r2, #0
 8004804:	6062      	str	r2, [r4, #4]
 8004806:	2104      	movs	r1, #4
 8004808:	f101 0214 	add.w	r2, r1, #20
 800480c:	429a      	cmp	r2, r3
 800480e:	d81f      	bhi.n	8004850 <_dtoa_r+0x2e8>
 8004810:	6862      	ldr	r2, [r4, #4]
 8004812:	3201      	adds	r2, #1
 8004814:	6062      	str	r2, [r4, #4]
 8004816:	0049      	lsls	r1, r1, #1
 8004818:	e7f6      	b.n	8004808 <_dtoa_r+0x2a0>
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w
 8004820:	636f4361 	.word	0x636f4361
 8004824:	3fd287a7 	.word	0x3fd287a7
 8004828:	8b60c8b3 	.word	0x8b60c8b3
 800482c:	3fc68a28 	.word	0x3fc68a28
 8004830:	509f79fb 	.word	0x509f79fb
 8004834:	3fd34413 	.word	0x3fd34413
 8004838:	7ff00000 	.word	0x7ff00000
 800483c:	08006dc9 	.word	0x08006dc9
 8004840:	08006dd2 	.word	0x08006dd2
 8004844:	08006c49 	.word	0x08006c49
 8004848:	3ff80000 	.word	0x3ff80000
 800484c:	08006e40 	.word	0x08006e40
 8004850:	6861      	ldr	r1, [r4, #4]
 8004852:	4650      	mov	r0, sl
 8004854:	f001 f91c 	bl	8005a90 <_Balloc>
 8004858:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800485c:	6020      	str	r0, [r4, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	f1b8 0f0e 	cmp.w	r8, #14
 8004866:	f200 815d 	bhi.w	8004b24 <_dtoa_r+0x5bc>
 800486a:	2d00      	cmp	r5, #0
 800486c:	f000 815a 	beq.w	8004b24 <_dtoa_r+0x5bc>
 8004870:	ed9d 7b00 	vldr	d7, [sp]
 8004874:	f1bb 0f00 	cmp.w	fp, #0
 8004878:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800487c:	dd31      	ble.n	80048e2 <_dtoa_r+0x37a>
 800487e:	4aa0      	ldr	r2, [pc, #640]	; (8004b00 <_dtoa_r+0x598>)
 8004880:	f00b 030f 	and.w	r3, fp, #15
 8004884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004888:	ed93 7b00 	vldr	d7, [r3]
 800488c:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004890:	06e2      	lsls	r2, r4, #27
 8004892:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004896:	d50c      	bpl.n	80048b2 <_dtoa_r+0x34a>
 8004898:	4b9a      	ldr	r3, [pc, #616]	; (8004b04 <_dtoa_r+0x59c>)
 800489a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800489e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048a2:	f7fc f827 	bl	80008f4 <__aeabi_ddiv>
 80048a6:	f004 040f 	and.w	r4, r4, #15
 80048aa:	e9cd 0100 	strd	r0, r1, [sp]
 80048ae:	2603      	movs	r6, #3
 80048b0:	e000      	b.n	80048b4 <_dtoa_r+0x34c>
 80048b2:	2602      	movs	r6, #2
 80048b4:	4d93      	ldr	r5, [pc, #588]	; (8004b04 <_dtoa_r+0x59c>)
 80048b6:	b16c      	cbz	r4, 80048d4 <_dtoa_r+0x36c>
 80048b8:	07e3      	lsls	r3, r4, #31
 80048ba:	d508      	bpl.n	80048ce <_dtoa_r+0x366>
 80048bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048c4:	f7fb feec 	bl	80006a0 <__aeabi_dmul>
 80048c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048cc:	3601      	adds	r6, #1
 80048ce:	1064      	asrs	r4, r4, #1
 80048d0:	3508      	adds	r5, #8
 80048d2:	e7f0      	b.n	80048b6 <_dtoa_r+0x34e>
 80048d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048dc:	f7fc f80a 	bl	80008f4 <__aeabi_ddiv>
 80048e0:	e020      	b.n	8004924 <_dtoa_r+0x3bc>
 80048e2:	f1cb 0400 	rsb	r4, fp, #0
 80048e6:	b304      	cbz	r4, 800492a <_dtoa_r+0x3c2>
 80048e8:	4b85      	ldr	r3, [pc, #532]	; (8004b00 <_dtoa_r+0x598>)
 80048ea:	4d86      	ldr	r5, [pc, #536]	; (8004b04 <_dtoa_r+0x59c>)
 80048ec:	f004 020f 	and.w	r2, r4, #15
 80048f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80048fc:	f7fb fed0 	bl	80006a0 <__aeabi_dmul>
 8004900:	e9cd 0100 	strd	r0, r1, [sp]
 8004904:	1124      	asrs	r4, r4, #4
 8004906:	2300      	movs	r3, #0
 8004908:	2602      	movs	r6, #2
 800490a:	b154      	cbz	r4, 8004922 <_dtoa_r+0x3ba>
 800490c:	07e7      	lsls	r7, r4, #31
 800490e:	d505      	bpl.n	800491c <_dtoa_r+0x3b4>
 8004910:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004914:	f7fb fec4 	bl	80006a0 <__aeabi_dmul>
 8004918:	3601      	adds	r6, #1
 800491a:	2301      	movs	r3, #1
 800491c:	1064      	asrs	r4, r4, #1
 800491e:	3508      	adds	r5, #8
 8004920:	e7f3      	b.n	800490a <_dtoa_r+0x3a2>
 8004922:	b11b      	cbz	r3, 800492c <_dtoa_r+0x3c4>
 8004924:	e9cd 0100 	strd	r0, r1, [sp]
 8004928:	e000      	b.n	800492c <_dtoa_r+0x3c4>
 800492a:	2602      	movs	r6, #2
 800492c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800492e:	b1eb      	cbz	r3, 800496c <_dtoa_r+0x404>
 8004930:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004934:	2200      	movs	r2, #0
 8004936:	4b74      	ldr	r3, [pc, #464]	; (8004b08 <_dtoa_r+0x5a0>)
 8004938:	4620      	mov	r0, r4
 800493a:	4629      	mov	r1, r5
 800493c:	f7fc f922 	bl	8000b84 <__aeabi_dcmplt>
 8004940:	b1a0      	cbz	r0, 800496c <_dtoa_r+0x404>
 8004942:	f1b8 0f00 	cmp.w	r8, #0
 8004946:	d011      	beq.n	800496c <_dtoa_r+0x404>
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f340 80e6 	ble.w	8004b1c <_dtoa_r+0x5b4>
 8004950:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004954:	930a      	str	r3, [sp, #40]	; 0x28
 8004956:	2200      	movs	r2, #0
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <_dtoa_r+0x5a4>)
 800495a:	4620      	mov	r0, r4
 800495c:	4629      	mov	r1, r5
 800495e:	f7fb fe9f 	bl	80006a0 <__aeabi_dmul>
 8004962:	3601      	adds	r6, #1
 8004964:	e9cd 0100 	strd	r0, r1, [sp]
 8004968:	9f03      	ldr	r7, [sp, #12]
 800496a:	e002      	b.n	8004972 <_dtoa_r+0x40a>
 800496c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004970:	4647      	mov	r7, r8
 8004972:	4630      	mov	r0, r6
 8004974:	f7fb fe2e 	bl	80005d4 <__aeabi_i2d>
 8004978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800497c:	f7fb fe90 	bl	80006a0 <__aeabi_dmul>
 8004980:	2200      	movs	r2, #0
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <_dtoa_r+0x5a8>)
 8004984:	f7fb fcda 	bl	800033c <__adddf3>
 8004988:	4604      	mov	r4, r0
 800498a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800498e:	b9cf      	cbnz	r7, 80049c4 <_dtoa_r+0x45c>
 8004990:	2200      	movs	r2, #0
 8004992:	4b60      	ldr	r3, [pc, #384]	; (8004b14 <_dtoa_r+0x5ac>)
 8004994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004998:	f7fb fcce 	bl	8000338 <__aeabi_dsub>
 800499c:	4622      	mov	r2, r4
 800499e:	462b      	mov	r3, r5
 80049a0:	e9cd 0100 	strd	r0, r1, [sp]
 80049a4:	f7fc f90c 	bl	8000bc0 <__aeabi_dcmpgt>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	f040 8241 	bne.w	8004e30 <_dtoa_r+0x8c8>
 80049ae:	4622      	mov	r2, r4
 80049b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80049b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049b8:	f7fc f8e4 	bl	8000b84 <__aeabi_dcmplt>
 80049bc:	2800      	cmp	r0, #0
 80049be:	f040 822e 	bne.w	8004e1e <_dtoa_r+0x8b6>
 80049c2:	e0ab      	b.n	8004b1c <_dtoa_r+0x5b4>
 80049c4:	9a08      	ldr	r2, [sp, #32]
 80049c6:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <_dtoa_r+0x598>)
 80049c8:	1e79      	subs	r1, r7, #1
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d04a      	beq.n	8004a64 <_dtoa_r+0x4fc>
 80049ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	2000      	movs	r0, #0
 80049d8:	494f      	ldr	r1, [pc, #316]	; (8004b18 <_dtoa_r+0x5b0>)
 80049da:	f7fb ff8b 	bl	80008f4 <__aeabi_ddiv>
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	f7fb fca9 	bl	8000338 <__aeabi_dsub>
 80049e6:	9c04      	ldr	r4, [sp, #16]
 80049e8:	4605      	mov	r5, r0
 80049ea:	460e      	mov	r6, r1
 80049ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049f0:	f7fc f8f0 	bl	8000bd4 <__aeabi_d2iz>
 80049f4:	9012      	str	r0, [sp, #72]	; 0x48
 80049f6:	f7fb fded 	bl	80005d4 <__aeabi_i2d>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a02:	f7fb fc99 	bl	8000338 <__aeabi_dsub>
 8004a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a08:	3330      	adds	r3, #48	; 0x30
 8004a0a:	f804 3b01 	strb.w	r3, [r4], #1
 8004a0e:	462a      	mov	r2, r5
 8004a10:	4633      	mov	r3, r6
 8004a12:	e9cd 0100 	strd	r0, r1, [sp]
 8004a16:	f7fc f8b5 	bl	8000b84 <__aeabi_dcmplt>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f040 8321 	bne.w	8005062 <_dtoa_r+0xafa>
 8004a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a24:	2000      	movs	r0, #0
 8004a26:	4938      	ldr	r1, [pc, #224]	; (8004b08 <_dtoa_r+0x5a0>)
 8004a28:	f7fb fc86 	bl	8000338 <__aeabi_dsub>
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4633      	mov	r3, r6
 8004a30:	f7fc f8a8 	bl	8000b84 <__aeabi_dcmplt>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f040 80d2 	bne.w	8004bde <_dtoa_r+0x676>
 8004a3a:	9b04      	ldr	r3, [sp, #16]
 8004a3c:	1ae3      	subs	r3, r4, r3
 8004a3e:	42bb      	cmp	r3, r7
 8004a40:	da6c      	bge.n	8004b1c <_dtoa_r+0x5b4>
 8004a42:	2200      	movs	r2, #0
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <_dtoa_r+0x5a4>)
 8004a46:	4628      	mov	r0, r5
 8004a48:	4631      	mov	r1, r6
 8004a4a:	f7fb fe29 	bl	80006a0 <__aeabi_dmul>
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4605      	mov	r5, r0
 8004a52:	460e      	mov	r6, r1
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <_dtoa_r+0x5a4>)
 8004a56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a5a:	f7fb fe21 	bl	80006a0 <__aeabi_dmul>
 8004a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8004a62:	e7c3      	b.n	80049ec <_dtoa_r+0x484>
 8004a64:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004a68:	4622      	mov	r2, r4
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a70:	f7fb fe16 	bl	80006a0 <__aeabi_dmul>
 8004a74:	9b04      	ldr	r3, [sp, #16]
 8004a76:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004a7a:	19dc      	adds	r4, r3, r7
 8004a7c:	461d      	mov	r5, r3
 8004a7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a82:	f7fc f8a7 	bl	8000bd4 <__aeabi_d2iz>
 8004a86:	4606      	mov	r6, r0
 8004a88:	f7fb fda4 	bl	80005d4 <__aeabi_i2d>
 8004a8c:	3630      	adds	r6, #48	; 0x30
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a96:	f7fb fc4f 	bl	8000338 <__aeabi_dsub>
 8004a9a:	f805 6b01 	strb.w	r6, [r5], #1
 8004a9e:	42ac      	cmp	r4, r5
 8004aa0:	e9cd 0100 	strd	r0, r1, [sp]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	d123      	bne.n	8004af2 <_dtoa_r+0x58a>
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <_dtoa_r+0x5b0>)
 8004aac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004ab0:	f7fb fc44 	bl	800033c <__adddf3>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004abc:	f7fc f880 	bl	8000bc0 <__aeabi_dcmpgt>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f040 808c 	bne.w	8004bde <_dtoa_r+0x676>
 8004ac6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004aca:	2000      	movs	r0, #0
 8004acc:	4912      	ldr	r1, [pc, #72]	; (8004b18 <_dtoa_r+0x5b0>)
 8004ace:	f7fb fc33 	bl	8000338 <__aeabi_dsub>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ada:	f7fc f853 	bl	8000b84 <__aeabi_dcmplt>
 8004ade:	b1e8      	cbz	r0, 8004b1c <_dtoa_r+0x5b4>
 8004ae0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004ae4:	2b30      	cmp	r3, #48	; 0x30
 8004ae6:	f104 32ff 	add.w	r2, r4, #4294967295
 8004aea:	f040 82ba 	bne.w	8005062 <_dtoa_r+0xafa>
 8004aee:	4614      	mov	r4, r2
 8004af0:	e7f6      	b.n	8004ae0 <_dtoa_r+0x578>
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <_dtoa_r+0x5a4>)
 8004af4:	f7fb fdd4 	bl	80006a0 <__aeabi_dmul>
 8004af8:	e9cd 0100 	strd	r0, r1, [sp]
 8004afc:	e7bf      	b.n	8004a7e <_dtoa_r+0x516>
 8004afe:	bf00      	nop
 8004b00:	08006e40 	.word	0x08006e40
 8004b04:	08006f08 	.word	0x08006f08
 8004b08:	3ff00000 	.word	0x3ff00000
 8004b0c:	40240000 	.word	0x40240000
 8004b10:	401c0000 	.word	0x401c0000
 8004b14:	40140000 	.word	0x40140000
 8004b18:	3fe00000 	.word	0x3fe00000
 8004b1c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8004b20:	e9cd 3400 	strd	r3, r4, [sp]
 8004b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	db7c      	blt.n	8004c24 <_dtoa_r+0x6bc>
 8004b2a:	f1bb 0f0e 	cmp.w	fp, #14
 8004b2e:	dc79      	bgt.n	8004c24 <_dtoa_r+0x6bc>
 8004b30:	4b8f      	ldr	r3, [pc, #572]	; (8004d70 <_dtoa_r+0x808>)
 8004b32:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b36:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da14      	bge.n	8004b6a <_dtoa_r+0x602>
 8004b40:	f1b8 0f00 	cmp.w	r8, #0
 8004b44:	dc11      	bgt.n	8004b6a <_dtoa_r+0x602>
 8004b46:	f040 816c 	bne.w	8004e22 <_dtoa_r+0x8ba>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4b89      	ldr	r3, [pc, #548]	; (8004d74 <_dtoa_r+0x80c>)
 8004b4e:	4630      	mov	r0, r6
 8004b50:	4639      	mov	r1, r7
 8004b52:	f7fb fda5 	bl	80006a0 <__aeabi_dmul>
 8004b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b5a:	f7fc f827 	bl	8000bac <__aeabi_dcmpge>
 8004b5e:	4645      	mov	r5, r8
 8004b60:	4646      	mov	r6, r8
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f040 815f 	bne.w	8004e26 <_dtoa_r+0x8be>
 8004b68:	e166      	b.n	8004e38 <_dtoa_r+0x8d0>
 8004b6a:	9c04      	ldr	r4, [sp, #16]
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	463b      	mov	r3, r7
 8004b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b74:	f7fb febe 	bl	80008f4 <__aeabi_ddiv>
 8004b78:	f7fc f82c 	bl	8000bd4 <__aeabi_d2iz>
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	f7fb fd29 	bl	80005d4 <__aeabi_i2d>
 8004b82:	4632      	mov	r2, r6
 8004b84:	463b      	mov	r3, r7
 8004b86:	f7fb fd8b 	bl	80006a0 <__aeabi_dmul>
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b92:	f7fb fbd1 	bl	8000338 <__aeabi_dsub>
 8004b96:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8004b9a:	f804 eb01 	strb.w	lr, [r4], #1
 8004b9e:	9b04      	ldr	r3, [sp, #16]
 8004ba0:	ebc3 0e04 	rsb	lr, r3, r4
 8004ba4:	45f0      	cmp	r8, lr
 8004ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8004baa:	d12e      	bne.n	8004c0a <_dtoa_r+0x6a2>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	f7fb fbc4 	bl	800033c <__adddf3>
 8004bb4:	4680      	mov	r8, r0
 8004bb6:	4689      	mov	r9, r1
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb ffe0 	bl	8000b84 <__aeabi_dcmplt>
 8004bc4:	b978      	cbnz	r0, 8004be6 <_dtoa_r+0x67e>
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	464b      	mov	r3, r9
 8004bca:	4630      	mov	r0, r6
 8004bcc:	4639      	mov	r1, r7
 8004bce:	f7fb ffcf 	bl	8000b70 <__aeabi_dcmpeq>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f000 8247 	beq.w	8005066 <_dtoa_r+0xafe>
 8004bd8:	07e9      	lsls	r1, r5, #31
 8004bda:	d404      	bmi.n	8004be6 <_dtoa_r+0x67e>
 8004bdc:	e243      	b.n	8005066 <_dtoa_r+0xafe>
 8004bde:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004be2:	e000      	b.n	8004be6 <_dtoa_r+0x67e>
 8004be4:	461c      	mov	r4, r3
 8004be6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8004bea:	2a39      	cmp	r2, #57	; 0x39
 8004bec:	f104 33ff 	add.w	r3, r4, #4294967295
 8004bf0:	d107      	bne.n	8004c02 <_dtoa_r+0x69a>
 8004bf2:	9a04      	ldr	r2, [sp, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d1f5      	bne.n	8004be4 <_dtoa_r+0x67c>
 8004bf8:	9904      	ldr	r1, [sp, #16]
 8004bfa:	2230      	movs	r2, #48	; 0x30
 8004bfc:	f10b 0b01 	add.w	fp, fp, #1
 8004c00:	700a      	strb	r2, [r1, #0]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	3201      	adds	r2, #1
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e22d      	b.n	8005066 <_dtoa_r+0xafe>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4b5a      	ldr	r3, [pc, #360]	; (8004d78 <_dtoa_r+0x810>)
 8004c0e:	f7fb fd47 	bl	80006a0 <__aeabi_dmul>
 8004c12:	2200      	movs	r2, #0
 8004c14:	2300      	movs	r3, #0
 8004c16:	e9cd 0100 	strd	r0, r1, [sp]
 8004c1a:	f7fb ffa9 	bl	8000b70 <__aeabi_dcmpeq>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d0a4      	beq.n	8004b6c <_dtoa_r+0x604>
 8004c22:	e220      	b.n	8005066 <_dtoa_r+0xafe>
 8004c24:	9a08      	ldr	r2, [sp, #32]
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	d02d      	beq.n	8004c86 <_dtoa_r+0x71e>
 8004c2a:	9a06      	ldr	r2, [sp, #24]
 8004c2c:	2a01      	cmp	r2, #1
 8004c2e:	dc0a      	bgt.n	8004c46 <_dtoa_r+0x6de>
 8004c30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c32:	b112      	cbz	r2, 8004c3a <_dtoa_r+0x6d2>
 8004c34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c38:	e002      	b.n	8004c40 <_dtoa_r+0x6d8>
 8004c3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c3c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c40:	9d07      	ldr	r5, [sp, #28]
 8004c42:	464c      	mov	r4, r9
 8004c44:	e015      	b.n	8004c72 <_dtoa_r+0x70a>
 8004c46:	9b07      	ldr	r3, [sp, #28]
 8004c48:	f108 35ff 	add.w	r5, r8, #4294967295
 8004c4c:	42ab      	cmp	r3, r5
 8004c4e:	bfbf      	itttt	lt
 8004c50:	9b07      	ldrlt	r3, [sp, #28]
 8004c52:	9507      	strlt	r5, [sp, #28]
 8004c54:	1aea      	sublt	r2, r5, r3
 8004c56:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004c58:	bfb7      	itett	lt
 8004c5a:	189b      	addlt	r3, r3, r2
 8004c5c:	1b5d      	subge	r5, r3, r5
 8004c5e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004c60:	2500      	movlt	r5, #0
 8004c62:	f1b8 0f00 	cmp.w	r8, #0
 8004c66:	bfb9      	ittee	lt
 8004c68:	ebc8 0409 	rsblt	r4, r8, r9
 8004c6c:	2300      	movlt	r3, #0
 8004c6e:	464c      	movge	r4, r9
 8004c70:	4643      	movge	r3, r8
 8004c72:	9a05      	ldr	r2, [sp, #20]
 8004c74:	2101      	movs	r1, #1
 8004c76:	441a      	add	r2, r3
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4499      	add	r9, r3
 8004c7c:	9205      	str	r2, [sp, #20]
 8004c7e:	f001 f819 	bl	8005cb4 <__i2b>
 8004c82:	4606      	mov	r6, r0
 8004c84:	e002      	b.n	8004c8c <_dtoa_r+0x724>
 8004c86:	9d07      	ldr	r5, [sp, #28]
 8004c88:	9e08      	ldr	r6, [sp, #32]
 8004c8a:	464c      	mov	r4, r9
 8004c8c:	b15c      	cbz	r4, 8004ca6 <_dtoa_r+0x73e>
 8004c8e:	9b05      	ldr	r3, [sp, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	dd08      	ble.n	8004ca6 <_dtoa_r+0x73e>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	9a05      	ldr	r2, [sp, #20]
 8004c98:	bfa8      	it	ge
 8004c9a:	4623      	movge	r3, r4
 8004c9c:	ebc3 0909 	rsb	r9, r3, r9
 8004ca0:	1ae4      	subs	r4, r4, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	9305      	str	r3, [sp, #20]
 8004ca6:	9b07      	ldr	r3, [sp, #28]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dd1d      	ble.n	8004ce8 <_dtoa_r+0x780>
 8004cac:	9b08      	ldr	r3, [sp, #32]
 8004cae:	b1ab      	cbz	r3, 8004cdc <_dtoa_r+0x774>
 8004cb0:	b185      	cbz	r5, 8004cd4 <_dtoa_r+0x76c>
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f001 f896 	bl	8005de8 <__pow5mult>
 8004cbc:	9a02      	ldr	r2, [sp, #8]
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	f000 ffff 	bl	8005cc6 <__multiply>
 8004cc8:	9902      	ldr	r1, [sp, #8]
 8004cca:	4607      	mov	r7, r0
 8004ccc:	4650      	mov	r0, sl
 8004cce:	f000 ff14 	bl	8005afa <_Bfree>
 8004cd2:	9702      	str	r7, [sp, #8]
 8004cd4:	9b07      	ldr	r3, [sp, #28]
 8004cd6:	1b5a      	subs	r2, r3, r5
 8004cd8:	d006      	beq.n	8004ce8 <_dtoa_r+0x780>
 8004cda:	e000      	b.n	8004cde <_dtoa_r+0x776>
 8004cdc:	9a07      	ldr	r2, [sp, #28]
 8004cde:	9902      	ldr	r1, [sp, #8]
 8004ce0:	4650      	mov	r0, sl
 8004ce2:	f001 f881 	bl	8005de8 <__pow5mult>
 8004ce6:	9002      	str	r0, [sp, #8]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	4650      	mov	r0, sl
 8004cec:	f000 ffe2 	bl	8005cb4 <__i2b>
 8004cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	b35b      	cbz	r3, 8004d4e <_dtoa_r+0x7e6>
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	4650      	mov	r0, sl
 8004cfc:	f001 f874 	bl	8005de8 <__pow5mult>
 8004d00:	9b06      	ldr	r3, [sp, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	4605      	mov	r5, r0
 8004d06:	dc18      	bgt.n	8004d3a <_dtoa_r+0x7d2>
 8004d08:	9b00      	ldr	r3, [sp, #0]
 8004d0a:	b983      	cbnz	r3, 8004d2e <_dtoa_r+0x7c6>
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d12:	b973      	cbnz	r3, 8004d32 <_dtoa_r+0x7ca>
 8004d14:	9b01      	ldr	r3, [sp, #4]
 8004d16:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8004d1a:	0d3f      	lsrs	r7, r7, #20
 8004d1c:	053f      	lsls	r7, r7, #20
 8004d1e:	b14f      	cbz	r7, 8004d34 <_dtoa_r+0x7cc>
 8004d20:	9b05      	ldr	r3, [sp, #20]
 8004d22:	3301      	adds	r3, #1
 8004d24:	f109 0901 	add.w	r9, r9, #1
 8004d28:	9305      	str	r3, [sp, #20]
 8004d2a:	2701      	movs	r7, #1
 8004d2c:	e002      	b.n	8004d34 <_dtoa_r+0x7cc>
 8004d2e:	2700      	movs	r7, #0
 8004d30:	e000      	b.n	8004d34 <_dtoa_r+0x7cc>
 8004d32:	9f00      	ldr	r7, [sp, #0]
 8004d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d36:	b173      	cbz	r3, 8004d56 <_dtoa_r+0x7ee>
 8004d38:	e000      	b.n	8004d3c <_dtoa_r+0x7d4>
 8004d3a:	2700      	movs	r7, #0
 8004d3c:	692b      	ldr	r3, [r5, #16]
 8004d3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d42:	6918      	ldr	r0, [r3, #16]
 8004d44:	f000 ff69 	bl	8005c1a <__hi0bits>
 8004d48:	f1c0 0020 	rsb	r0, r0, #32
 8004d4c:	e004      	b.n	8004d58 <_dtoa_r+0x7f0>
 8004d4e:	9b06      	ldr	r3, [sp, #24]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	ddd9      	ble.n	8004d08 <_dtoa_r+0x7a0>
 8004d54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004d56:	2001      	movs	r0, #1
 8004d58:	9b05      	ldr	r3, [sp, #20]
 8004d5a:	4418      	add	r0, r3
 8004d5c:	f010 001f 	ands.w	r0, r0, #31
 8004d60:	d00e      	beq.n	8004d80 <_dtoa_r+0x818>
 8004d62:	f1c0 0320 	rsb	r3, r0, #32
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	dd08      	ble.n	8004d7c <_dtoa_r+0x814>
 8004d6a:	f1c0 001c 	rsb	r0, r0, #28
 8004d6e:	e008      	b.n	8004d82 <_dtoa_r+0x81a>
 8004d70:	08006e40 	.word	0x08006e40
 8004d74:	40140000 	.word	0x40140000
 8004d78:	40240000 	.word	0x40240000
 8004d7c:	d006      	beq.n	8004d8c <_dtoa_r+0x824>
 8004d7e:	4618      	mov	r0, r3
 8004d80:	301c      	adds	r0, #28
 8004d82:	9b05      	ldr	r3, [sp, #20]
 8004d84:	4403      	add	r3, r0
 8004d86:	4481      	add	r9, r0
 8004d88:	4404      	add	r4, r0
 8004d8a:	9305      	str	r3, [sp, #20]
 8004d8c:	f1b9 0f00 	cmp.w	r9, #0
 8004d90:	dd05      	ble.n	8004d9e <_dtoa_r+0x836>
 8004d92:	464a      	mov	r2, r9
 8004d94:	9902      	ldr	r1, [sp, #8]
 8004d96:	4650      	mov	r0, sl
 8004d98:	f001 f874 	bl	8005e84 <__lshift>
 8004d9c:	9002      	str	r0, [sp, #8]
 8004d9e:	9b05      	ldr	r3, [sp, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	dd05      	ble.n	8004db0 <_dtoa_r+0x848>
 8004da4:	4629      	mov	r1, r5
 8004da6:	461a      	mov	r2, r3
 8004da8:	4650      	mov	r0, sl
 8004daa:	f001 f86b 	bl	8005e84 <__lshift>
 8004dae:	4605      	mov	r5, r0
 8004db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db2:	b1eb      	cbz	r3, 8004df0 <_dtoa_r+0x888>
 8004db4:	4629      	mov	r1, r5
 8004db6:	9802      	ldr	r0, [sp, #8]
 8004db8:	f001 f8b5 	bl	8005f26 <__mcmp>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	da17      	bge.n	8004df0 <_dtoa_r+0x888>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	220a      	movs	r2, #10
 8004dc4:	9902      	ldr	r1, [sp, #8]
 8004dc6:	4650      	mov	r0, sl
 8004dc8:	f000 feae 	bl	8005b28 <__multadd>
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	9002      	str	r0, [sp, #8]
 8004dd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8158 	beq.w	800508a <_dtoa_r+0xb22>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	4631      	mov	r1, r6
 8004dde:	220a      	movs	r2, #10
 8004de0:	4650      	mov	r0, sl
 8004de2:	f000 fea1 	bl	8005b28 <__multadd>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	4606      	mov	r6, r0
 8004dec:	dc37      	bgt.n	8004e5e <_dtoa_r+0x8f6>
 8004dee:	e033      	b.n	8004e58 <_dtoa_r+0x8f0>
 8004df0:	f1b8 0f00 	cmp.w	r8, #0
 8004df4:	dc2a      	bgt.n	8004e4c <_dtoa_r+0x8e4>
 8004df6:	9b06      	ldr	r3, [sp, #24]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	dd27      	ble.n	8004e4c <_dtoa_r+0x8e4>
 8004dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	b983      	cbnz	r3, 8004e26 <_dtoa_r+0x8be>
 8004e04:	4629      	mov	r1, r5
 8004e06:	2205      	movs	r2, #5
 8004e08:	4650      	mov	r0, sl
 8004e0a:	f000 fe8d 	bl	8005b28 <__multadd>
 8004e0e:	4601      	mov	r1, r0
 8004e10:	4605      	mov	r5, r0
 8004e12:	9802      	ldr	r0, [sp, #8]
 8004e14:	f001 f887 	bl	8005f26 <__mcmp>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	dc0d      	bgt.n	8004e38 <_dtoa_r+0x8d0>
 8004e1c:	e003      	b.n	8004e26 <_dtoa_r+0x8be>
 8004e1e:	463d      	mov	r5, r7
 8004e20:	e000      	b.n	8004e24 <_dtoa_r+0x8bc>
 8004e22:	2500      	movs	r5, #0
 8004e24:	462e      	mov	r6, r5
 8004e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e28:	9c04      	ldr	r4, [sp, #16]
 8004e2a:	ea6f 0b03 	mvn.w	fp, r3
 8004e2e:	e00a      	b.n	8004e46 <_dtoa_r+0x8de>
 8004e30:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004e34:	463d      	mov	r5, r7
 8004e36:	463e      	mov	r6, r7
 8004e38:	9b04      	ldr	r3, [sp, #16]
 8004e3a:	9a04      	ldr	r2, [sp, #16]
 8004e3c:	1c5c      	adds	r4, r3, #1
 8004e3e:	2331      	movs	r3, #49	; 0x31
 8004e40:	7013      	strb	r3, [r2, #0]
 8004e42:	f10b 0b01 	add.w	fp, fp, #1
 8004e46:	46b0      	mov	r8, r6
 8004e48:	2600      	movs	r6, #0
 8004e4a:	e0f7      	b.n	800503c <_dtoa_r+0xad4>
 8004e4c:	9b08      	ldr	r3, [sp, #32]
 8004e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e52:	b923      	cbnz	r3, 8004e5e <_dtoa_r+0x8f6>
 8004e54:	9c04      	ldr	r4, [sp, #16]
 8004e56:	e0b1      	b.n	8004fbc <_dtoa_r+0xa54>
 8004e58:	9b06      	ldr	r3, [sp, #24]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	dcd0      	bgt.n	8004e00 <_dtoa_r+0x898>
 8004e5e:	2c00      	cmp	r4, #0
 8004e60:	dd05      	ble.n	8004e6e <_dtoa_r+0x906>
 8004e62:	4631      	mov	r1, r6
 8004e64:	4622      	mov	r2, r4
 8004e66:	4650      	mov	r0, sl
 8004e68:	f001 f80c 	bl	8005e84 <__lshift>
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	b19f      	cbz	r7, 8004e98 <_dtoa_r+0x930>
 8004e70:	6871      	ldr	r1, [r6, #4]
 8004e72:	4650      	mov	r0, sl
 8004e74:	f000 fe0c 	bl	8005a90 <_Balloc>
 8004e78:	6932      	ldr	r2, [r6, #16]
 8004e7a:	3202      	adds	r2, #2
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	f106 010c 	add.w	r1, r6, #12
 8004e84:	300c      	adds	r0, #12
 8004e86:	f7fd fb55 	bl	8002534 <memcpy>
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4650      	mov	r0, sl
 8004e90:	f000 fff8 	bl	8005e84 <__lshift>
 8004e94:	4680      	mov	r8, r0
 8004e96:	e000      	b.n	8004e9a <_dtoa_r+0x932>
 8004e98:	46b0      	mov	r8, r6
 8004e9a:	9b00      	ldr	r3, [sp, #0]
 8004e9c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	9305      	str	r3, [sp, #20]
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	9802      	ldr	r0, [sp, #8]
 8004eaa:	f7ff facb 	bl	8004444 <quorem>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004eb6:	9802      	ldr	r0, [sp, #8]
 8004eb8:	f001 f835 	bl	8005f26 <__mcmp>
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	9000      	str	r0, [sp, #0]
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4650      	mov	r0, sl
 8004ec4:	f001 f84b 	bl	8005f5e <__mdiff>
 8004ec8:	68c3      	ldr	r3, [r0, #12]
 8004eca:	4602      	mov	r2, r0
 8004ecc:	b93b      	cbnz	r3, 8004ede <_dtoa_r+0x976>
 8004ece:	4601      	mov	r1, r0
 8004ed0:	9007      	str	r0, [sp, #28]
 8004ed2:	9802      	ldr	r0, [sp, #8]
 8004ed4:	f001 f827 	bl	8005f26 <__mcmp>
 8004ed8:	9a07      	ldr	r2, [sp, #28]
 8004eda:	4603      	mov	r3, r0
 8004edc:	e000      	b.n	8004ee0 <_dtoa_r+0x978>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	9307      	str	r3, [sp, #28]
 8004ee6:	f000 fe08 	bl	8005afa <_Bfree>
 8004eea:	9b07      	ldr	r3, [sp, #28]
 8004eec:	b94b      	cbnz	r3, 8004f02 <_dtoa_r+0x99a>
 8004eee:	9a06      	ldr	r2, [sp, #24]
 8004ef0:	b93a      	cbnz	r2, 8004f02 <_dtoa_r+0x99a>
 8004ef2:	9a05      	ldr	r2, [sp, #20]
 8004ef4:	b92a      	cbnz	r2, 8004f02 <_dtoa_r+0x99a>
 8004ef6:	2f39      	cmp	r7, #57	; 0x39
 8004ef8:	d028      	beq.n	8004f4c <_dtoa_r+0x9e4>
 8004efa:	9b00      	ldr	r3, [sp, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dc1a      	bgt.n	8004f36 <_dtoa_r+0x9ce>
 8004f00:	e01b      	b.n	8004f3a <_dtoa_r+0x9d2>
 8004f02:	9a00      	ldr	r2, [sp, #0]
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	db04      	blt.n	8004f12 <_dtoa_r+0x9aa>
 8004f08:	d11a      	bne.n	8004f40 <_dtoa_r+0x9d8>
 8004f0a:	9a06      	ldr	r2, [sp, #24]
 8004f0c:	b9c2      	cbnz	r2, 8004f40 <_dtoa_r+0x9d8>
 8004f0e:	9a05      	ldr	r2, [sp, #20]
 8004f10:	b9b2      	cbnz	r2, 8004f40 <_dtoa_r+0x9d8>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dd11      	ble.n	8004f3a <_dtoa_r+0x9d2>
 8004f16:	2201      	movs	r2, #1
 8004f18:	9902      	ldr	r1, [sp, #8]
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f000 ffb2 	bl	8005e84 <__lshift>
 8004f20:	4629      	mov	r1, r5
 8004f22:	9002      	str	r0, [sp, #8]
 8004f24:	f000 ffff 	bl	8005f26 <__mcmp>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	dc02      	bgt.n	8004f32 <_dtoa_r+0x9ca>
 8004f2c:	d105      	bne.n	8004f3a <_dtoa_r+0x9d2>
 8004f2e:	07fa      	lsls	r2, r7, #31
 8004f30:	d503      	bpl.n	8004f3a <_dtoa_r+0x9d2>
 8004f32:	2f39      	cmp	r7, #57	; 0x39
 8004f34:	d00a      	beq.n	8004f4c <_dtoa_r+0x9e4>
 8004f36:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8004f3a:	f109 0401 	add.w	r4, r9, #1
 8004f3e:	e00c      	b.n	8004f5a <_dtoa_r+0x9f2>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f109 0401 	add.w	r4, r9, #1
 8004f46:	dd0b      	ble.n	8004f60 <_dtoa_r+0x9f8>
 8004f48:	2f39      	cmp	r7, #57	; 0x39
 8004f4a:	d105      	bne.n	8004f58 <_dtoa_r+0x9f0>
 8004f4c:	2339      	movs	r3, #57	; 0x39
 8004f4e:	f889 3000 	strb.w	r3, [r9]
 8004f52:	f109 0901 	add.w	r9, r9, #1
 8004f56:	e054      	b.n	8005002 <_dtoa_r+0xa9a>
 8004f58:	3701      	adds	r7, #1
 8004f5a:	f889 7000 	strb.w	r7, [r9]
 8004f5e:	e06d      	b.n	800503c <_dtoa_r+0xad4>
 8004f60:	9b04      	ldr	r3, [sp, #16]
 8004f62:	9a03      	ldr	r2, [sp, #12]
 8004f64:	f804 7c01 	strb.w	r7, [r4, #-1]
 8004f68:	1ae3      	subs	r3, r4, r3
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	46a1      	mov	r9, r4
 8004f6e:	d03a      	beq.n	8004fe6 <_dtoa_r+0xa7e>
 8004f70:	2300      	movs	r3, #0
 8004f72:	220a      	movs	r2, #10
 8004f74:	9902      	ldr	r1, [sp, #8]
 8004f76:	4650      	mov	r0, sl
 8004f78:	f000 fdd6 	bl	8005b28 <__multadd>
 8004f7c:	4546      	cmp	r6, r8
 8004f7e:	9002      	str	r0, [sp, #8]
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f04f 020a 	mov.w	r2, #10
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	d104      	bne.n	8004f98 <_dtoa_r+0xa30>
 8004f8e:	f000 fdcb 	bl	8005b28 <__multadd>
 8004f92:	4606      	mov	r6, r0
 8004f94:	4680      	mov	r8, r0
 8004f96:	e786      	b.n	8004ea6 <_dtoa_r+0x93e>
 8004f98:	f000 fdc6 	bl	8005b28 <__multadd>
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	220a      	movs	r2, #10
 8004fa4:	4650      	mov	r0, sl
 8004fa6:	f000 fdbf 	bl	8005b28 <__multadd>
 8004faa:	4680      	mov	r8, r0
 8004fac:	e77b      	b.n	8004ea6 <_dtoa_r+0x93e>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	220a      	movs	r2, #10
 8004fb2:	9902      	ldr	r1, [sp, #8]
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	f000 fdb7 	bl	8005b28 <__multadd>
 8004fba:	9002      	str	r0, [sp, #8]
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	9802      	ldr	r0, [sp, #8]
 8004fc0:	f7ff fa40 	bl	8004444 <quorem>
 8004fc4:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004fc8:	f804 7b01 	strb.w	r7, [r4], #1
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	9a03      	ldr	r2, [sp, #12]
 8004fd0:	1ae3      	subs	r3, r4, r3
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	dbeb      	blt.n	8004fae <_dtoa_r+0xa46>
 8004fd6:	9b04      	ldr	r3, [sp, #16]
 8004fd8:	2a01      	cmp	r2, #1
 8004fda:	bfac      	ite	ge
 8004fdc:	189b      	addge	r3, r3, r2
 8004fde:	3301      	addlt	r3, #1
 8004fe0:	46b0      	mov	r8, r6
 8004fe2:	4699      	mov	r9, r3
 8004fe4:	2600      	movs	r6, #0
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	9902      	ldr	r1, [sp, #8]
 8004fea:	4650      	mov	r0, sl
 8004fec:	f000 ff4a 	bl	8005e84 <__lshift>
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	9002      	str	r0, [sp, #8]
 8004ff4:	f000 ff97 	bl	8005f26 <__mcmp>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	dc02      	bgt.n	8005002 <_dtoa_r+0xa9a>
 8004ffc:	d115      	bne.n	800502a <_dtoa_r+0xac2>
 8004ffe:	07fb      	lsls	r3, r7, #31
 8005000:	d513      	bpl.n	800502a <_dtoa_r+0xac2>
 8005002:	464c      	mov	r4, r9
 8005004:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005008:	2b39      	cmp	r3, #57	; 0x39
 800500a:	f104 32ff 	add.w	r2, r4, #4294967295
 800500e:	d109      	bne.n	8005024 <_dtoa_r+0xabc>
 8005010:	9b04      	ldr	r3, [sp, #16]
 8005012:	4293      	cmp	r3, r2
 8005014:	d104      	bne.n	8005020 <_dtoa_r+0xab8>
 8005016:	f10b 0b01 	add.w	fp, fp, #1
 800501a:	2331      	movs	r3, #49	; 0x31
 800501c:	9a04      	ldr	r2, [sp, #16]
 800501e:	e002      	b.n	8005026 <_dtoa_r+0xabe>
 8005020:	4614      	mov	r4, r2
 8005022:	e7ef      	b.n	8005004 <_dtoa_r+0xa9c>
 8005024:	3301      	adds	r3, #1
 8005026:	7013      	strb	r3, [r2, #0]
 8005028:	e008      	b.n	800503c <_dtoa_r+0xad4>
 800502a:	464c      	mov	r4, r9
 800502c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005030:	2b30      	cmp	r3, #48	; 0x30
 8005032:	f104 32ff 	add.w	r2, r4, #4294967295
 8005036:	d101      	bne.n	800503c <_dtoa_r+0xad4>
 8005038:	4614      	mov	r4, r2
 800503a:	e7f7      	b.n	800502c <_dtoa_r+0xac4>
 800503c:	4629      	mov	r1, r5
 800503e:	4650      	mov	r0, sl
 8005040:	f000 fd5b 	bl	8005afa <_Bfree>
 8005044:	f1b8 0f00 	cmp.w	r8, #0
 8005048:	d00d      	beq.n	8005066 <_dtoa_r+0xafe>
 800504a:	b12e      	cbz	r6, 8005058 <_dtoa_r+0xaf0>
 800504c:	4546      	cmp	r6, r8
 800504e:	d003      	beq.n	8005058 <_dtoa_r+0xaf0>
 8005050:	4631      	mov	r1, r6
 8005052:	4650      	mov	r0, sl
 8005054:	f000 fd51 	bl	8005afa <_Bfree>
 8005058:	4641      	mov	r1, r8
 800505a:	4650      	mov	r0, sl
 800505c:	f000 fd4d 	bl	8005afa <_Bfree>
 8005060:	e001      	b.n	8005066 <_dtoa_r+0xafe>
 8005062:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005066:	9902      	ldr	r1, [sp, #8]
 8005068:	4650      	mov	r0, sl
 800506a:	f000 fd46 	bl	8005afa <_Bfree>
 800506e:	2300      	movs	r3, #0
 8005070:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005072:	7023      	strb	r3, [r4, #0]
 8005074:	f10b 0301 	add.w	r3, fp, #1
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800507c:	b11b      	cbz	r3, 8005086 <_dtoa_r+0xb1e>
 800507e:	601c      	str	r4, [r3, #0]
 8005080:	e001      	b.n	8005086 <_dtoa_r+0xb1e>
 8005082:	4808      	ldr	r0, [pc, #32]	; (80050a4 <_dtoa_r+0xb3c>)
 8005084:	e00a      	b.n	800509c <_dtoa_r+0xb34>
 8005086:	9804      	ldr	r0, [sp, #16]
 8005088:	e008      	b.n	800509c <_dtoa_r+0xb34>
 800508a:	9b03      	ldr	r3, [sp, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f73f aee1 	bgt.w	8004e54 <_dtoa_r+0x8ec>
 8005092:	9b06      	ldr	r3, [sp, #24]
 8005094:	2b02      	cmp	r3, #2
 8005096:	f77f aedd 	ble.w	8004e54 <_dtoa_r+0x8ec>
 800509a:	e6b1      	b.n	8004e00 <_dtoa_r+0x898>
 800509c:	b017      	add	sp, #92	; 0x5c
 800509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a2:	bf00      	nop
 80050a4:	08006c48 	.word	0x08006c48

080050a8 <__sflush_r>:
 80050a8:	898a      	ldrh	r2, [r1, #12]
 80050aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ae:	4605      	mov	r5, r0
 80050b0:	0710      	lsls	r0, r2, #28
 80050b2:	460c      	mov	r4, r1
 80050b4:	d459      	bmi.n	800516a <__sflush_r+0xc2>
 80050b6:	684b      	ldr	r3, [r1, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dc02      	bgt.n	80050c2 <__sflush_r+0x1a>
 80050bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dd17      	ble.n	80050f2 <__sflush_r+0x4a>
 80050c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050c4:	b1ae      	cbz	r6, 80050f2 <__sflush_r+0x4a>
 80050c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050ca:	2300      	movs	r3, #0
 80050cc:	b292      	uxth	r2, r2
 80050ce:	682f      	ldr	r7, [r5, #0]
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	b10a      	cbz	r2, 80050d8 <__sflush_r+0x30>
 80050d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050d6:	e015      	b.n	8005104 <__sflush_r+0x5c>
 80050d8:	6a21      	ldr	r1, [r4, #32]
 80050da:	2301      	movs	r3, #1
 80050dc:	4628      	mov	r0, r5
 80050de:	47b0      	blx	r6
 80050e0:	1c41      	adds	r1, r0, #1
 80050e2:	d10f      	bne.n	8005104 <__sflush_r+0x5c>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	b16b      	cbz	r3, 8005104 <__sflush_r+0x5c>
 80050e8:	2b1d      	cmp	r3, #29
 80050ea:	d001      	beq.n	80050f0 <__sflush_r+0x48>
 80050ec:	2b16      	cmp	r3, #22
 80050ee:	d103      	bne.n	80050f8 <__sflush_r+0x50>
 80050f0:	602f      	str	r7, [r5, #0]
 80050f2:	2000      	movs	r0, #0
 80050f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	075a      	lsls	r2, r3, #29
 8005108:	d505      	bpl.n	8005116 <__sflush_r+0x6e>
 800510a:	6863      	ldr	r3, [r4, #4]
 800510c:	1ac0      	subs	r0, r0, r3
 800510e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005110:	b10b      	cbz	r3, 8005116 <__sflush_r+0x6e>
 8005112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005114:	1ac0      	subs	r0, r0, r3
 8005116:	2300      	movs	r3, #0
 8005118:	4602      	mov	r2, r0
 800511a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800511c:	6a21      	ldr	r1, [r4, #32]
 800511e:	4628      	mov	r0, r5
 8005120:	47b0      	blx	r6
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	d106      	bne.n	8005136 <__sflush_r+0x8e>
 8005128:	6829      	ldr	r1, [r5, #0]
 800512a:	291d      	cmp	r1, #29
 800512c:	d83a      	bhi.n	80051a4 <__sflush_r+0xfc>
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <__sflush_r+0x10c>)
 8005130:	40ca      	lsrs	r2, r1
 8005132:	07d6      	lsls	r6, r2, #31
 8005134:	d536      	bpl.n	80051a4 <__sflush_r+0xfc>
 8005136:	2200      	movs	r2, #0
 8005138:	6062      	str	r2, [r4, #4]
 800513a:	04d9      	lsls	r1, r3, #19
 800513c:	6922      	ldr	r2, [r4, #16]
 800513e:	6022      	str	r2, [r4, #0]
 8005140:	d504      	bpl.n	800514c <__sflush_r+0xa4>
 8005142:	1c42      	adds	r2, r0, #1
 8005144:	d101      	bne.n	800514a <__sflush_r+0xa2>
 8005146:	682b      	ldr	r3, [r5, #0]
 8005148:	b903      	cbnz	r3, 800514c <__sflush_r+0xa4>
 800514a:	6560      	str	r0, [r4, #84]	; 0x54
 800514c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800514e:	602f      	str	r7, [r5, #0]
 8005150:	2900      	cmp	r1, #0
 8005152:	d0ce      	beq.n	80050f2 <__sflush_r+0x4a>
 8005154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005158:	4299      	cmp	r1, r3
 800515a:	d002      	beq.n	8005162 <__sflush_r+0xba>
 800515c:	4628      	mov	r0, r5
 800515e:	f001 f895 	bl	800628c <_free_r>
 8005162:	2000      	movs	r0, #0
 8005164:	6360      	str	r0, [r4, #52]	; 0x34
 8005166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800516a:	690f      	ldr	r7, [r1, #16]
 800516c:	2f00      	cmp	r7, #0
 800516e:	d0c0      	beq.n	80050f2 <__sflush_r+0x4a>
 8005170:	0793      	lsls	r3, r2, #30
 8005172:	680e      	ldr	r6, [r1, #0]
 8005174:	bf08      	it	eq
 8005176:	694b      	ldreq	r3, [r1, #20]
 8005178:	600f      	str	r7, [r1, #0]
 800517a:	bf18      	it	ne
 800517c:	2300      	movne	r3, #0
 800517e:	ebc7 0806 	rsb	r8, r7, r6
 8005182:	608b      	str	r3, [r1, #8]
 8005184:	e002      	b.n	800518c <__sflush_r+0xe4>
 8005186:	4407      	add	r7, r0
 8005188:	ebc0 0808 	rsb	r8, r0, r8
 800518c:	f1b8 0f00 	cmp.w	r8, #0
 8005190:	ddaf      	ble.n	80050f2 <__sflush_r+0x4a>
 8005192:	4643      	mov	r3, r8
 8005194:	463a      	mov	r2, r7
 8005196:	6a21      	ldr	r1, [r4, #32]
 8005198:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800519a:	4628      	mov	r0, r5
 800519c:	47b0      	blx	r6
 800519e:	2800      	cmp	r0, #0
 80051a0:	dcf1      	bgt.n	8005186 <__sflush_r+0xde>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a8:	81a3      	strh	r3, [r4, #12]
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b2:	bf00      	nop
 80051b4:	20400001 	.word	0x20400001

080051b8 <_fflush_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	4605      	mov	r5, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	b1db      	cbz	r3, 80051fa <_fflush_r+0x42>
 80051c2:	b118      	cbz	r0, 80051cc <_fflush_r+0x14>
 80051c4:	6983      	ldr	r3, [r0, #24]
 80051c6:	b90b      	cbnz	r3, 80051cc <_fflush_r+0x14>
 80051c8:	f000 f860 	bl	800528c <__sinit>
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <_fflush_r+0x48>)
 80051ce:	429c      	cmp	r4, r3
 80051d0:	d101      	bne.n	80051d6 <_fflush_r+0x1e>
 80051d2:	686c      	ldr	r4, [r5, #4]
 80051d4:	e008      	b.n	80051e8 <_fflush_r+0x30>
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <_fflush_r+0x4c>)
 80051d8:	429c      	cmp	r4, r3
 80051da:	d101      	bne.n	80051e0 <_fflush_r+0x28>
 80051dc:	68ac      	ldr	r4, [r5, #8]
 80051de:	e003      	b.n	80051e8 <_fflush_r+0x30>
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <_fflush_r+0x50>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	bf08      	it	eq
 80051e6:	68ec      	ldreq	r4, [r5, #12]
 80051e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ec:	b12b      	cbz	r3, 80051fa <_fflush_r+0x42>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051f6:	f7ff bf57 	b.w	80050a8 <__sflush_r>
 80051fa:	2000      	movs	r0, #0
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	bf00      	nop
 8005200:	08006dd8 	.word	0x08006dd8
 8005204:	08006df8 	.word	0x08006df8
 8005208:	08006e18 	.word	0x08006e18

0800520c <_cleanup_r>:
 800520c:	4901      	ldr	r1, [pc, #4]	; (8005214 <_cleanup_r+0x8>)
 800520e:	f000 b8a9 	b.w	8005364 <_fwalk_reent>
 8005212:	bf00      	nop
 8005214:	080051b9 	.word	0x080051b9

08005218 <std.isra.0>:
 8005218:	2300      	movs	r3, #0
 800521a:	b510      	push	{r4, lr}
 800521c:	4604      	mov	r4, r0
 800521e:	6003      	str	r3, [r0, #0]
 8005220:	6043      	str	r3, [r0, #4]
 8005222:	6083      	str	r3, [r0, #8]
 8005224:	8181      	strh	r1, [r0, #12]
 8005226:	6643      	str	r3, [r0, #100]	; 0x64
 8005228:	81c2      	strh	r2, [r0, #14]
 800522a:	6103      	str	r3, [r0, #16]
 800522c:	6143      	str	r3, [r0, #20]
 800522e:	6183      	str	r3, [r0, #24]
 8005230:	4619      	mov	r1, r3
 8005232:	2208      	movs	r2, #8
 8005234:	305c      	adds	r0, #92	; 0x5c
 8005236:	f7fd f988 	bl	800254a <memset>
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <std.isra.0+0x38>)
 800523c:	6263      	str	r3, [r4, #36]	; 0x24
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <std.isra.0+0x3c>)
 8005240:	62a3      	str	r3, [r4, #40]	; 0x28
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <std.isra.0+0x40>)
 8005244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <std.isra.0+0x44>)
 8005248:	6224      	str	r4, [r4, #32]
 800524a:	6323      	str	r3, [r4, #48]	; 0x30
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	08006909 	.word	0x08006909
 8005254:	0800692b 	.word	0x0800692b
 8005258:	08006963 	.word	0x08006963
 800525c:	08006987 	.word	0x08006987

08005260 <__sfmoreglue>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	2368      	movs	r3, #104	; 0x68
 8005264:	1e4d      	subs	r5, r1, #1
 8005266:	435d      	muls	r5, r3
 8005268:	460e      	mov	r6, r1
 800526a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800526e:	f001 f853 	bl	8006318 <_malloc_r>
 8005272:	4604      	mov	r4, r0
 8005274:	b140      	cbz	r0, 8005288 <__sfmoreglue+0x28>
 8005276:	2100      	movs	r1, #0
 8005278:	e880 0042 	stmia.w	r0, {r1, r6}
 800527c:	300c      	adds	r0, #12
 800527e:	60a0      	str	r0, [r4, #8]
 8005280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005284:	f7fd f961 	bl	800254a <memset>
 8005288:	4620      	mov	r0, r4
 800528a:	bd70      	pop	{r4, r5, r6, pc}

0800528c <__sinit>:
 800528c:	6983      	ldr	r3, [r0, #24]
 800528e:	b510      	push	{r4, lr}
 8005290:	4604      	mov	r4, r0
 8005292:	bb33      	cbnz	r3, 80052e2 <__sinit+0x56>
 8005294:	6483      	str	r3, [r0, #72]	; 0x48
 8005296:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005298:	6503      	str	r3, [r0, #80]	; 0x50
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <__sinit+0x58>)
 800529c:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <__sinit+0x5c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6282      	str	r2, [r0, #40]	; 0x28
 80052a2:	4298      	cmp	r0, r3
 80052a4:	bf04      	itt	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	6183      	streq	r3, [r0, #24]
 80052aa:	f000 f81f 	bl	80052ec <__sfp>
 80052ae:	6060      	str	r0, [r4, #4]
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 f81b 	bl	80052ec <__sfp>
 80052b6:	60a0      	str	r0, [r4, #8]
 80052b8:	4620      	mov	r0, r4
 80052ba:	f000 f817 	bl	80052ec <__sfp>
 80052be:	2200      	movs	r2, #0
 80052c0:	60e0      	str	r0, [r4, #12]
 80052c2:	2104      	movs	r1, #4
 80052c4:	6860      	ldr	r0, [r4, #4]
 80052c6:	f7ff ffa7 	bl	8005218 <std.isra.0>
 80052ca:	2201      	movs	r2, #1
 80052cc:	2109      	movs	r1, #9
 80052ce:	68a0      	ldr	r0, [r4, #8]
 80052d0:	f7ff ffa2 	bl	8005218 <std.isra.0>
 80052d4:	2202      	movs	r2, #2
 80052d6:	2112      	movs	r1, #18
 80052d8:	68e0      	ldr	r0, [r4, #12]
 80052da:	f7ff ff9d 	bl	8005218 <std.isra.0>
 80052de:	2301      	movs	r3, #1
 80052e0:	61a3      	str	r3, [r4, #24]
 80052e2:	bd10      	pop	{r4, pc}
 80052e4:	08006c34 	.word	0x08006c34
 80052e8:	0800520d 	.word	0x0800520d

080052ec <__sfp>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <__sfp+0x74>)
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	69b3      	ldr	r3, [r6, #24]
 80052f4:	4607      	mov	r7, r0
 80052f6:	b913      	cbnz	r3, 80052fe <__sfp+0x12>
 80052f8:	4630      	mov	r0, r6
 80052fa:	f7ff ffc7 	bl	800528c <__sinit>
 80052fe:	3648      	adds	r6, #72	; 0x48
 8005300:	68b4      	ldr	r4, [r6, #8]
 8005302:	6873      	ldr	r3, [r6, #4]
 8005304:	3b01      	subs	r3, #1
 8005306:	d404      	bmi.n	8005312 <__sfp+0x26>
 8005308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800530c:	b17d      	cbz	r5, 800532e <__sfp+0x42>
 800530e:	3468      	adds	r4, #104	; 0x68
 8005310:	e7f8      	b.n	8005304 <__sfp+0x18>
 8005312:	6833      	ldr	r3, [r6, #0]
 8005314:	b10b      	cbz	r3, 800531a <__sfp+0x2e>
 8005316:	6836      	ldr	r6, [r6, #0]
 8005318:	e7f2      	b.n	8005300 <__sfp+0x14>
 800531a:	2104      	movs	r1, #4
 800531c:	4638      	mov	r0, r7
 800531e:	f7ff ff9f 	bl	8005260 <__sfmoreglue>
 8005322:	6030      	str	r0, [r6, #0]
 8005324:	2800      	cmp	r0, #0
 8005326:	d1f6      	bne.n	8005316 <__sfp+0x2a>
 8005328:	230c      	movs	r3, #12
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005332:	81e3      	strh	r3, [r4, #14]
 8005334:	2301      	movs	r3, #1
 8005336:	81a3      	strh	r3, [r4, #12]
 8005338:	6665      	str	r5, [r4, #100]	; 0x64
 800533a:	6025      	str	r5, [r4, #0]
 800533c:	60a5      	str	r5, [r4, #8]
 800533e:	6065      	str	r5, [r4, #4]
 8005340:	6125      	str	r5, [r4, #16]
 8005342:	6165      	str	r5, [r4, #20]
 8005344:	61a5      	str	r5, [r4, #24]
 8005346:	2208      	movs	r2, #8
 8005348:	4629      	mov	r1, r5
 800534a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800534e:	f7fd f8fc 	bl	800254a <memset>
 8005352:	6365      	str	r5, [r4, #52]	; 0x34
 8005354:	63a5      	str	r5, [r4, #56]	; 0x38
 8005356:	64a5      	str	r5, [r4, #72]	; 0x48
 8005358:	64e5      	str	r5, [r4, #76]	; 0x4c
 800535a:	4620      	mov	r0, r4
 800535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535e:	bf00      	nop
 8005360:	08006c34 	.word	0x08006c34

08005364 <_fwalk_reent>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	4680      	mov	r8, r0
 800536a:	4689      	mov	r9, r1
 800536c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005370:	2600      	movs	r6, #0
 8005372:	b194      	cbz	r4, 800539a <_fwalk_reent+0x36>
 8005374:	68a5      	ldr	r5, [r4, #8]
 8005376:	6867      	ldr	r7, [r4, #4]
 8005378:	3f01      	subs	r7, #1
 800537a:	d40c      	bmi.n	8005396 <_fwalk_reent+0x32>
 800537c:	89ab      	ldrh	r3, [r5, #12]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d907      	bls.n	8005392 <_fwalk_reent+0x2e>
 8005382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005386:	3301      	adds	r3, #1
 8005388:	d003      	beq.n	8005392 <_fwalk_reent+0x2e>
 800538a:	4629      	mov	r1, r5
 800538c:	4640      	mov	r0, r8
 800538e:	47c8      	blx	r9
 8005390:	4306      	orrs	r6, r0
 8005392:	3568      	adds	r5, #104	; 0x68
 8005394:	e7f0      	b.n	8005378 <_fwalk_reent+0x14>
 8005396:	6824      	ldr	r4, [r4, #0]
 8005398:	e7eb      	b.n	8005372 <_fwalk_reent+0xe>
 800539a:	4630      	mov	r0, r6
 800539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080053a0 <rshift>:
 80053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a2:	6906      	ldr	r6, [r0, #16]
 80053a4:	114b      	asrs	r3, r1, #5
 80053a6:	42b3      	cmp	r3, r6
 80053a8:	f100 0514 	add.w	r5, r0, #20
 80053ac:	da27      	bge.n	80053fe <rshift+0x5e>
 80053ae:	f011 011f 	ands.w	r1, r1, #31
 80053b2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80053b6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80053ba:	d101      	bne.n	80053c0 <rshift+0x20>
 80053bc:	4629      	mov	r1, r5
 80053be:	e016      	b.n	80053ee <rshift+0x4e>
 80053c0:	1d14      	adds	r4, r2, #4
 80053c2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80053c6:	f1c1 0e20 	rsb	lr, r1, #32
 80053ca:	40ca      	lsrs	r2, r1
 80053cc:	462b      	mov	r3, r5
 80053ce:	42b4      	cmp	r4, r6
 80053d0:	d209      	bcs.n	80053e6 <rshift+0x46>
 80053d2:	6827      	ldr	r7, [r4, #0]
 80053d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80053d8:	433a      	orrs	r2, r7
 80053da:	f843 2b04 	str.w	r2, [r3], #4
 80053de:	f854 2b04 	ldr.w	r2, [r4], #4
 80053e2:	40ca      	lsrs	r2, r1
 80053e4:	e7f3      	b.n	80053ce <rshift+0x2e>
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	b152      	cbz	r2, 8005400 <rshift+0x60>
 80053ea:	3304      	adds	r3, #4
 80053ec:	e008      	b.n	8005400 <rshift+0x60>
 80053ee:	42b2      	cmp	r2, r6
 80053f0:	460b      	mov	r3, r1
 80053f2:	d205      	bcs.n	8005400 <rshift+0x60>
 80053f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80053f8:	f841 3b04 	str.w	r3, [r1], #4
 80053fc:	e7f7      	b.n	80053ee <rshift+0x4e>
 80053fe:	462b      	mov	r3, r5
 8005400:	1b5b      	subs	r3, r3, r5
 8005402:	109b      	asrs	r3, r3, #2
 8005404:	6103      	str	r3, [r0, #16]
 8005406:	b903      	cbnz	r3, 800540a <rshift+0x6a>
 8005408:	6143      	str	r3, [r0, #20]
 800540a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800540c <__hexdig_fun>:
 800540c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005410:	2b09      	cmp	r3, #9
 8005412:	d801      	bhi.n	8005418 <__hexdig_fun+0xc>
 8005414:	3820      	subs	r0, #32
 8005416:	e00a      	b.n	800542e <__hexdig_fun+0x22>
 8005418:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800541c:	2b05      	cmp	r3, #5
 800541e:	d801      	bhi.n	8005424 <__hexdig_fun+0x18>
 8005420:	3847      	subs	r0, #71	; 0x47
 8005422:	e004      	b.n	800542e <__hexdig_fun+0x22>
 8005424:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005428:	2b05      	cmp	r3, #5
 800542a:	d802      	bhi.n	8005432 <__hexdig_fun+0x26>
 800542c:	3827      	subs	r0, #39	; 0x27
 800542e:	b2c0      	uxtb	r0, r0
 8005430:	4770      	bx	lr
 8005432:	2000      	movs	r0, #0
 8005434:	4770      	bx	lr

08005436 <__gethex>:
 8005436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	b08b      	sub	sp, #44	; 0x2c
 800543c:	468a      	mov	sl, r1
 800543e:	4690      	mov	r8, r2
 8005440:	9306      	str	r3, [sp, #24]
 8005442:	9002      	str	r0, [sp, #8]
 8005444:	f000 faca 	bl	80059dc <_localeconv_r>
 8005448:	6803      	ldr	r3, [r0, #0]
 800544a:	9303      	str	r3, [sp, #12]
 800544c:	4618      	mov	r0, r3
 800544e:	f7fa ff11 	bl	8000274 <strlen>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	9001      	str	r0, [sp, #4]
 8005456:	4403      	add	r3, r0
 8005458:	f04f 0b00 	mov.w	fp, #0
 800545c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005460:	9307      	str	r3, [sp, #28]
 8005462:	f8da 3000 	ldr.w	r3, [sl]
 8005466:	3302      	adds	r3, #2
 8005468:	461f      	mov	r7, r3
 800546a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800546e:	2830      	cmp	r0, #48	; 0x30
 8005470:	d102      	bne.n	8005478 <__gethex+0x42>
 8005472:	f10b 0b01 	add.w	fp, fp, #1
 8005476:	e7f7      	b.n	8005468 <__gethex+0x32>
 8005478:	f7ff ffc8 	bl	800540c <__hexdig_fun>
 800547c:	4604      	mov	r4, r0
 800547e:	b9e0      	cbnz	r0, 80054ba <__gethex+0x84>
 8005480:	9a01      	ldr	r2, [sp, #4]
 8005482:	9903      	ldr	r1, [sp, #12]
 8005484:	4638      	mov	r0, r7
 8005486:	f001 fa82 	bl	800698e <strncmp>
 800548a:	2800      	cmp	r0, #0
 800548c:	d134      	bne.n	80054f8 <__gethex+0xc2>
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	5cf8      	ldrb	r0, [r7, r3]
 8005492:	18fe      	adds	r6, r7, r3
 8005494:	f7ff ffba 	bl	800540c <__hexdig_fun>
 8005498:	b380      	cbz	r0, 80054fc <__gethex+0xc6>
 800549a:	4633      	mov	r3, r6
 800549c:	7818      	ldrb	r0, [r3, #0]
 800549e:	2830      	cmp	r0, #48	; 0x30
 80054a0:	461f      	mov	r7, r3
 80054a2:	f103 0301 	add.w	r3, r3, #1
 80054a6:	d0f9      	beq.n	800549c <__gethex+0x66>
 80054a8:	f7ff ffb0 	bl	800540c <__hexdig_fun>
 80054ac:	fab0 f580 	clz	r5, r0
 80054b0:	096d      	lsrs	r5, r5, #5
 80054b2:	4634      	mov	r4, r6
 80054b4:	f04f 0b01 	mov.w	fp, #1
 80054b8:	e001      	b.n	80054be <__gethex+0x88>
 80054ba:	2500      	movs	r5, #0
 80054bc:	462c      	mov	r4, r5
 80054be:	463a      	mov	r2, r7
 80054c0:	4616      	mov	r6, r2
 80054c2:	3201      	adds	r2, #1
 80054c4:	7830      	ldrb	r0, [r6, #0]
 80054c6:	f7ff ffa1 	bl	800540c <__hexdig_fun>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	d1f8      	bne.n	80054c0 <__gethex+0x8a>
 80054ce:	9a01      	ldr	r2, [sp, #4]
 80054d0:	9903      	ldr	r1, [sp, #12]
 80054d2:	4630      	mov	r0, r6
 80054d4:	f001 fa5b 	bl	800698e <strncmp>
 80054d8:	b950      	cbnz	r0, 80054f0 <__gethex+0xba>
 80054da:	b954      	cbnz	r4, 80054f2 <__gethex+0xbc>
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	18f4      	adds	r4, r6, r3
 80054e0:	4622      	mov	r2, r4
 80054e2:	4616      	mov	r6, r2
 80054e4:	3201      	adds	r2, #1
 80054e6:	7830      	ldrb	r0, [r6, #0]
 80054e8:	f7ff ff90 	bl	800540c <__hexdig_fun>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d1f8      	bne.n	80054e2 <__gethex+0xac>
 80054f0:	b134      	cbz	r4, 8005500 <__gethex+0xca>
 80054f2:	1ba4      	subs	r4, r4, r6
 80054f4:	00a4      	lsls	r4, r4, #2
 80054f6:	e003      	b.n	8005500 <__gethex+0xca>
 80054f8:	463e      	mov	r6, r7
 80054fa:	e000      	b.n	80054fe <__gethex+0xc8>
 80054fc:	4604      	mov	r4, r0
 80054fe:	2501      	movs	r5, #1
 8005500:	7833      	ldrb	r3, [r6, #0]
 8005502:	2b50      	cmp	r3, #80	; 0x50
 8005504:	d001      	beq.n	800550a <__gethex+0xd4>
 8005506:	2b70      	cmp	r3, #112	; 0x70
 8005508:	d12a      	bne.n	8005560 <__gethex+0x12a>
 800550a:	7873      	ldrb	r3, [r6, #1]
 800550c:	2b2b      	cmp	r3, #43	; 0x2b
 800550e:	d008      	beq.n	8005522 <__gethex+0xec>
 8005510:	2b2d      	cmp	r3, #45	; 0x2d
 8005512:	d003      	beq.n	800551c <__gethex+0xe6>
 8005514:	1c71      	adds	r1, r6, #1
 8005516:	f04f 0900 	mov.w	r9, #0
 800551a:	e005      	b.n	8005528 <__gethex+0xf2>
 800551c:	f04f 0901 	mov.w	r9, #1
 8005520:	e001      	b.n	8005526 <__gethex+0xf0>
 8005522:	f04f 0900 	mov.w	r9, #0
 8005526:	1cb1      	adds	r1, r6, #2
 8005528:	7808      	ldrb	r0, [r1, #0]
 800552a:	f7ff ff6f 	bl	800540c <__hexdig_fun>
 800552e:	1e43      	subs	r3, r0, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b18      	cmp	r3, #24
 8005534:	d814      	bhi.n	8005560 <__gethex+0x12a>
 8005536:	f1a0 0210 	sub.w	r2, r0, #16
 800553a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800553e:	f7ff ff65 	bl	800540c <__hexdig_fun>
 8005542:	1e43      	subs	r3, r0, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b18      	cmp	r3, #24
 8005548:	d804      	bhi.n	8005554 <__gethex+0x11e>
 800554a:	230a      	movs	r3, #10
 800554c:	fb03 0202 	mla	r2, r3, r2, r0
 8005550:	3a10      	subs	r2, #16
 8005552:	e7f2      	b.n	800553a <__gethex+0x104>
 8005554:	f1b9 0f00 	cmp.w	r9, #0
 8005558:	d000      	beq.n	800555c <__gethex+0x126>
 800555a:	4252      	negs	r2, r2
 800555c:	4414      	add	r4, r2
 800555e:	e000      	b.n	8005562 <__gethex+0x12c>
 8005560:	4631      	mov	r1, r6
 8005562:	f8ca 1000 	str.w	r1, [sl]
 8005566:	b12d      	cbz	r5, 8005574 <__gethex+0x13e>
 8005568:	f1bb 0f00 	cmp.w	fp, #0
 800556c:	bf14      	ite	ne
 800556e:	2000      	movne	r0, #0
 8005570:	2006      	moveq	r0, #6
 8005572:	e17c      	b.n	800586e <__gethex+0x438>
 8005574:	1bf3      	subs	r3, r6, r7
 8005576:	3b01      	subs	r3, #1
 8005578:	4629      	mov	r1, r5
 800557a:	2b07      	cmp	r3, #7
 800557c:	dd02      	ble.n	8005584 <__gethex+0x14e>
 800557e:	3101      	adds	r1, #1
 8005580:	105b      	asrs	r3, r3, #1
 8005582:	e7fa      	b.n	800557a <__gethex+0x144>
 8005584:	9802      	ldr	r0, [sp, #8]
 8005586:	f000 fa83 	bl	8005a90 <_Balloc>
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	f100 0a14 	add.w	sl, r0, #20
 8005590:	f04f 0900 	mov.w	r9, #0
 8005594:	f1c3 0301 	rsb	r3, r3, #1
 8005598:	4605      	mov	r5, r0
 800559a:	f8cd a010 	str.w	sl, [sp, #16]
 800559e:	46cb      	mov	fp, r9
 80055a0:	9308      	str	r3, [sp, #32]
 80055a2:	42b7      	cmp	r7, r6
 80055a4:	d22f      	bcs.n	8005606 <__gethex+0x1d0>
 80055a6:	1e73      	subs	r3, r6, #1
 80055a8:	9305      	str	r3, [sp, #20]
 80055aa:	9a07      	ldr	r2, [sp, #28]
 80055ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <__gethex+0x196>
 80055b4:	f1bb 0f20 	cmp.w	fp, #32
 80055b8:	d116      	bne.n	80055e8 <__gethex+0x1b2>
 80055ba:	9b04      	ldr	r3, [sp, #16]
 80055bc:	f8c3 9000 	str.w	r9, [r3]
 80055c0:	3304      	adds	r3, #4
 80055c2:	f04f 0900 	mov.w	r9, #0
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	46cb      	mov	fp, r9
 80055ca:	e00d      	b.n	80055e8 <__gethex+0x1b2>
 80055cc:	9b05      	ldr	r3, [sp, #20]
 80055ce:	9a08      	ldr	r2, [sp, #32]
 80055d0:	4413      	add	r3, r2
 80055d2:	429f      	cmp	r7, r3
 80055d4:	d8ee      	bhi.n	80055b4 <__gethex+0x17e>
 80055d6:	4618      	mov	r0, r3
 80055d8:	9a01      	ldr	r2, [sp, #4]
 80055da:	9903      	ldr	r1, [sp, #12]
 80055dc:	9309      	str	r3, [sp, #36]	; 0x24
 80055de:	f001 f9d6 	bl	800698e <strncmp>
 80055e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e4:	b168      	cbz	r0, 8005602 <__gethex+0x1cc>
 80055e6:	e7e5      	b.n	80055b4 <__gethex+0x17e>
 80055e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80055ec:	f7ff ff0e 	bl	800540c <__hexdig_fun>
 80055f0:	f000 000f 	and.w	r0, r0, #15
 80055f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80055f8:	9b05      	ldr	r3, [sp, #20]
 80055fa:	ea49 0900 	orr.w	r9, r9, r0
 80055fe:	f10b 0b04 	add.w	fp, fp, #4
 8005602:	461e      	mov	r6, r3
 8005604:	e7cd      	b.n	80055a2 <__gethex+0x16c>
 8005606:	9804      	ldr	r0, [sp, #16]
 8005608:	f840 9b04 	str.w	r9, [r0], #4
 800560c:	ebca 0000 	rsb	r0, sl, r0
 8005610:	1080      	asrs	r0, r0, #2
 8005612:	6128      	str	r0, [r5, #16]
 8005614:	0147      	lsls	r7, r0, #5
 8005616:	4648      	mov	r0, r9
 8005618:	f000 faff 	bl	8005c1a <__hi0bits>
 800561c:	f8d8 6000 	ldr.w	r6, [r8]
 8005620:	1a38      	subs	r0, r7, r0
 8005622:	42b0      	cmp	r0, r6
 8005624:	dd26      	ble.n	8005674 <__gethex+0x23e>
 8005626:	1b87      	subs	r7, r0, r6
 8005628:	4639      	mov	r1, r7
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fdfd 	bl	800622a <__any_on>
 8005630:	b1c8      	cbz	r0, 8005666 <__gethex+0x230>
 8005632:	1e7b      	subs	r3, r7, #1
 8005634:	1159      	asrs	r1, r3, #5
 8005636:	f003 021f 	and.w	r2, r3, #31
 800563a:	f04f 0901 	mov.w	r9, #1
 800563e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005642:	fa09 f202 	lsl.w	r2, r9, r2
 8005646:	420a      	tst	r2, r1
 8005648:	d00e      	beq.n	8005668 <__gethex+0x232>
 800564a:	454b      	cmp	r3, r9
 800564c:	dc02      	bgt.n	8005654 <__gethex+0x21e>
 800564e:	f04f 0902 	mov.w	r9, #2
 8005652:	e009      	b.n	8005668 <__gethex+0x232>
 8005654:	1eb9      	subs	r1, r7, #2
 8005656:	4628      	mov	r0, r5
 8005658:	f000 fde7 	bl	800622a <__any_on>
 800565c:	2800      	cmp	r0, #0
 800565e:	d0f6      	beq.n	800564e <__gethex+0x218>
 8005660:	f04f 0903 	mov.w	r9, #3
 8005664:	e000      	b.n	8005668 <__gethex+0x232>
 8005666:	4681      	mov	r9, r0
 8005668:	4639      	mov	r1, r7
 800566a:	4628      	mov	r0, r5
 800566c:	f7ff fe98 	bl	80053a0 <rshift>
 8005670:	443c      	add	r4, r7
 8005672:	e00c      	b.n	800568e <__gethex+0x258>
 8005674:	da09      	bge.n	800568a <__gethex+0x254>
 8005676:	1a37      	subs	r7, r6, r0
 8005678:	4629      	mov	r1, r5
 800567a:	463a      	mov	r2, r7
 800567c:	9802      	ldr	r0, [sp, #8]
 800567e:	f000 fc01 	bl	8005e84 <__lshift>
 8005682:	1be4      	subs	r4, r4, r7
 8005684:	4605      	mov	r5, r0
 8005686:	f100 0a14 	add.w	sl, r0, #20
 800568a:	f04f 0900 	mov.w	r9, #0
 800568e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005692:	429c      	cmp	r4, r3
 8005694:	dd08      	ble.n	80056a8 <__gethex+0x272>
 8005696:	9802      	ldr	r0, [sp, #8]
 8005698:	4629      	mov	r1, r5
 800569a:	f000 fa2e 	bl	8005afa <_Bfree>
 800569e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056a0:	2300      	movs	r3, #0
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	20a3      	movs	r0, #163	; 0xa3
 80056a6:	e0e2      	b.n	800586e <__gethex+0x438>
 80056a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80056ac:	4284      	cmp	r4, r0
 80056ae:	da53      	bge.n	8005758 <__gethex+0x322>
 80056b0:	1b04      	subs	r4, r0, r4
 80056b2:	42a6      	cmp	r6, r4
 80056b4:	dc2e      	bgt.n	8005714 <__gethex+0x2de>
 80056b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d01a      	beq.n	80056f4 <__gethex+0x2be>
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d01c      	beq.n	80056fc <__gethex+0x2c6>
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d11d      	bne.n	8005702 <__gethex+0x2cc>
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d11b      	bne.n	8005702 <__gethex+0x2cc>
 80056ca:	2e01      	cmp	r6, #1
 80056cc:	dc0b      	bgt.n	80056e6 <__gethex+0x2b0>
 80056ce:	9a06      	ldr	r2, [sp, #24]
 80056d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	2301      	movs	r3, #1
 80056d8:	612b      	str	r3, [r5, #16]
 80056da:	f8ca 3000 	str.w	r3, [sl]
 80056de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056e0:	2062      	movs	r0, #98	; 0x62
 80056e2:	601d      	str	r5, [r3, #0]
 80056e4:	e0c3      	b.n	800586e <__gethex+0x438>
 80056e6:	1e71      	subs	r1, r6, #1
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 fd9e 	bl	800622a <__any_on>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d1ed      	bne.n	80056ce <__gethex+0x298>
 80056f2:	e006      	b.n	8005702 <__gethex+0x2cc>
 80056f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0e9      	beq.n	80056ce <__gethex+0x298>
 80056fa:	e002      	b.n	8005702 <__gethex+0x2cc>
 80056fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <__gethex+0x298>
 8005702:	9802      	ldr	r0, [sp, #8]
 8005704:	4629      	mov	r1, r5
 8005706:	f000 f9f8 	bl	8005afa <_Bfree>
 800570a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800570c:	2300      	movs	r3, #0
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	2050      	movs	r0, #80	; 0x50
 8005712:	e0ac      	b.n	800586e <__gethex+0x438>
 8005714:	1e67      	subs	r7, r4, #1
 8005716:	f1b9 0f00 	cmp.w	r9, #0
 800571a:	d106      	bne.n	800572a <__gethex+0x2f4>
 800571c:	b13f      	cbz	r7, 800572e <__gethex+0x2f8>
 800571e:	4639      	mov	r1, r7
 8005720:	4628      	mov	r0, r5
 8005722:	f000 fd82 	bl	800622a <__any_on>
 8005726:	4681      	mov	r9, r0
 8005728:	e001      	b.n	800572e <__gethex+0x2f8>
 800572a:	f04f 0901 	mov.w	r9, #1
 800572e:	117a      	asrs	r2, r7, #5
 8005730:	2301      	movs	r3, #1
 8005732:	f007 071f 	and.w	r7, r7, #31
 8005736:	fa03 f707 	lsl.w	r7, r3, r7
 800573a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800573e:	4621      	mov	r1, r4
 8005740:	421f      	tst	r7, r3
 8005742:	4628      	mov	r0, r5
 8005744:	bf18      	it	ne
 8005746:	f049 0902 	orrne.w	r9, r9, #2
 800574a:	1b36      	subs	r6, r6, r4
 800574c:	f7ff fe28 	bl	80053a0 <rshift>
 8005750:	2702      	movs	r7, #2
 8005752:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005756:	e000      	b.n	800575a <__gethex+0x324>
 8005758:	2701      	movs	r7, #1
 800575a:	f1b9 0f00 	cmp.w	r9, #0
 800575e:	f000 8081 	beq.w	8005864 <__gethex+0x42e>
 8005762:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d00e      	beq.n	8005788 <__gethex+0x352>
 800576a:	2b03      	cmp	r3, #3
 800576c:	d010      	beq.n	8005790 <__gethex+0x35a>
 800576e:	2b01      	cmp	r3, #1
 8005770:	d176      	bne.n	8005860 <__gethex+0x42a>
 8005772:	f019 0f02 	tst.w	r9, #2
 8005776:	d073      	beq.n	8005860 <__gethex+0x42a>
 8005778:	f8da 0000 	ldr.w	r0, [sl]
 800577c:	ea49 0900 	orr.w	r9, r9, r0
 8005780:	f019 0f01 	tst.w	r9, #1
 8005784:	d107      	bne.n	8005796 <__gethex+0x360>
 8005786:	e06b      	b.n	8005860 <__gethex+0x42a>
 8005788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800578a:	f1c3 0301 	rsb	r3, r3, #1
 800578e:	9315      	str	r3, [sp, #84]	; 0x54
 8005790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005792:	2b00      	cmp	r3, #0
 8005794:	d064      	beq.n	8005860 <__gethex+0x42a>
 8005796:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800579a:	f105 0314 	add.w	r3, r5, #20
 800579e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80057a2:	eb03 0109 	add.w	r1, r3, r9
 80057a6:	2000      	movs	r0, #0
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057ae:	d002      	beq.n	80057b6 <__gethex+0x380>
 80057b0:	3201      	adds	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e020      	b.n	80057f8 <__gethex+0x3c2>
 80057b6:	f843 0b04 	str.w	r0, [r3], #4
 80057ba:	4299      	cmp	r1, r3
 80057bc:	d8f4      	bhi.n	80057a8 <__gethex+0x372>
 80057be:	68ab      	ldr	r3, [r5, #8]
 80057c0:	459a      	cmp	sl, r3
 80057c2:	db12      	blt.n	80057ea <__gethex+0x3b4>
 80057c4:	6869      	ldr	r1, [r5, #4]
 80057c6:	9802      	ldr	r0, [sp, #8]
 80057c8:	3101      	adds	r1, #1
 80057ca:	f000 f961 	bl	8005a90 <_Balloc>
 80057ce:	692a      	ldr	r2, [r5, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	f105 010c 	add.w	r1, r5, #12
 80057d6:	4683      	mov	fp, r0
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	300c      	adds	r0, #12
 80057dc:	f7fc feaa 	bl	8002534 <memcpy>
 80057e0:	4629      	mov	r1, r5
 80057e2:	9802      	ldr	r0, [sp, #8]
 80057e4:	f000 f989 	bl	8005afa <_Bfree>
 80057e8:	465d      	mov	r5, fp
 80057ea:	692b      	ldr	r3, [r5, #16]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80057f2:	612a      	str	r2, [r5, #16]
 80057f4:	2201      	movs	r2, #1
 80057f6:	615a      	str	r2, [r3, #20]
 80057f8:	2f02      	cmp	r7, #2
 80057fa:	f105 0214 	add.w	r2, r5, #20
 80057fe:	d111      	bne.n	8005824 <__gethex+0x3ee>
 8005800:	f8d8 3000 	ldr.w	r3, [r8]
 8005804:	3b01      	subs	r3, #1
 8005806:	429e      	cmp	r6, r3
 8005808:	d127      	bne.n	800585a <__gethex+0x424>
 800580a:	1171      	asrs	r1, r6, #5
 800580c:	2301      	movs	r3, #1
 800580e:	f006 061f 	and.w	r6, r6, #31
 8005812:	fa03 f606 	lsl.w	r6, r3, r6
 8005816:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800581a:	421e      	tst	r6, r3
 800581c:	bf0c      	ite	eq
 800581e:	2702      	moveq	r7, #2
 8005820:	2701      	movne	r7, #1
 8005822:	e01a      	b.n	800585a <__gethex+0x424>
 8005824:	692b      	ldr	r3, [r5, #16]
 8005826:	459a      	cmp	sl, r3
 8005828:	da0a      	bge.n	8005840 <__gethex+0x40a>
 800582a:	2101      	movs	r1, #1
 800582c:	4628      	mov	r0, r5
 800582e:	f7ff fdb7 	bl	80053a0 <rshift>
 8005832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005836:	3401      	adds	r4, #1
 8005838:	429c      	cmp	r4, r3
 800583a:	f73f af2c 	bgt.w	8005696 <__gethex+0x260>
 800583e:	e00b      	b.n	8005858 <__gethex+0x422>
 8005840:	f016 061f 	ands.w	r6, r6, #31
 8005844:	d008      	beq.n	8005858 <__gethex+0x422>
 8005846:	4491      	add	r9, r2
 8005848:	f1c6 0620 	rsb	r6, r6, #32
 800584c:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8005850:	f000 f9e3 	bl	8005c1a <__hi0bits>
 8005854:	42b0      	cmp	r0, r6
 8005856:	dbe8      	blt.n	800582a <__gethex+0x3f4>
 8005858:	2701      	movs	r7, #1
 800585a:	f047 0720 	orr.w	r7, r7, #32
 800585e:	e001      	b.n	8005864 <__gethex+0x42e>
 8005860:	f047 0710 	orr.w	r7, r7, #16
 8005864:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005866:	601d      	str	r5, [r3, #0]
 8005868:	9b06      	ldr	r3, [sp, #24]
 800586a:	4638      	mov	r0, r7
 800586c:	601c      	str	r4, [r3, #0]
 800586e:	b00b      	add	sp, #44	; 0x2c
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005874 <L_shift>:
 8005874:	f1c2 0208 	rsb	r2, r2, #8
 8005878:	0092      	lsls	r2, r2, #2
 800587a:	b570      	push	{r4, r5, r6, lr}
 800587c:	f1c2 0620 	rsb	r6, r2, #32
 8005880:	6843      	ldr	r3, [r0, #4]
 8005882:	6805      	ldr	r5, [r0, #0]
 8005884:	fa03 f406 	lsl.w	r4, r3, r6
 8005888:	432c      	orrs	r4, r5
 800588a:	40d3      	lsrs	r3, r2
 800588c:	6004      	str	r4, [r0, #0]
 800588e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005892:	4288      	cmp	r0, r1
 8005894:	d3f4      	bcc.n	8005880 <L_shift+0xc>
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__match>:
 8005898:	b530      	push	{r4, r5, lr}
 800589a:	6803      	ldr	r3, [r0, #0]
 800589c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a0:	3301      	adds	r3, #1
 80058a2:	b14c      	cbz	r4, 80058b8 <__match+0x20>
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80058aa:	2d19      	cmp	r5, #25
 80058ac:	bf98      	it	ls
 80058ae:	3220      	addls	r2, #32
 80058b0:	42a2      	cmp	r2, r4
 80058b2:	d0f3      	beq.n	800589c <__match+0x4>
 80058b4:	2000      	movs	r0, #0
 80058b6:	bd30      	pop	{r4, r5, pc}
 80058b8:	6003      	str	r3, [r0, #0]
 80058ba:	2001      	movs	r0, #1
 80058bc:	bd30      	pop	{r4, r5, pc}

080058be <__hexnan>:
 80058be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c2:	680b      	ldr	r3, [r1, #0]
 80058c4:	f8d0 b000 	ldr.w	fp, [r0]
 80058c8:	115e      	asrs	r6, r3, #5
 80058ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80058ce:	f013 031f 	ands.w	r3, r3, #31
 80058d2:	b085      	sub	sp, #20
 80058d4:	bf18      	it	ne
 80058d6:	3604      	addne	r6, #4
 80058d8:	1f35      	subs	r5, r6, #4
 80058da:	4617      	mov	r7, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	4682      	mov	sl, r0
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80058e6:	46a8      	mov	r8, r5
 80058e8:	462c      	mov	r4, r5
 80058ea:	9200      	str	r2, [sp, #0]
 80058ec:	4691      	mov	r9, r2
 80058ee:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80058f2:	2900      	cmp	r1, #0
 80058f4:	d03c      	beq.n	8005970 <__hexnan+0xb2>
 80058f6:	4608      	mov	r0, r1
 80058f8:	9203      	str	r2, [sp, #12]
 80058fa:	9102      	str	r1, [sp, #8]
 80058fc:	f7ff fd86 	bl	800540c <__hexdig_fun>
 8005900:	9a03      	ldr	r2, [sp, #12]
 8005902:	bb00      	cbnz	r0, 8005946 <__hexnan+0x88>
 8005904:	9902      	ldr	r1, [sp, #8]
 8005906:	2920      	cmp	r1, #32
 8005908:	d816      	bhi.n	8005938 <__hexnan+0x7a>
 800590a:	9b00      	ldr	r3, [sp, #0]
 800590c:	4599      	cmp	r9, r3
 800590e:	ddee      	ble.n	80058ee <__hexnan+0x30>
 8005910:	4544      	cmp	r4, r8
 8005912:	d205      	bcs.n	8005920 <__hexnan+0x62>
 8005914:	2a07      	cmp	r2, #7
 8005916:	dc03      	bgt.n	8005920 <__hexnan+0x62>
 8005918:	4641      	mov	r1, r8
 800591a:	4620      	mov	r0, r4
 800591c:	f7ff ffaa 	bl	8005874 <L_shift>
 8005920:	42bc      	cmp	r4, r7
 8005922:	d923      	bls.n	800596c <__hexnan+0xae>
 8005924:	2300      	movs	r3, #0
 8005926:	f1a4 0804 	sub.w	r8, r4, #4
 800592a:	f844 3c04 	str.w	r3, [r4, #-4]
 800592e:	f8cd 9000 	str.w	r9, [sp]
 8005932:	4644      	mov	r4, r8
 8005934:	461a      	mov	r2, r3
 8005936:	e7da      	b.n	80058ee <__hexnan+0x30>
 8005938:	2929      	cmp	r1, #41	; 0x29
 800593a:	d148      	bne.n	80059ce <__hexnan+0x110>
 800593c:	f10b 0301 	add.w	r3, fp, #1
 8005940:	f8ca 3000 	str.w	r3, [sl]
 8005944:	e014      	b.n	8005970 <__hexnan+0xb2>
 8005946:	3201      	adds	r2, #1
 8005948:	2a08      	cmp	r2, #8
 800594a:	f109 0901 	add.w	r9, r9, #1
 800594e:	dd06      	ble.n	800595e <__hexnan+0xa0>
 8005950:	42bc      	cmp	r4, r7
 8005952:	d9cc      	bls.n	80058ee <__hexnan+0x30>
 8005954:	2300      	movs	r3, #0
 8005956:	f844 3c04 	str.w	r3, [r4, #-4]
 800595a:	2201      	movs	r2, #1
 800595c:	3c04      	subs	r4, #4
 800595e:	6821      	ldr	r1, [r4, #0]
 8005960:	f000 000f 	and.w	r0, r0, #15
 8005964:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8005968:	6020      	str	r0, [r4, #0]
 800596a:	e7c0      	b.n	80058ee <__hexnan+0x30>
 800596c:	2208      	movs	r2, #8
 800596e:	e7be      	b.n	80058ee <__hexnan+0x30>
 8005970:	f1b9 0f00 	cmp.w	r9, #0
 8005974:	d02b      	beq.n	80059ce <__hexnan+0x110>
 8005976:	4544      	cmp	r4, r8
 8005978:	d205      	bcs.n	8005986 <__hexnan+0xc8>
 800597a:	2a07      	cmp	r2, #7
 800597c:	dc03      	bgt.n	8005986 <__hexnan+0xc8>
 800597e:	4641      	mov	r1, r8
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff ff77 	bl	8005874 <L_shift>
 8005986:	42bc      	cmp	r4, r7
 8005988:	d90c      	bls.n	80059a4 <__hexnan+0xe6>
 800598a:	463b      	mov	r3, r7
 800598c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005990:	f843 2b04 	str.w	r2, [r3], #4
 8005994:	42a5      	cmp	r5, r4
 8005996:	d2f9      	bcs.n	800598c <__hexnan+0xce>
 8005998:	2200      	movs	r2, #0
 800599a:	f843 2b04 	str.w	r2, [r3], #4
 800599e:	429d      	cmp	r5, r3
 80059a0:	d2fb      	bcs.n	800599a <__hexnan+0xdc>
 80059a2:	e00b      	b.n	80059bc <__hexnan+0xfe>
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	b14b      	cbz	r3, 80059bc <__hexnan+0xfe>
 80059a8:	f1c3 0220 	rsb	r2, r3, #32
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	40d3      	lsrs	r3, r2
 80059b2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80059b6:	4013      	ands	r3, r2
 80059b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b943      	cbnz	r3, 80059d2 <__hexnan+0x114>
 80059c0:	42bd      	cmp	r5, r7
 80059c2:	d102      	bne.n	80059ca <__hexnan+0x10c>
 80059c4:	2301      	movs	r3, #1
 80059c6:	602b      	str	r3, [r5, #0]
 80059c8:	e003      	b.n	80059d2 <__hexnan+0x114>
 80059ca:	3d04      	subs	r5, #4
 80059cc:	e7f6      	b.n	80059bc <__hexnan+0xfe>
 80059ce:	2004      	movs	r0, #4
 80059d0:	e000      	b.n	80059d4 <__hexnan+0x116>
 80059d2:	2005      	movs	r0, #5
 80059d4:	b005      	add	sp, #20
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080059dc <_localeconv_r>:
 80059dc:	4800      	ldr	r0, [pc, #0]	; (80059e0 <_localeconv_r+0x4>)
 80059de:	4770      	bx	lr
 80059e0:	2000006c 	.word	0x2000006c

080059e4 <__smakebuf_r>:
 80059e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e6:	898b      	ldrh	r3, [r1, #12]
 80059e8:	079d      	lsls	r5, r3, #30
 80059ea:	b091      	sub	sp, #68	; 0x44
 80059ec:	4606      	mov	r6, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	d426      	bmi.n	8005a40 <__smakebuf_r+0x5c>
 80059f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f6:	2900      	cmp	r1, #0
 80059f8:	da09      	bge.n	8005a0e <__smakebuf_r+0x2a>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a00:	f04f 0500 	mov.w	r5, #0
 8005a04:	bf14      	ite	ne
 8005a06:	2740      	movne	r7, #64	; 0x40
 8005a08:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8005a0c:	e00d      	b.n	8005a2a <__smakebuf_r+0x46>
 8005a0e:	aa01      	add	r2, sp, #4
 8005a10:	f000 fff4 	bl	80069fc <_fstat_r>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	dbf0      	blt.n	80059fa <__smakebuf_r+0x16>
 8005a18:	9d02      	ldr	r5, [sp, #8]
 8005a1a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005a1e:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8005a22:	424d      	negs	r5, r1
 8005a24:	414d      	adcs	r5, r1
 8005a26:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f000 fc73 	bl	8006318 <_malloc_r>
 8005a32:	b960      	cbnz	r0, 8005a4e <__smakebuf_r+0x6a>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	059a      	lsls	r2, r3, #22
 8005a38:	d41d      	bmi.n	8005a76 <__smakebuf_r+0x92>
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	6163      	str	r3, [r4, #20]
 8005a4c:	e013      	b.n	8005a76 <__smakebuf_r+0x92>
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <__smakebuf_r+0x98>)
 8005a50:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	6020      	str	r0, [r4, #0]
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	6120      	str	r0, [r4, #16]
 8005a5e:	6167      	str	r7, [r4, #20]
 8005a60:	b14d      	cbz	r5, 8005a76 <__smakebuf_r+0x92>
 8005a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a66:	4630      	mov	r0, r6
 8005a68:	f000 ffda 	bl	8006a20 <_isatty_r>
 8005a6c:	b118      	cbz	r0, 8005a76 <__smakebuf_r+0x92>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	b011      	add	sp, #68	; 0x44
 8005a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	0800520d 	.word	0x0800520d

08005a80 <malloc>:
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <malloc+0xc>)
 8005a82:	4601      	mov	r1, r0
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f000 bc47 	b.w	8006318 <_malloc_r>
 8005a8a:	bf00      	nop
 8005a8c:	20000064 	.word	0x20000064

08005a90 <_Balloc>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a94:	4604      	mov	r4, r0
 8005a96:	460e      	mov	r6, r1
 8005a98:	b93d      	cbnz	r5, 8005aaa <_Balloc+0x1a>
 8005a9a:	2010      	movs	r0, #16
 8005a9c:	f7ff fff0 	bl	8005a80 <malloc>
 8005aa0:	6260      	str	r0, [r4, #36]	; 0x24
 8005aa2:	6045      	str	r5, [r0, #4]
 8005aa4:	6085      	str	r5, [r0, #8]
 8005aa6:	6005      	str	r5, [r0, #0]
 8005aa8:	60c5      	str	r5, [r0, #12]
 8005aaa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005aac:	68eb      	ldr	r3, [r5, #12]
 8005aae:	b143      	cbz	r3, 8005ac2 <_Balloc+0x32>
 8005ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ab8:	b178      	cbz	r0, 8005ada <_Balloc+0x4a>
 8005aba:	6802      	ldr	r2, [r0, #0]
 8005abc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ac0:	e017      	b.n	8005af2 <_Balloc+0x62>
 8005ac2:	2221      	movs	r2, #33	; 0x21
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 fbd1 	bl	800626e <_calloc_r>
 8005acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ace:	60e8      	str	r0, [r5, #12]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1ec      	bne.n	8005ab0 <_Balloc+0x20>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
 8005ada:	2101      	movs	r1, #1
 8005adc:	fa01 f506 	lsl.w	r5, r1, r6
 8005ae0:	1d6a      	adds	r2, r5, #5
 8005ae2:	0092      	lsls	r2, r2, #2
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fbc2 	bl	800626e <_calloc_r>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d0f3      	beq.n	8005ad6 <_Balloc+0x46>
 8005aee:	6046      	str	r6, [r0, #4]
 8005af0:	6085      	str	r5, [r0, #8]
 8005af2:	2300      	movs	r3, #0
 8005af4:	6103      	str	r3, [r0, #16]
 8005af6:	60c3      	str	r3, [r0, #12]
 8005af8:	bd70      	pop	{r4, r5, r6, pc}

08005afa <_Bfree>:
 8005afa:	b570      	push	{r4, r5, r6, lr}
 8005afc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005afe:	4606      	mov	r6, r0
 8005b00:	460d      	mov	r5, r1
 8005b02:	b93c      	cbnz	r4, 8005b14 <_Bfree+0x1a>
 8005b04:	2010      	movs	r0, #16
 8005b06:	f7ff ffbb 	bl	8005a80 <malloc>
 8005b0a:	6270      	str	r0, [r6, #36]	; 0x24
 8005b0c:	6044      	str	r4, [r0, #4]
 8005b0e:	6084      	str	r4, [r0, #8]
 8005b10:	6004      	str	r4, [r0, #0]
 8005b12:	60c4      	str	r4, [r0, #12]
 8005b14:	b13d      	cbz	r5, 8005b26 <_Bfree+0x2c>
 8005b16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b18:	686a      	ldr	r2, [r5, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b20:	6029      	str	r1, [r5, #0]
 8005b22:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b26:	bd70      	pop	{r4, r5, r6, pc}

08005b28 <__multadd>:
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	690d      	ldr	r5, [r1, #16]
 8005b2e:	461f      	mov	r7, r3
 8005b30:	4606      	mov	r6, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	f101 0e14 	add.w	lr, r1, #20
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8de 0000 	ldr.w	r0, [lr]
 8005b3e:	b281      	uxth	r1, r0
 8005b40:	fb02 7101 	mla	r1, r2, r1, r7
 8005b44:	0c0f      	lsrs	r7, r1, #16
 8005b46:	0c00      	lsrs	r0, r0, #16
 8005b48:	fb02 7000 	mla	r0, r2, r0, r7
 8005b4c:	b289      	uxth	r1, r1
 8005b4e:	3301      	adds	r3, #1
 8005b50:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005b54:	429d      	cmp	r5, r3
 8005b56:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005b5a:	f84e 1b04 	str.w	r1, [lr], #4
 8005b5e:	dcec      	bgt.n	8005b3a <__multadd+0x12>
 8005b60:	b1d7      	cbz	r7, 8005b98 <__multadd+0x70>
 8005b62:	68a3      	ldr	r3, [r4, #8]
 8005b64:	429d      	cmp	r5, r3
 8005b66:	db12      	blt.n	8005b8e <__multadd+0x66>
 8005b68:	6861      	ldr	r1, [r4, #4]
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	3101      	adds	r1, #1
 8005b6e:	f7ff ff8f 	bl	8005a90 <_Balloc>
 8005b72:	6922      	ldr	r2, [r4, #16]
 8005b74:	3202      	adds	r2, #2
 8005b76:	f104 010c 	add.w	r1, r4, #12
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	0092      	lsls	r2, r2, #2
 8005b7e:	300c      	adds	r0, #12
 8005b80:	f7fc fcd8 	bl	8002534 <memcpy>
 8005b84:	4621      	mov	r1, r4
 8005b86:	4630      	mov	r0, r6
 8005b88:	f7ff ffb7 	bl	8005afa <_Bfree>
 8005b8c:	4644      	mov	r4, r8
 8005b8e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b92:	3501      	adds	r5, #1
 8005b94:	615f      	str	r7, [r3, #20]
 8005b96:	6125      	str	r5, [r4, #16]
 8005b98:	4620      	mov	r0, r4
 8005b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b9e <__s2b>:
 8005b9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	461f      	mov	r7, r3
 8005ba8:	2209      	movs	r2, #9
 8005baa:	3308      	adds	r3, #8
 8005bac:	4606      	mov	r6, r0
 8005bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	da02      	bge.n	8005bc0 <__s2b+0x22>
 8005bba:	0052      	lsls	r2, r2, #1
 8005bbc:	3101      	adds	r1, #1
 8005bbe:	e7fa      	b.n	8005bb6 <__s2b+0x18>
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff ff65 	bl	8005a90 <_Balloc>
 8005bc6:	9b08      	ldr	r3, [sp, #32]
 8005bc8:	6143      	str	r3, [r0, #20]
 8005bca:	2d09      	cmp	r5, #9
 8005bcc:	f04f 0301 	mov.w	r3, #1
 8005bd0:	6103      	str	r3, [r0, #16]
 8005bd2:	dd11      	ble.n	8005bf8 <__s2b+0x5a>
 8005bd4:	f104 0809 	add.w	r8, r4, #9
 8005bd8:	46c1      	mov	r9, r8
 8005bda:	442c      	add	r4, r5
 8005bdc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005be0:	4601      	mov	r1, r0
 8005be2:	3b30      	subs	r3, #48	; 0x30
 8005be4:	220a      	movs	r2, #10
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff ff9e 	bl	8005b28 <__multadd>
 8005bec:	45a1      	cmp	r9, r4
 8005bee:	d1f5      	bne.n	8005bdc <__s2b+0x3e>
 8005bf0:	eb08 0405 	add.w	r4, r8, r5
 8005bf4:	3c08      	subs	r4, #8
 8005bf6:	e001      	b.n	8005bfc <__s2b+0x5e>
 8005bf8:	340a      	adds	r4, #10
 8005bfa:	2509      	movs	r5, #9
 8005bfc:	1b2d      	subs	r5, r5, r4
 8005bfe:	1963      	adds	r3, r4, r5
 8005c00:	429f      	cmp	r7, r3
 8005c02:	dd08      	ble.n	8005c16 <__s2b+0x78>
 8005c04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c08:	4601      	mov	r1, r0
 8005c0a:	3b30      	subs	r3, #48	; 0x30
 8005c0c:	220a      	movs	r2, #10
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f7ff ff8a 	bl	8005b28 <__multadd>
 8005c14:	e7f3      	b.n	8005bfe <__s2b+0x60>
 8005c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005c1a <__hi0bits>:
 8005c1a:	0c03      	lsrs	r3, r0, #16
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	b913      	cbnz	r3, 8005c26 <__hi0bits+0xc>
 8005c20:	0400      	lsls	r0, r0, #16
 8005c22:	2310      	movs	r3, #16
 8005c24:	e000      	b.n	8005c28 <__hi0bits+0xe>
 8005c26:	2300      	movs	r3, #0
 8005c28:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c2c:	bf04      	itt	eq
 8005c2e:	0200      	lsleq	r0, r0, #8
 8005c30:	3308      	addeq	r3, #8
 8005c32:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c36:	bf04      	itt	eq
 8005c38:	0100      	lsleq	r0, r0, #4
 8005c3a:	3304      	addeq	r3, #4
 8005c3c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c40:	bf04      	itt	eq
 8005c42:	0080      	lsleq	r0, r0, #2
 8005c44:	3302      	addeq	r3, #2
 8005c46:	2800      	cmp	r0, #0
 8005c48:	db03      	blt.n	8005c52 <__hi0bits+0x38>
 8005c4a:	0042      	lsls	r2, r0, #1
 8005c4c:	d503      	bpl.n	8005c56 <__hi0bits+0x3c>
 8005c4e:	1c58      	adds	r0, r3, #1
 8005c50:	4770      	bx	lr
 8005c52:	4618      	mov	r0, r3
 8005c54:	4770      	bx	lr
 8005c56:	2020      	movs	r0, #32
 8005c58:	4770      	bx	lr

08005c5a <__lo0bits>:
 8005c5a:	6803      	ldr	r3, [r0, #0]
 8005c5c:	f013 0207 	ands.w	r2, r3, #7
 8005c60:	d00b      	beq.n	8005c7a <__lo0bits+0x20>
 8005c62:	07d9      	lsls	r1, r3, #31
 8005c64:	d422      	bmi.n	8005cac <__lo0bits+0x52>
 8005c66:	079a      	lsls	r2, r3, #30
 8005c68:	bf4b      	itete	mi
 8005c6a:	085b      	lsrmi	r3, r3, #1
 8005c6c:	089b      	lsrpl	r3, r3, #2
 8005c6e:	6003      	strmi	r3, [r0, #0]
 8005c70:	6003      	strpl	r3, [r0, #0]
 8005c72:	bf4c      	ite	mi
 8005c74:	2001      	movmi	r0, #1
 8005c76:	2002      	movpl	r0, #2
 8005c78:	4770      	bx	lr
 8005c7a:	b299      	uxth	r1, r3
 8005c7c:	b909      	cbnz	r1, 8005c82 <__lo0bits+0x28>
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	2210      	movs	r2, #16
 8005c82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c86:	bf04      	itt	eq
 8005c88:	0a1b      	lsreq	r3, r3, #8
 8005c8a:	3208      	addeq	r2, #8
 8005c8c:	0719      	lsls	r1, r3, #28
 8005c8e:	bf04      	itt	eq
 8005c90:	091b      	lsreq	r3, r3, #4
 8005c92:	3204      	addeq	r2, #4
 8005c94:	0799      	lsls	r1, r3, #30
 8005c96:	bf04      	itt	eq
 8005c98:	089b      	lsreq	r3, r3, #2
 8005c9a:	3202      	addeq	r2, #2
 8005c9c:	07d9      	lsls	r1, r3, #31
 8005c9e:	d402      	bmi.n	8005ca6 <__lo0bits+0x4c>
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	d005      	beq.n	8005cb0 <__lo0bits+0x56>
 8005ca4:	3201      	adds	r2, #1
 8005ca6:	6003      	str	r3, [r0, #0]
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4770      	bx	lr
 8005cac:	2000      	movs	r0, #0
 8005cae:	4770      	bx	lr
 8005cb0:	2020      	movs	r0, #32
 8005cb2:	4770      	bx	lr

08005cb4 <__i2b>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	2101      	movs	r1, #1
 8005cba:	f7ff fee9 	bl	8005a90 <_Balloc>
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	6144      	str	r4, [r0, #20]
 8005cc2:	6102      	str	r2, [r0, #16]
 8005cc4:	bd10      	pop	{r4, pc}

08005cc6 <__multiply>:
 8005cc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cca:	4614      	mov	r4, r2
 8005ccc:	690a      	ldr	r2, [r1, #16]
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	bfb8      	it	lt
 8005cd4:	460b      	movlt	r3, r1
 8005cd6:	4688      	mov	r8, r1
 8005cd8:	bfbc      	itt	lt
 8005cda:	46a0      	movlt	r8, r4
 8005cdc:	461c      	movlt	r4, r3
 8005cde:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ce2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ce6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cee:	eb07 0609 	add.w	r6, r7, r9
 8005cf2:	429e      	cmp	r6, r3
 8005cf4:	bfc8      	it	gt
 8005cf6:	3101      	addgt	r1, #1
 8005cf8:	f7ff feca 	bl	8005a90 <_Balloc>
 8005cfc:	f100 0514 	add.w	r5, r0, #20
 8005d00:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8005d04:	462b      	mov	r3, r5
 8005d06:	2200      	movs	r2, #0
 8005d08:	4563      	cmp	r3, ip
 8005d0a:	d202      	bcs.n	8005d12 <__multiply+0x4c>
 8005d0c:	f843 2b04 	str.w	r2, [r3], #4
 8005d10:	e7fa      	b.n	8005d08 <__multiply+0x42>
 8005d12:	f104 0214 	add.w	r2, r4, #20
 8005d16:	f108 0114 	add.w	r1, r8, #20
 8005d1a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d1e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	9b00      	ldr	r3, [sp, #0]
 8005d26:	9201      	str	r2, [sp, #4]
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d957      	bls.n	8005ddc <__multiply+0x116>
 8005d2c:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d30:	f1bb 0f00 	cmp.w	fp, #0
 8005d34:	d023      	beq.n	8005d7e <__multiply+0xb8>
 8005d36:	4689      	mov	r9, r1
 8005d38:	46ae      	mov	lr, r5
 8005d3a:	f04f 0800 	mov.w	r8, #0
 8005d3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d42:	f8be a000 	ldrh.w	sl, [lr]
 8005d46:	b2a3      	uxth	r3, r4
 8005d48:	fb0b a303 	mla	r3, fp, r3, sl
 8005d4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d50:	f8de 4000 	ldr.w	r4, [lr]
 8005d54:	4443      	add	r3, r8
 8005d56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d62:	46f2      	mov	sl, lr
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d6a:	454f      	cmp	r7, r9
 8005d6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d70:	f84a 3b04 	str.w	r3, [sl], #4
 8005d74:	d901      	bls.n	8005d7a <__multiply+0xb4>
 8005d76:	46d6      	mov	lr, sl
 8005d78:	e7e1      	b.n	8005d3e <__multiply+0x78>
 8005d7a:	f8ce 8004 	str.w	r8, [lr, #4]
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d84:	3204      	adds	r2, #4
 8005d86:	f1ba 0f00 	cmp.w	sl, #0
 8005d8a:	d021      	beq.n	8005dd0 <__multiply+0x10a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	462c      	mov	r4, r5
 8005d90:	4689      	mov	r9, r1
 8005d92:	f04f 0800 	mov.w	r8, #0
 8005d96:	f8b9 e000 	ldrh.w	lr, [r9]
 8005d9a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8005d9e:	fb0a be0e 	mla	lr, sl, lr, fp
 8005da2:	44f0      	add	r8, lr
 8005da4:	46a3      	mov	fp, r4
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005dac:	f84b 3b04 	str.w	r3, [fp], #4
 8005db0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005db4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	fb0a e303 	mla	r3, sl, r3, lr
 8005dbe:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8005dc2:	454f      	cmp	r7, r9
 8005dc4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8005dc8:	d901      	bls.n	8005dce <__multiply+0x108>
 8005dca:	465c      	mov	r4, fp
 8005dcc:	e7e3      	b.n	8005d96 <__multiply+0xd0>
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	3504      	adds	r5, #4
 8005dd2:	e7a7      	b.n	8005d24 <__multiply+0x5e>
 8005dd4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8005dd8:	b913      	cbnz	r3, 8005de0 <__multiply+0x11a>
 8005dda:	3e01      	subs	r6, #1
 8005ddc:	2e00      	cmp	r6, #0
 8005dde:	dcf9      	bgt.n	8005dd4 <__multiply+0x10e>
 8005de0:	6106      	str	r6, [r0, #16]
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005de8 <__pow5mult>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	4615      	mov	r5, r2
 8005dee:	f012 0203 	ands.w	r2, r2, #3
 8005df2:	4606      	mov	r6, r0
 8005df4:	460f      	mov	r7, r1
 8005df6:	d007      	beq.n	8005e08 <__pow5mult+0x20>
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	4c21      	ldr	r4, [pc, #132]	; (8005e80 <__pow5mult+0x98>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e02:	f7ff fe91 	bl	8005b28 <__multadd>
 8005e06:	4607      	mov	r7, r0
 8005e08:	10ad      	asrs	r5, r5, #2
 8005e0a:	d036      	beq.n	8005e7a <__pow5mult+0x92>
 8005e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e0e:	b93c      	cbnz	r4, 8005e20 <__pow5mult+0x38>
 8005e10:	2010      	movs	r0, #16
 8005e12:	f7ff fe35 	bl	8005a80 <malloc>
 8005e16:	6270      	str	r0, [r6, #36]	; 0x24
 8005e18:	6044      	str	r4, [r0, #4]
 8005e1a:	6084      	str	r4, [r0, #8]
 8005e1c:	6004      	str	r4, [r0, #0]
 8005e1e:	60c4      	str	r4, [r0, #12]
 8005e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e28:	b94c      	cbnz	r4, 8005e3e <__pow5mult+0x56>
 8005e2a:	f240 2171 	movw	r1, #625	; 0x271
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff40 	bl	8005cb4 <__i2b>
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	6003      	str	r3, [r0, #0]
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	07eb      	lsls	r3, r5, #31
 8005e44:	d50a      	bpl.n	8005e5c <__pow5mult+0x74>
 8005e46:	4639      	mov	r1, r7
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff ff3b 	bl	8005cc6 <__multiply>
 8005e50:	4639      	mov	r1, r7
 8005e52:	4681      	mov	r9, r0
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff fe50 	bl	8005afa <_Bfree>
 8005e5a:	464f      	mov	r7, r9
 8005e5c:	106d      	asrs	r5, r5, #1
 8005e5e:	d00c      	beq.n	8005e7a <__pow5mult+0x92>
 8005e60:	6820      	ldr	r0, [r4, #0]
 8005e62:	b108      	cbz	r0, 8005e68 <__pow5mult+0x80>
 8005e64:	4604      	mov	r4, r0
 8005e66:	e7ec      	b.n	8005e42 <__pow5mult+0x5a>
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff ff2a 	bl	8005cc6 <__multiply>
 8005e72:	6020      	str	r0, [r4, #0]
 8005e74:	f8c0 8000 	str.w	r8, [r0]
 8005e78:	e7f4      	b.n	8005e64 <__pow5mult+0x7c>
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e80:	08006f30 	.word	0x08006f30

08005e84 <__lshift>:
 8005e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e88:	460c      	mov	r4, r1
 8005e8a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e8e:	6926      	ldr	r6, [r4, #16]
 8005e90:	6849      	ldr	r1, [r1, #4]
 8005e92:	68a3      	ldr	r3, [r4, #8]
 8005e94:	4456      	add	r6, sl
 8005e96:	4607      	mov	r7, r0
 8005e98:	4691      	mov	r9, r2
 8005e9a:	1c75      	adds	r5, r6, #1
 8005e9c:	42ab      	cmp	r3, r5
 8005e9e:	da02      	bge.n	8005ea6 <__lshift+0x22>
 8005ea0:	3101      	adds	r1, #1
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	e7fa      	b.n	8005e9c <__lshift+0x18>
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	f7ff fdf2 	bl	8005a90 <_Balloc>
 8005eac:	2300      	movs	r3, #0
 8005eae:	4680      	mov	r8, r0
 8005eb0:	f100 0114 	add.w	r1, r0, #20
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4553      	cmp	r3, sl
 8005eb8:	da03      	bge.n	8005ec2 <__lshift+0x3e>
 8005eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	e7f9      	b.n	8005eb6 <__lshift+0x32>
 8005ec2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8005ec6:	6920      	ldr	r0, [r4, #16]
 8005ec8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005ecc:	f019 091f 	ands.w	r9, r9, #31
 8005ed0:	f104 0114 	add.w	r1, r4, #20
 8005ed4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005ed8:	d014      	beq.n	8005f04 <__lshift+0x80>
 8005eda:	f1c9 0c20 	rsb	ip, r9, #32
 8005ede:	2200      	movs	r2, #0
 8005ee0:	6808      	ldr	r0, [r1, #0]
 8005ee2:	fa00 f009 	lsl.w	r0, r0, r9
 8005ee6:	4302      	orrs	r2, r0
 8005ee8:	469a      	mov	sl, r3
 8005eea:	f843 2b04 	str.w	r2, [r3], #4
 8005eee:	f851 2b04 	ldr.w	r2, [r1], #4
 8005ef2:	458e      	cmp	lr, r1
 8005ef4:	fa22 f20c 	lsr.w	r2, r2, ip
 8005ef8:	d8f2      	bhi.n	8005ee0 <__lshift+0x5c>
 8005efa:	f8ca 2004 	str.w	r2, [sl, #4]
 8005efe:	b142      	cbz	r2, 8005f12 <__lshift+0x8e>
 8005f00:	1cb5      	adds	r5, r6, #2
 8005f02:	e006      	b.n	8005f12 <__lshift+0x8e>
 8005f04:	3b04      	subs	r3, #4
 8005f06:	f851 2b04 	ldr.w	r2, [r1], #4
 8005f0a:	f843 2f04 	str.w	r2, [r3, #4]!
 8005f0e:	458e      	cmp	lr, r1
 8005f10:	d8f9      	bhi.n	8005f06 <__lshift+0x82>
 8005f12:	3d01      	subs	r5, #1
 8005f14:	4638      	mov	r0, r7
 8005f16:	f8c8 5010 	str.w	r5, [r8, #16]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	f7ff fded 	bl	8005afa <_Bfree>
 8005f20:	4640      	mov	r0, r8
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f26 <__mcmp>:
 8005f26:	6903      	ldr	r3, [r0, #16]
 8005f28:	690a      	ldr	r2, [r1, #16]
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	d111      	bne.n	8005f54 <__mcmp+0x2e>
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	3014      	adds	r0, #20
 8005f34:	3114      	adds	r1, #20
 8005f36:	1883      	adds	r3, r0, r2
 8005f38:	440a      	add	r2, r1
 8005f3a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005f3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005f42:	428c      	cmp	r4, r1
 8005f44:	d002      	beq.n	8005f4c <__mcmp+0x26>
 8005f46:	d307      	bcc.n	8005f58 <__mcmp+0x32>
 8005f48:	2001      	movs	r0, #1
 8005f4a:	bd10      	pop	{r4, pc}
 8005f4c:	4298      	cmp	r0, r3
 8005f4e:	d3f4      	bcc.n	8005f3a <__mcmp+0x14>
 8005f50:	2000      	movs	r0, #0
 8005f52:	bd10      	pop	{r4, pc}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	bd10      	pop	{r4, pc}

08005f5e <__mdiff>:
 8005f5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f62:	460c      	mov	r4, r1
 8005f64:	4607      	mov	r7, r0
 8005f66:	4611      	mov	r1, r2
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4615      	mov	r5, r2
 8005f6c:	f7ff ffdb 	bl	8005f26 <__mcmp>
 8005f70:	1e06      	subs	r6, r0, #0
 8005f72:	d108      	bne.n	8005f86 <__mdiff+0x28>
 8005f74:	4631      	mov	r1, r6
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff fd8a 	bl	8005a90 <_Balloc>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	6103      	str	r3, [r0, #16]
 8005f80:	6146      	str	r6, [r0, #20]
 8005f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f86:	bfbc      	itt	lt
 8005f88:	4623      	movlt	r3, r4
 8005f8a:	462c      	movlt	r4, r5
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	6861      	ldr	r1, [r4, #4]
 8005f90:	bfba      	itte	lt
 8005f92:	461d      	movlt	r5, r3
 8005f94:	2601      	movlt	r6, #1
 8005f96:	2600      	movge	r6, #0
 8005f98:	f7ff fd7a 	bl	8005a90 <_Balloc>
 8005f9c:	692b      	ldr	r3, [r5, #16]
 8005f9e:	60c6      	str	r6, [r0, #12]
 8005fa0:	6926      	ldr	r6, [r4, #16]
 8005fa2:	f105 0914 	add.w	r9, r5, #20
 8005fa6:	3414      	adds	r4, #20
 8005fa8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8005fac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005fb0:	f100 0514 	add.w	r5, r0, #20
 8005fb4:	f04f 0c00 	mov.w	ip, #0
 8005fb8:	f854 3b04 	ldr.w	r3, [r4], #4
 8005fbc:	f859 2b04 	ldr.w	r2, [r9], #4
 8005fc0:	fa1c f183 	uxtah	r1, ip, r3
 8005fc4:	fa1f fe82 	uxth.w	lr, r2
 8005fc8:	0c12      	lsrs	r2, r2, #16
 8005fca:	ebce 0101 	rsb	r1, lr, r1
 8005fce:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8005fd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005fdc:	45c8      	cmp	r8, r9
 8005fde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005fe2:	46a6      	mov	lr, r4
 8005fe4:	f845 3b04 	str.w	r3, [r5], #4
 8005fe8:	d8e6      	bhi.n	8005fb8 <__mdiff+0x5a>
 8005fea:	45be      	cmp	lr, r7
 8005fec:	d20e      	bcs.n	800600c <__mdiff+0xae>
 8005fee:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005ff2:	fa1c f281 	uxtah	r2, ip, r1
 8005ff6:	1413      	asrs	r3, r2, #16
 8005ff8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8005ffc:	b292      	uxth	r2, r2
 8005ffe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006002:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006006:	f845 2b04 	str.w	r2, [r5], #4
 800600a:	e7ee      	b.n	8005fea <__mdiff+0x8c>
 800600c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006010:	b90b      	cbnz	r3, 8006016 <__mdiff+0xb8>
 8006012:	3e01      	subs	r6, #1
 8006014:	e7fa      	b.n	800600c <__mdiff+0xae>
 8006016:	6106      	str	r6, [r0, #16]
 8006018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800601c <__ulp>:
 800601c:	4b12      	ldr	r3, [pc, #72]	; (8006068 <__ulp+0x4c>)
 800601e:	ee10 2a90 	vmov	r2, s1
 8006022:	401a      	ands	r2, r3
 8006024:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006028:	2b00      	cmp	r3, #0
 800602a:	dd02      	ble.n	8006032 <__ulp+0x16>
 800602c:	2000      	movs	r0, #0
 800602e:	4619      	mov	r1, r3
 8006030:	e017      	b.n	8006062 <__ulp+0x46>
 8006032:	425b      	negs	r3, r3
 8006034:	151b      	asrs	r3, r3, #20
 8006036:	2b13      	cmp	r3, #19
 8006038:	f04f 0000 	mov.w	r0, #0
 800603c:	f04f 0100 	mov.w	r1, #0
 8006040:	dc04      	bgt.n	800604c <__ulp+0x30>
 8006042:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006046:	fa42 f103 	asr.w	r1, r2, r3
 800604a:	e00a      	b.n	8006062 <__ulp+0x46>
 800604c:	3b14      	subs	r3, #20
 800604e:	2b1e      	cmp	r3, #30
 8006050:	f04f 0201 	mov.w	r2, #1
 8006054:	bfda      	itte	le
 8006056:	f1c3 031f 	rsble	r3, r3, #31
 800605a:	fa02 f303 	lslle.w	r3, r2, r3
 800605e:	4613      	movgt	r3, r2
 8006060:	4618      	mov	r0, r3
 8006062:	ec41 0b10 	vmov	d0, r0, r1
 8006066:	4770      	bx	lr
 8006068:	7ff00000 	.word	0x7ff00000

0800606c <__b2d>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	6905      	ldr	r5, [r0, #16]
 8006070:	f100 0614 	add.w	r6, r0, #20
 8006074:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8006078:	1f2f      	subs	r7, r5, #4
 800607a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff fdcb 	bl	8005c1a <__hi0bits>
 8006084:	f1c0 0320 	rsb	r3, r0, #32
 8006088:	280a      	cmp	r0, #10
 800608a:	600b      	str	r3, [r1, #0]
 800608c:	dc14      	bgt.n	80060b8 <__b2d+0x4c>
 800608e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006092:	fa24 f10e 	lsr.w	r1, r4, lr
 8006096:	42be      	cmp	r6, r7
 8006098:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800609c:	bf34      	ite	cc
 800609e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80060a2:	2100      	movcs	r1, #0
 80060a4:	3015      	adds	r0, #21
 80060a6:	fa04 f000 	lsl.w	r0, r4, r0
 80060aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80060ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060b2:	ea40 0201 	orr.w	r2, r0, r1
 80060b6:	e023      	b.n	8006100 <__b2d+0x94>
 80060b8:	42be      	cmp	r6, r7
 80060ba:	bf3a      	itte	cc
 80060bc:	f1a5 0708 	subcc.w	r7, r5, #8
 80060c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80060c4:	2100      	movcs	r1, #0
 80060c6:	380b      	subs	r0, #11
 80060c8:	d015      	beq.n	80060f6 <__b2d+0x8a>
 80060ca:	4084      	lsls	r4, r0
 80060cc:	f1c0 0520 	rsb	r5, r0, #32
 80060d0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80060d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80060d8:	42b7      	cmp	r7, r6
 80060da:	fa21 fe05 	lsr.w	lr, r1, r5
 80060de:	ea44 030e 	orr.w	r3, r4, lr
 80060e2:	bf8c      	ite	hi
 80060e4:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80060e8:	2400      	movls	r4, #0
 80060ea:	fa01 f000 	lsl.w	r0, r1, r0
 80060ee:	40ec      	lsrs	r4, r5
 80060f0:	ea40 0204 	orr.w	r2, r0, r4
 80060f4:	e004      	b.n	8006100 <__b2d+0x94>
 80060f6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80060fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060fe:	460a      	mov	r2, r1
 8006100:	ec43 2b10 	vmov	d0, r2, r3
 8006104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006106 <__d2b>:
 8006106:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800610a:	460e      	mov	r6, r1
 800610c:	2101      	movs	r1, #1
 800610e:	ec59 8b10 	vmov	r8, r9, d0
 8006112:	4615      	mov	r5, r2
 8006114:	f7ff fcbc 	bl	8005a90 <_Balloc>
 8006118:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800611c:	4607      	mov	r7, r0
 800611e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006122:	b10c      	cbz	r4, 8006128 <__d2b+0x22>
 8006124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	f1b8 0f00 	cmp.w	r8, #0
 800612e:	d019      	beq.n	8006164 <__d2b+0x5e>
 8006130:	a802      	add	r0, sp, #8
 8006132:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006136:	f7ff fd90 	bl	8005c5a <__lo0bits>
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	b148      	cbz	r0, 8006152 <__d2b+0x4c>
 800613e:	9a01      	ldr	r2, [sp, #4]
 8006140:	f1c0 0120 	rsb	r1, r0, #32
 8006144:	fa02 f101 	lsl.w	r1, r2, r1
 8006148:	430b      	orrs	r3, r1
 800614a:	40c2      	lsrs	r2, r0
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	9201      	str	r2, [sp, #4]
 8006150:	e000      	b.n	8006154 <__d2b+0x4e>
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf14      	ite	ne
 800615c:	2102      	movne	r1, #2
 800615e:	2101      	moveq	r1, #1
 8006160:	6139      	str	r1, [r7, #16]
 8006162:	e007      	b.n	8006174 <__d2b+0x6e>
 8006164:	a801      	add	r0, sp, #4
 8006166:	f7ff fd78 	bl	8005c5a <__lo0bits>
 800616a:	9b01      	ldr	r3, [sp, #4]
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	2101      	movs	r1, #1
 8006170:	6139      	str	r1, [r7, #16]
 8006172:	3020      	adds	r0, #32
 8006174:	b134      	cbz	r4, 8006184 <__d2b+0x7e>
 8006176:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800617a:	4404      	add	r4, r0
 800617c:	6034      	str	r4, [r6, #0]
 800617e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006182:	e009      	b.n	8006198 <__d2b+0x92>
 8006184:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800618c:	6030      	str	r0, [r6, #0]
 800618e:	6918      	ldr	r0, [r3, #16]
 8006190:	f7ff fd43 	bl	8005c1a <__hi0bits>
 8006194:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006198:	6028      	str	r0, [r5, #0]
 800619a:	4638      	mov	r0, r7
 800619c:	b003      	add	sp, #12
 800619e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080061a2 <__ratio>:
 80061a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061a6:	4688      	mov	r8, r1
 80061a8:	4669      	mov	r1, sp
 80061aa:	4681      	mov	r9, r0
 80061ac:	f7ff ff5e 	bl	800606c <__b2d>
 80061b0:	a901      	add	r1, sp, #4
 80061b2:	4640      	mov	r0, r8
 80061b4:	ec55 4b10 	vmov	r4, r5, d0
 80061b8:	f7ff ff58 	bl	800606c <__b2d>
 80061bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80061c4:	1a9a      	subs	r2, r3, r2
 80061c6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80061ca:	1ac9      	subs	r1, r1, r3
 80061cc:	ec57 6b10 	vmov	r6, r7, d0
 80061d0:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfcc      	ite	gt
 80061d8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80061dc:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80061e0:	4632      	mov	r2, r6
 80061e2:	463b      	mov	r3, r7
 80061e4:	4620      	mov	r0, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	f7fa fb84 	bl	80008f4 <__aeabi_ddiv>
 80061ec:	ec41 0b10 	vmov	d0, r0, r1
 80061f0:	b003      	add	sp, #12
 80061f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080061f6 <__copybits>:
 80061f6:	3901      	subs	r1, #1
 80061f8:	b510      	push	{r4, lr}
 80061fa:	1149      	asrs	r1, r1, #5
 80061fc:	6914      	ldr	r4, [r2, #16]
 80061fe:	3101      	adds	r1, #1
 8006200:	f102 0314 	add.w	r3, r2, #20
 8006204:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006208:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800620c:	42a3      	cmp	r3, r4
 800620e:	4602      	mov	r2, r0
 8006210:	d204      	bcs.n	800621c <__copybits+0x26>
 8006212:	f853 2b04 	ldr.w	r2, [r3], #4
 8006216:	f840 2b04 	str.w	r2, [r0], #4
 800621a:	e7f7      	b.n	800620c <__copybits+0x16>
 800621c:	2300      	movs	r3, #0
 800621e:	428a      	cmp	r2, r1
 8006220:	d202      	bcs.n	8006228 <__copybits+0x32>
 8006222:	f842 3b04 	str.w	r3, [r2], #4
 8006226:	e7fa      	b.n	800621e <__copybits+0x28>
 8006228:	bd10      	pop	{r4, pc}

0800622a <__any_on>:
 800622a:	f100 0214 	add.w	r2, r0, #20
 800622e:	6900      	ldr	r0, [r0, #16]
 8006230:	114b      	asrs	r3, r1, #5
 8006232:	4298      	cmp	r0, r3
 8006234:	b510      	push	{r4, lr}
 8006236:	db0c      	blt.n	8006252 <__any_on+0x28>
 8006238:	dd0c      	ble.n	8006254 <__any_on+0x2a>
 800623a:	f011 011f 	ands.w	r1, r1, #31
 800623e:	d009      	beq.n	8006254 <__any_on+0x2a>
 8006240:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006244:	fa24 f001 	lsr.w	r0, r4, r1
 8006248:	fa00 f101 	lsl.w	r1, r0, r1
 800624c:	428c      	cmp	r4, r1
 800624e:	d10c      	bne.n	800626a <__any_on+0x40>
 8006250:	e000      	b.n	8006254 <__any_on+0x2a>
 8006252:	4603      	mov	r3, r0
 8006254:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006258:	4293      	cmp	r3, r2
 800625a:	d904      	bls.n	8006266 <__any_on+0x3c>
 800625c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006260:	2900      	cmp	r1, #0
 8006262:	d0f9      	beq.n	8006258 <__any_on+0x2e>
 8006264:	e001      	b.n	800626a <__any_on+0x40>
 8006266:	2000      	movs	r0, #0
 8006268:	bd10      	pop	{r4, pc}
 800626a:	2001      	movs	r0, #1
 800626c:	bd10      	pop	{r4, pc}

0800626e <_calloc_r>:
 800626e:	b538      	push	{r3, r4, r5, lr}
 8006270:	fb02 f401 	mul.w	r4, r2, r1
 8006274:	4621      	mov	r1, r4
 8006276:	f000 f84f 	bl	8006318 <_malloc_r>
 800627a:	4605      	mov	r5, r0
 800627c:	b118      	cbz	r0, 8006286 <_calloc_r+0x18>
 800627e:	4622      	mov	r2, r4
 8006280:	2100      	movs	r1, #0
 8006282:	f7fc f962 	bl	800254a <memset>
 8006286:	4628      	mov	r0, r5
 8006288:	bd38      	pop	{r3, r4, r5, pc}
	...

0800628c <_free_r>:
 800628c:	b530      	push	{r4, r5, lr}
 800628e:	2900      	cmp	r1, #0
 8006290:	d03e      	beq.n	8006310 <_free_r+0x84>
 8006292:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006296:	1f0b      	subs	r3, r1, #4
 8006298:	491e      	ldr	r1, [pc, #120]	; (8006314 <_free_r+0x88>)
 800629a:	2a00      	cmp	r2, #0
 800629c:	bfb8      	it	lt
 800629e:	189b      	addlt	r3, r3, r2
 80062a0:	680a      	ldr	r2, [r1, #0]
 80062a2:	460c      	mov	r4, r1
 80062a4:	b912      	cbnz	r2, 80062ac <_free_r+0x20>
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	600b      	str	r3, [r1, #0]
 80062aa:	bd30      	pop	{r4, r5, pc}
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d90e      	bls.n	80062ce <_free_r+0x42>
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	1858      	adds	r0, r3, r1
 80062b4:	4282      	cmp	r2, r0
 80062b6:	bf04      	itt	eq
 80062b8:	6810      	ldreq	r0, [r2, #0]
 80062ba:	6852      	ldreq	r2, [r2, #4]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	bf04      	itt	eq
 80062c0:	1809      	addeq	r1, r1, r0
 80062c2:	6019      	streq	r1, [r3, #0]
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd30      	pop	{r4, r5, pc}
 80062c8:	4299      	cmp	r1, r3
 80062ca:	d803      	bhi.n	80062d4 <_free_r+0x48>
 80062cc:	460a      	mov	r2, r1
 80062ce:	6851      	ldr	r1, [r2, #4]
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d1f9      	bne.n	80062c8 <_free_r+0x3c>
 80062d4:	6814      	ldr	r4, [r2, #0]
 80062d6:	1915      	adds	r5, r2, r4
 80062d8:	429d      	cmp	r5, r3
 80062da:	d10a      	bne.n	80062f2 <_free_r+0x66>
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4423      	add	r3, r4
 80062e0:	18d0      	adds	r0, r2, r3
 80062e2:	4281      	cmp	r1, r0
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	d113      	bne.n	8006310 <_free_r+0x84>
 80062e8:	6808      	ldr	r0, [r1, #0]
 80062ea:	4403      	add	r3, r0
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	684b      	ldr	r3, [r1, #4]
 80062f0:	e00d      	b.n	800630e <_free_r+0x82>
 80062f2:	d902      	bls.n	80062fa <_free_r+0x6e>
 80062f4:	230c      	movs	r3, #12
 80062f6:	6003      	str	r3, [r0, #0]
 80062f8:	bd30      	pop	{r4, r5, pc}
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	181c      	adds	r4, r3, r0
 80062fe:	42a1      	cmp	r1, r4
 8006300:	bf04      	itt	eq
 8006302:	680c      	ldreq	r4, [r1, #0]
 8006304:	6849      	ldreq	r1, [r1, #4]
 8006306:	6059      	str	r1, [r3, #4]
 8006308:	bf04      	itt	eq
 800630a:	1900      	addeq	r0, r0, r4
 800630c:	6018      	streq	r0, [r3, #0]
 800630e:	6053      	str	r3, [r2, #4]
 8006310:	bd30      	pop	{r4, r5, pc}
 8006312:	bf00      	nop
 8006314:	20000e20 	.word	0x20000e20

08006318 <_malloc_r>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	1ccd      	adds	r5, r1, #3
 800631c:	f025 0503 	bic.w	r5, r5, #3
 8006320:	3508      	adds	r5, #8
 8006322:	2d0c      	cmp	r5, #12
 8006324:	bf38      	it	cc
 8006326:	250c      	movcc	r5, #12
 8006328:	2d00      	cmp	r5, #0
 800632a:	4606      	mov	r6, r0
 800632c:	da03      	bge.n	8006336 <_malloc_r+0x1e>
 800632e:	230c      	movs	r3, #12
 8006330:	6033      	str	r3, [r6, #0]
 8006332:	2000      	movs	r0, #0
 8006334:	bd70      	pop	{r4, r5, r6, pc}
 8006336:	42a9      	cmp	r1, r5
 8006338:	d8f9      	bhi.n	800632e <_malloc_r+0x16>
 800633a:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <_malloc_r+0xa0>)
 800633c:	681c      	ldr	r4, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	4621      	mov	r1, r4
 8006342:	b1a1      	cbz	r1, 800636e <_malloc_r+0x56>
 8006344:	680b      	ldr	r3, [r1, #0]
 8006346:	1b5b      	subs	r3, r3, r5
 8006348:	d40e      	bmi.n	8006368 <_malloc_r+0x50>
 800634a:	2b0b      	cmp	r3, #11
 800634c:	d903      	bls.n	8006356 <_malloc_r+0x3e>
 800634e:	600b      	str	r3, [r1, #0]
 8006350:	18cc      	adds	r4, r1, r3
 8006352:	50cd      	str	r5, [r1, r3]
 8006354:	e01e      	b.n	8006394 <_malloc_r+0x7c>
 8006356:	428c      	cmp	r4, r1
 8006358:	bf0d      	iteet	eq
 800635a:	6863      	ldreq	r3, [r4, #4]
 800635c:	684b      	ldrne	r3, [r1, #4]
 800635e:	6063      	strne	r3, [r4, #4]
 8006360:	6013      	streq	r3, [r2, #0]
 8006362:	bf18      	it	ne
 8006364:	460c      	movne	r4, r1
 8006366:	e015      	b.n	8006394 <_malloc_r+0x7c>
 8006368:	460c      	mov	r4, r1
 800636a:	6849      	ldr	r1, [r1, #4]
 800636c:	e7e9      	b.n	8006342 <_malloc_r+0x2a>
 800636e:	4c13      	ldr	r4, [pc, #76]	; (80063bc <_malloc_r+0xa4>)
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	b91b      	cbnz	r3, 800637c <_malloc_r+0x64>
 8006374:	4630      	mov	r0, r6
 8006376:	f000 fab7 	bl	80068e8 <_sbrk_r>
 800637a:	6020      	str	r0, [r4, #0]
 800637c:	4629      	mov	r1, r5
 800637e:	4630      	mov	r0, r6
 8006380:	f000 fab2 	bl	80068e8 <_sbrk_r>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d0d2      	beq.n	800632e <_malloc_r+0x16>
 8006388:	1cc4      	adds	r4, r0, #3
 800638a:	f024 0403 	bic.w	r4, r4, #3
 800638e:	42a0      	cmp	r0, r4
 8006390:	d10a      	bne.n	80063a8 <_malloc_r+0x90>
 8006392:	6025      	str	r5, [r4, #0]
 8006394:	f104 000b 	add.w	r0, r4, #11
 8006398:	1d23      	adds	r3, r4, #4
 800639a:	f020 0007 	bic.w	r0, r0, #7
 800639e:	1ac3      	subs	r3, r0, r3
 80063a0:	d009      	beq.n	80063b6 <_malloc_r+0x9e>
 80063a2:	425a      	negs	r2, r3
 80063a4:	50e2      	str	r2, [r4, r3]
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	1a21      	subs	r1, r4, r0
 80063aa:	4630      	mov	r0, r6
 80063ac:	f000 fa9c 	bl	80068e8 <_sbrk_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d1ee      	bne.n	8006392 <_malloc_r+0x7a>
 80063b4:	e7bb      	b.n	800632e <_malloc_r+0x16>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	20000e20 	.word	0x20000e20
 80063bc:	20000e1c 	.word	0x20000e1c

080063c0 <__ssputs_r>:
 80063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	688e      	ldr	r6, [r1, #8]
 80063c6:	429e      	cmp	r6, r3
 80063c8:	4682      	mov	sl, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4691      	mov	r9, r2
 80063ce:	4698      	mov	r8, r3
 80063d0:	d83e      	bhi.n	8006450 <__ssputs_r+0x90>
 80063d2:	898a      	ldrh	r2, [r1, #12]
 80063d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063d8:	d03a      	beq.n	8006450 <__ssputs_r+0x90>
 80063da:	6825      	ldr	r5, [r4, #0]
 80063dc:	6909      	ldr	r1, [r1, #16]
 80063de:	1a6f      	subs	r7, r5, r1
 80063e0:	6965      	ldr	r5, [r4, #20]
 80063e2:	2302      	movs	r3, #2
 80063e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80063ec:	1c7b      	adds	r3, r7, #1
 80063ee:	4443      	add	r3, r8
 80063f0:	429d      	cmp	r5, r3
 80063f2:	bf38      	it	cc
 80063f4:	461d      	movcc	r5, r3
 80063f6:	0553      	lsls	r3, r2, #21
 80063f8:	d50f      	bpl.n	800641a <__ssputs_r+0x5a>
 80063fa:	4629      	mov	r1, r5
 80063fc:	f7ff ff8c 	bl	8006318 <_malloc_r>
 8006400:	4606      	mov	r6, r0
 8006402:	b198      	cbz	r0, 800642c <__ssputs_r+0x6c>
 8006404:	463a      	mov	r2, r7
 8006406:	6921      	ldr	r1, [r4, #16]
 8006408:	f7fc f894 	bl	8002534 <memcpy>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	e013      	b.n	8006442 <__ssputs_r+0x82>
 800641a:	462a      	mov	r2, r5
 800641c:	f000 fb3d 	bl	8006a9a <_realloc_r>
 8006420:	4606      	mov	r6, r0
 8006422:	b970      	cbnz	r0, 8006442 <__ssputs_r+0x82>
 8006424:	6921      	ldr	r1, [r4, #16]
 8006426:	4650      	mov	r0, sl
 8006428:	f7ff ff30 	bl	800628c <_free_r>
 800642c:	230c      	movs	r3, #12
 800642e:	f8ca 3000 	str.w	r3, [sl]
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	6126      	str	r6, [r4, #16]
 8006444:	6165      	str	r5, [r4, #20]
 8006446:	443e      	add	r6, r7
 8006448:	1bed      	subs	r5, r5, r7
 800644a:	6026      	str	r6, [r4, #0]
 800644c:	60a5      	str	r5, [r4, #8]
 800644e:	4646      	mov	r6, r8
 8006450:	4546      	cmp	r6, r8
 8006452:	bf28      	it	cs
 8006454:	4646      	movcs	r6, r8
 8006456:	4632      	mov	r2, r6
 8006458:	4649      	mov	r1, r9
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	f000 fb02 	bl	8006a64 <memmove>
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	1b9b      	subs	r3, r3, r6
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	441e      	add	r6, r3
 800646a:	6026      	str	r6, [r4, #0]
 800646c:	2000      	movs	r0, #0
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006474 <_svfiprintf_r>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	b09d      	sub	sp, #116	; 0x74
 800647a:	4680      	mov	r8, r0
 800647c:	9303      	str	r3, [sp, #12]
 800647e:	898b      	ldrh	r3, [r1, #12]
 8006480:	061c      	lsls	r4, r3, #24
 8006482:	460d      	mov	r5, r1
 8006484:	4616      	mov	r6, r2
 8006486:	d50d      	bpl.n	80064a4 <_svfiprintf_r+0x30>
 8006488:	690b      	ldr	r3, [r1, #16]
 800648a:	b95b      	cbnz	r3, 80064a4 <_svfiprintf_r+0x30>
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	f7ff ff43 	bl	8006318 <_malloc_r>
 8006492:	6028      	str	r0, [r5, #0]
 8006494:	6128      	str	r0, [r5, #16]
 8006496:	b918      	cbnz	r0, 80064a0 <_svfiprintf_r+0x2c>
 8006498:	230c      	movs	r3, #12
 800649a:	f8c8 3000 	str.w	r3, [r8]
 800649e:	e0cd      	b.n	800663c <_svfiprintf_r+0x1c8>
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	616b      	str	r3, [r5, #20]
 80064a4:	2300      	movs	r3, #0
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	2320      	movs	r3, #32
 80064aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ae:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800664c <_svfiprintf_r+0x1d8>
 80064b2:	2330      	movs	r3, #48	; 0x30
 80064b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064b8:	4637      	mov	r7, r6
 80064ba:	463c      	mov	r4, r7
 80064bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064c0:	b91b      	cbnz	r3, 80064ca <_svfiprintf_r+0x56>
 80064c2:	ebb7 0906 	subs.w	r9, r7, r6
 80064c6:	d010      	beq.n	80064ea <_svfiprintf_r+0x76>
 80064c8:	e003      	b.n	80064d2 <_svfiprintf_r+0x5e>
 80064ca:	2b25      	cmp	r3, #37	; 0x25
 80064cc:	d0f9      	beq.n	80064c2 <_svfiprintf_r+0x4e>
 80064ce:	4627      	mov	r7, r4
 80064d0:	e7f3      	b.n	80064ba <_svfiprintf_r+0x46>
 80064d2:	464b      	mov	r3, r9
 80064d4:	4632      	mov	r2, r6
 80064d6:	4629      	mov	r1, r5
 80064d8:	4640      	mov	r0, r8
 80064da:	f7ff ff71 	bl	80063c0 <__ssputs_r>
 80064de:	3001      	adds	r0, #1
 80064e0:	f000 80a7 	beq.w	8006632 <_svfiprintf_r+0x1be>
 80064e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e6:	444b      	add	r3, r9
 80064e8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ea:	783b      	ldrb	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80a0 	beq.w	8006632 <_svfiprintf_r+0x1be>
 80064f2:	2300      	movs	r3, #0
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	9307      	str	r3, [sp, #28]
 80064fc:	9205      	str	r2, [sp, #20]
 80064fe:	9306      	str	r3, [sp, #24]
 8006500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006504:	931a      	str	r3, [sp, #104]	; 0x68
 8006506:	2601      	movs	r6, #1
 8006508:	2205      	movs	r2, #5
 800650a:	7821      	ldrb	r1, [r4, #0]
 800650c:	484e      	ldr	r0, [pc, #312]	; (8006648 <_svfiprintf_r+0x1d4>)
 800650e:	f7f9 febf 	bl	8000290 <memchr>
 8006512:	1c67      	adds	r7, r4, #1
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	b138      	cbz	r0, 8006528 <_svfiprintf_r+0xb4>
 8006518:	4a4b      	ldr	r2, [pc, #300]	; (8006648 <_svfiprintf_r+0x1d4>)
 800651a:	1a80      	subs	r0, r0, r2
 800651c:	fa06 f000 	lsl.w	r0, r6, r0
 8006520:	4318      	orrs	r0, r3
 8006522:	9004      	str	r0, [sp, #16]
 8006524:	463c      	mov	r4, r7
 8006526:	e7ef      	b.n	8006508 <_svfiprintf_r+0x94>
 8006528:	06d9      	lsls	r1, r3, #27
 800652a:	bf44      	itt	mi
 800652c:	2220      	movmi	r2, #32
 800652e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006532:	071a      	lsls	r2, r3, #28
 8006534:	bf44      	itt	mi
 8006536:	222b      	movmi	r2, #43	; 0x2b
 8006538:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800653c:	7822      	ldrb	r2, [r4, #0]
 800653e:	2a2a      	cmp	r2, #42	; 0x2a
 8006540:	d003      	beq.n	800654a <_svfiprintf_r+0xd6>
 8006542:	9a07      	ldr	r2, [sp, #28]
 8006544:	2100      	movs	r1, #0
 8006546:	200a      	movs	r0, #10
 8006548:	e00b      	b.n	8006562 <_svfiprintf_r+0xee>
 800654a:	9a03      	ldr	r2, [sp, #12]
 800654c:	1d11      	adds	r1, r2, #4
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	9103      	str	r1, [sp, #12]
 8006552:	2a00      	cmp	r2, #0
 8006554:	da10      	bge.n	8006578 <_svfiprintf_r+0x104>
 8006556:	4252      	negs	r2, r2
 8006558:	f043 0002 	orr.w	r0, r3, #2
 800655c:	9207      	str	r2, [sp, #28]
 800655e:	9004      	str	r0, [sp, #16]
 8006560:	e00b      	b.n	800657a <_svfiprintf_r+0x106>
 8006562:	4627      	mov	r7, r4
 8006564:	3401      	adds	r4, #1
 8006566:	783b      	ldrb	r3, [r7, #0]
 8006568:	3b30      	subs	r3, #48	; 0x30
 800656a:	2b09      	cmp	r3, #9
 800656c:	d803      	bhi.n	8006576 <_svfiprintf_r+0x102>
 800656e:	fb00 3202 	mla	r2, r0, r2, r3
 8006572:	2101      	movs	r1, #1
 8006574:	e7f5      	b.n	8006562 <_svfiprintf_r+0xee>
 8006576:	b101      	cbz	r1, 800657a <_svfiprintf_r+0x106>
 8006578:	9207      	str	r2, [sp, #28]
 800657a:	783b      	ldrb	r3, [r7, #0]
 800657c:	2b2e      	cmp	r3, #46	; 0x2e
 800657e:	d11e      	bne.n	80065be <_svfiprintf_r+0x14a>
 8006580:	787b      	ldrb	r3, [r7, #1]
 8006582:	2b2a      	cmp	r3, #42	; 0x2a
 8006584:	d10a      	bne.n	800659c <_svfiprintf_r+0x128>
 8006586:	9b03      	ldr	r3, [sp, #12]
 8006588:	1d1a      	adds	r2, r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	9203      	str	r2, [sp, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	bfb8      	it	lt
 8006592:	f04f 33ff 	movlt.w	r3, #4294967295
 8006596:	3702      	adds	r7, #2
 8006598:	9305      	str	r3, [sp, #20]
 800659a:	e010      	b.n	80065be <_svfiprintf_r+0x14a>
 800659c:	2300      	movs	r3, #0
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	1c78      	adds	r0, r7, #1
 80065a2:	4619      	mov	r1, r3
 80065a4:	240a      	movs	r4, #10
 80065a6:	4607      	mov	r7, r0
 80065a8:	3001      	adds	r0, #1
 80065aa:	783a      	ldrb	r2, [r7, #0]
 80065ac:	3a30      	subs	r2, #48	; 0x30
 80065ae:	2a09      	cmp	r2, #9
 80065b0:	d803      	bhi.n	80065ba <_svfiprintf_r+0x146>
 80065b2:	fb04 2101 	mla	r1, r4, r1, r2
 80065b6:	2301      	movs	r3, #1
 80065b8:	e7f5      	b.n	80065a6 <_svfiprintf_r+0x132>
 80065ba:	b103      	cbz	r3, 80065be <_svfiprintf_r+0x14a>
 80065bc:	9105      	str	r1, [sp, #20]
 80065be:	2203      	movs	r2, #3
 80065c0:	7839      	ldrb	r1, [r7, #0]
 80065c2:	4822      	ldr	r0, [pc, #136]	; (800664c <_svfiprintf_r+0x1d8>)
 80065c4:	f7f9 fe64 	bl	8000290 <memchr>
 80065c8:	b140      	cbz	r0, 80065dc <_svfiprintf_r+0x168>
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	ebcb 0000 	rsb	r0, fp, r0
 80065d0:	fa03 f000 	lsl.w	r0, r3, r0
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	4318      	orrs	r0, r3
 80065d8:	9004      	str	r0, [sp, #16]
 80065da:	3701      	adds	r7, #1
 80065dc:	7839      	ldrb	r1, [r7, #0]
 80065de:	481c      	ldr	r0, [pc, #112]	; (8006650 <_svfiprintf_r+0x1dc>)
 80065e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e4:	2206      	movs	r2, #6
 80065e6:	1c7e      	adds	r6, r7, #1
 80065e8:	f7f9 fe52 	bl	8000290 <memchr>
 80065ec:	b188      	cbz	r0, 8006612 <_svfiprintf_r+0x19e>
 80065ee:	4b19      	ldr	r3, [pc, #100]	; (8006654 <_svfiprintf_r+0x1e0>)
 80065f0:	b933      	cbnz	r3, 8006600 <_svfiprintf_r+0x18c>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	3307      	adds	r3, #7
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	3308      	adds	r3, #8
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	e014      	b.n	800662a <_svfiprintf_r+0x1b6>
 8006600:	ab03      	add	r3, sp, #12
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	462a      	mov	r2, r5
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <_svfiprintf_r+0x1e4>)
 8006608:	a904      	add	r1, sp, #16
 800660a:	4640      	mov	r0, r8
 800660c:	f7fc f83a 	bl	8002684 <_printf_float>
 8006610:	e007      	b.n	8006622 <_svfiprintf_r+0x1ae>
 8006612:	ab03      	add	r3, sp, #12
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	462a      	mov	r2, r5
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <_svfiprintf_r+0x1e4>)
 800661a:	a904      	add	r1, sp, #16
 800661c:	4640      	mov	r0, r8
 800661e:	f7fc fad1 	bl	8002bc4 <_printf_i>
 8006622:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006626:	4682      	mov	sl, r0
 8006628:	d003      	beq.n	8006632 <_svfiprintf_r+0x1be>
 800662a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662c:	4453      	add	r3, sl
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	e742      	b.n	80064b8 <_svfiprintf_r+0x44>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	065b      	lsls	r3, r3, #25
 8006636:	d401      	bmi.n	800663c <_svfiprintf_r+0x1c8>
 8006638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800663a:	e001      	b.n	8006640 <_svfiprintf_r+0x1cc>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	b01d      	add	sp, #116	; 0x74
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	bf00      	nop
 8006648:	08006f3c 	.word	0x08006f3c
 800664c:	08006f42 	.word	0x08006f42
 8006650:	08006f46 	.word	0x08006f46
 8006654:	08002685 	.word	0x08002685
 8006658:	080063c1 	.word	0x080063c1

0800665c <__sfputc_r>:
 800665c:	6893      	ldr	r3, [r2, #8]
 800665e:	3b01      	subs	r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	b410      	push	{r4}
 8006664:	6093      	str	r3, [r2, #8]
 8006666:	da09      	bge.n	800667c <__sfputc_r+0x20>
 8006668:	6994      	ldr	r4, [r2, #24]
 800666a:	42a3      	cmp	r3, r4
 800666c:	db02      	blt.n	8006674 <__sfputc_r+0x18>
 800666e:	b2cb      	uxtb	r3, r1
 8006670:	2b0a      	cmp	r3, #10
 8006672:	d103      	bne.n	800667c <__sfputc_r+0x20>
 8006674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006678:	f7fd be24 	b.w	80042c4 <__swbuf_r>
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	1c58      	adds	r0, r3, #1
 8006680:	6010      	str	r0, [r2, #0]
 8006682:	7019      	strb	r1, [r3, #0]
 8006684:	b2c8      	uxtb	r0, r1
 8006686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800668a:	4770      	bx	lr

0800668c <__sfputs_r>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	4606      	mov	r6, r0
 8006690:	460f      	mov	r7, r1
 8006692:	4614      	mov	r4, r2
 8006694:	18d5      	adds	r5, r2, r3
 8006696:	42ac      	cmp	r4, r5
 8006698:	d008      	beq.n	80066ac <__sfputs_r+0x20>
 800669a:	463a      	mov	r2, r7
 800669c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff ffdb 	bl	800665c <__sfputc_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	d1f5      	bne.n	8006696 <__sfputs_r+0xa>
 80066aa:	e000      	b.n	80066ae <__sfputs_r+0x22>
 80066ac:	2000      	movs	r0, #0
 80066ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066b0 <_vfiprintf_r>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	b09d      	sub	sp, #116	; 0x74
 80066b6:	460c      	mov	r4, r1
 80066b8:	4617      	mov	r7, r2
 80066ba:	9303      	str	r3, [sp, #12]
 80066bc:	4606      	mov	r6, r0
 80066be:	b118      	cbz	r0, 80066c8 <_vfiprintf_r+0x18>
 80066c0:	6983      	ldr	r3, [r0, #24]
 80066c2:	b90b      	cbnz	r3, 80066c8 <_vfiprintf_r+0x18>
 80066c4:	f7fe fde2 	bl	800528c <__sinit>
 80066c8:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <_vfiprintf_r+0x218>)
 80066ca:	429c      	cmp	r4, r3
 80066cc:	d101      	bne.n	80066d2 <_vfiprintf_r+0x22>
 80066ce:	6874      	ldr	r4, [r6, #4]
 80066d0:	e008      	b.n	80066e4 <_vfiprintf_r+0x34>
 80066d2:	4b7e      	ldr	r3, [pc, #504]	; (80068cc <_vfiprintf_r+0x21c>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	d101      	bne.n	80066dc <_vfiprintf_r+0x2c>
 80066d8:	68b4      	ldr	r4, [r6, #8]
 80066da:	e003      	b.n	80066e4 <_vfiprintf_r+0x34>
 80066dc:	4b7c      	ldr	r3, [pc, #496]	; (80068d0 <_vfiprintf_r+0x220>)
 80066de:	429c      	cmp	r4, r3
 80066e0:	bf08      	it	eq
 80066e2:	68f4      	ldreq	r4, [r6, #12]
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	0718      	lsls	r0, r3, #28
 80066e8:	d50c      	bpl.n	8006704 <_vfiprintf_r+0x54>
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	b153      	cbz	r3, 8006704 <_vfiprintf_r+0x54>
 80066ee:	2300      	movs	r3, #0
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	2320      	movs	r3, #32
 80066f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066f8:	2330      	movs	r3, #48	; 0x30
 80066fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066fe:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80068d4 <_vfiprintf_r+0x224>
 8006702:	e044      	b.n	800678e <_vfiprintf_r+0xde>
 8006704:	4621      	mov	r1, r4
 8006706:	4630      	mov	r0, r6
 8006708:	f7fd fe30 	bl	800436c <__swsetup_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	d0ee      	beq.n	80066ee <_vfiprintf_r+0x3e>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	e0d5      	b.n	80068c2 <_vfiprintf_r+0x212>
 8006716:	9a03      	ldr	r2, [sp, #12]
 8006718:	1d11      	adds	r1, r2, #4
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	9103      	str	r1, [sp, #12]
 800671e:	2a00      	cmp	r2, #0
 8006720:	f280 808c 	bge.w	800683c <_vfiprintf_r+0x18c>
 8006724:	4252      	negs	r2, r2
 8006726:	f043 0002 	orr.w	r0, r3, #2
 800672a:	9207      	str	r2, [sp, #28]
 800672c:	9004      	str	r0, [sp, #16]
 800672e:	f898 3000 	ldrb.w	r3, [r8]
 8006732:	2b2e      	cmp	r3, #46	; 0x2e
 8006734:	f000 8084 	beq.w	8006840 <_vfiprintf_r+0x190>
 8006738:	2203      	movs	r2, #3
 800673a:	f898 1000 	ldrb.w	r1, [r8]
 800673e:	4865      	ldr	r0, [pc, #404]	; (80068d4 <_vfiprintf_r+0x224>)
 8006740:	f7f9 fda6 	bl	8000290 <memchr>
 8006744:	b148      	cbz	r0, 800675a <_vfiprintf_r+0xaa>
 8006746:	2340      	movs	r3, #64	; 0x40
 8006748:	ebcb 0000 	rsb	r0, fp, r0
 800674c:	fa03 f000 	lsl.w	r0, r3, r0
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	4318      	orrs	r0, r3
 8006754:	9004      	str	r0, [sp, #16]
 8006756:	f108 0801 	add.w	r8, r8, #1
 800675a:	f898 1000 	ldrb.w	r1, [r8]
 800675e:	485e      	ldr	r0, [pc, #376]	; (80068d8 <_vfiprintf_r+0x228>)
 8006760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006764:	2206      	movs	r2, #6
 8006766:	f108 0701 	add.w	r7, r8, #1
 800676a:	f7f9 fd91 	bl	8000290 <memchr>
 800676e:	2800      	cmp	r0, #0
 8006770:	f000 8095 	beq.w	800689e <_vfiprintf_r+0x1ee>
 8006774:	4b59      	ldr	r3, [pc, #356]	; (80068dc <_vfiprintf_r+0x22c>)
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 8088 	bne.w	800688c <_vfiprintf_r+0x1dc>
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	3307      	adds	r3, #7
 8006780:	f023 0307 	bic.w	r3, r3, #7
 8006784:	3308      	adds	r3, #8
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678a:	4453      	add	r3, sl
 800678c:	9309      	str	r3, [sp, #36]	; 0x24
 800678e:	46b8      	mov	r8, r7
 8006790:	4645      	mov	r5, r8
 8006792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006796:	b91b      	cbnz	r3, 80067a0 <_vfiprintf_r+0xf0>
 8006798:	ebb8 0907 	subs.w	r9, r8, r7
 800679c:	d00f      	beq.n	80067be <_vfiprintf_r+0x10e>
 800679e:	e003      	b.n	80067a8 <_vfiprintf_r+0xf8>
 80067a0:	2b25      	cmp	r3, #37	; 0x25
 80067a2:	d0f9      	beq.n	8006798 <_vfiprintf_r+0xe8>
 80067a4:	46a8      	mov	r8, r5
 80067a6:	e7f3      	b.n	8006790 <_vfiprintf_r+0xe0>
 80067a8:	464b      	mov	r3, r9
 80067aa:	463a      	mov	r2, r7
 80067ac:	4621      	mov	r1, r4
 80067ae:	4630      	mov	r0, r6
 80067b0:	f7ff ff6c 	bl	800668c <__sfputs_r>
 80067b4:	3001      	adds	r0, #1
 80067b6:	d07f      	beq.n	80068b8 <_vfiprintf_r+0x208>
 80067b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ba:	444b      	add	r3, r9
 80067bc:	9309      	str	r3, [sp, #36]	; 0x24
 80067be:	f898 3000 	ldrb.w	r3, [r8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d078      	beq.n	80068b8 <_vfiprintf_r+0x208>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	9205      	str	r2, [sp, #20]
 80067d2:	9306      	str	r3, [sp, #24]
 80067d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067d8:	931a      	str	r3, [sp, #104]	; 0x68
 80067da:	2701      	movs	r7, #1
 80067dc:	2205      	movs	r2, #5
 80067de:	7829      	ldrb	r1, [r5, #0]
 80067e0:	483f      	ldr	r0, [pc, #252]	; (80068e0 <_vfiprintf_r+0x230>)
 80067e2:	f7f9 fd55 	bl	8000290 <memchr>
 80067e6:	f105 0801 	add.w	r8, r5, #1
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	b138      	cbz	r0, 80067fe <_vfiprintf_r+0x14e>
 80067ee:	4a3c      	ldr	r2, [pc, #240]	; (80068e0 <_vfiprintf_r+0x230>)
 80067f0:	1a80      	subs	r0, r0, r2
 80067f2:	fa07 f000 	lsl.w	r0, r7, r0
 80067f6:	4318      	orrs	r0, r3
 80067f8:	9004      	str	r0, [sp, #16]
 80067fa:	4645      	mov	r5, r8
 80067fc:	e7ee      	b.n	80067dc <_vfiprintf_r+0x12c>
 80067fe:	06d9      	lsls	r1, r3, #27
 8006800:	bf44      	itt	mi
 8006802:	2220      	movmi	r2, #32
 8006804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006808:	071a      	lsls	r2, r3, #28
 800680a:	bf44      	itt	mi
 800680c:	222b      	movmi	r2, #43	; 0x2b
 800680e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006812:	782a      	ldrb	r2, [r5, #0]
 8006814:	2a2a      	cmp	r2, #42	; 0x2a
 8006816:	f43f af7e 	beq.w	8006716 <_vfiprintf_r+0x66>
 800681a:	9a07      	ldr	r2, [sp, #28]
 800681c:	2100      	movs	r1, #0
 800681e:	200a      	movs	r0, #10
 8006820:	46a8      	mov	r8, r5
 8006822:	3501      	adds	r5, #1
 8006824:	f898 3000 	ldrb.w	r3, [r8]
 8006828:	3b30      	subs	r3, #48	; 0x30
 800682a:	2b09      	cmp	r3, #9
 800682c:	d803      	bhi.n	8006836 <_vfiprintf_r+0x186>
 800682e:	fb00 3202 	mla	r2, r0, r2, r3
 8006832:	2101      	movs	r1, #1
 8006834:	e7f4      	b.n	8006820 <_vfiprintf_r+0x170>
 8006836:	2900      	cmp	r1, #0
 8006838:	f43f af79 	beq.w	800672e <_vfiprintf_r+0x7e>
 800683c:	9207      	str	r2, [sp, #28]
 800683e:	e776      	b.n	800672e <_vfiprintf_r+0x7e>
 8006840:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006844:	2b2a      	cmp	r3, #42	; 0x2a
 8006846:	d10b      	bne.n	8006860 <_vfiprintf_r+0x1b0>
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	1d1a      	adds	r2, r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	9203      	str	r2, [sp, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	bfb8      	it	lt
 8006854:	f04f 33ff 	movlt.w	r3, #4294967295
 8006858:	f108 0802 	add.w	r8, r8, #2
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	e76b      	b.n	8006738 <_vfiprintf_r+0x88>
 8006860:	2300      	movs	r3, #0
 8006862:	9305      	str	r3, [sp, #20]
 8006864:	f108 0001 	add.w	r0, r8, #1
 8006868:	4619      	mov	r1, r3
 800686a:	250a      	movs	r5, #10
 800686c:	4680      	mov	r8, r0
 800686e:	3001      	adds	r0, #1
 8006870:	f898 2000 	ldrb.w	r2, [r8]
 8006874:	3a30      	subs	r2, #48	; 0x30
 8006876:	2a09      	cmp	r2, #9
 8006878:	d803      	bhi.n	8006882 <_vfiprintf_r+0x1d2>
 800687a:	fb05 2101 	mla	r1, r5, r1, r2
 800687e:	2301      	movs	r3, #1
 8006880:	e7f4      	b.n	800686c <_vfiprintf_r+0x1bc>
 8006882:	2b00      	cmp	r3, #0
 8006884:	f43f af58 	beq.w	8006738 <_vfiprintf_r+0x88>
 8006888:	9105      	str	r1, [sp, #20]
 800688a:	e755      	b.n	8006738 <_vfiprintf_r+0x88>
 800688c:	ab03      	add	r3, sp, #12
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	4622      	mov	r2, r4
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <_vfiprintf_r+0x234>)
 8006894:	a904      	add	r1, sp, #16
 8006896:	4630      	mov	r0, r6
 8006898:	f7fb fef4 	bl	8002684 <_printf_float>
 800689c:	e007      	b.n	80068ae <_vfiprintf_r+0x1fe>
 800689e:	ab03      	add	r3, sp, #12
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4622      	mov	r2, r4
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <_vfiprintf_r+0x234>)
 80068a6:	a904      	add	r1, sp, #16
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7fc f98b 	bl	8002bc4 <_printf_i>
 80068ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068b2:	4682      	mov	sl, r0
 80068b4:	f47f af68 	bne.w	8006788 <_vfiprintf_r+0xd8>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	065b      	lsls	r3, r3, #25
 80068bc:	f53f af28 	bmi.w	8006710 <_vfiprintf_r+0x60>
 80068c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068c2:	b01d      	add	sp, #116	; 0x74
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	08006dd8 	.word	0x08006dd8
 80068cc:	08006df8 	.word	0x08006df8
 80068d0:	08006e18 	.word	0x08006e18
 80068d4:	08006f42 	.word	0x08006f42
 80068d8:	08006f46 	.word	0x08006f46
 80068dc:	08002685 	.word	0x08002685
 80068e0:	08006f3c 	.word	0x08006f3c
 80068e4:	0800668d 	.word	0x0800668d

080068e8 <_sbrk_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4c06      	ldr	r4, [pc, #24]	; (8006904 <_sbrk_r+0x1c>)
 80068ec:	2300      	movs	r3, #0
 80068ee:	4605      	mov	r5, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	6023      	str	r3, [r4, #0]
 80068f4:	f7fb fdb2 	bl	800245c <_sbrk>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_sbrk_r+0x1a>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_sbrk_r+0x1a>
 8006900:	602b      	str	r3, [r5, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20000e28 	.word	0x20000e28

08006908 <__sread>:
 8006908:	b510      	push	{r4, lr}
 800690a:	460c      	mov	r4, r1
 800690c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006910:	f000 f8ea 	bl	8006ae8 <_read_r>
 8006914:	2800      	cmp	r0, #0
 8006916:	bfab      	itete	ge
 8006918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800691a:	89a3      	ldrhlt	r3, [r4, #12]
 800691c:	181b      	addge	r3, r3, r0
 800691e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006922:	bfac      	ite	ge
 8006924:	6563      	strge	r3, [r4, #84]	; 0x54
 8006926:	81a3      	strhlt	r3, [r4, #12]
 8006928:	bd10      	pop	{r4, pc}

0800692a <__swrite>:
 800692a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692e:	461f      	mov	r7, r3
 8006930:	898b      	ldrh	r3, [r1, #12]
 8006932:	05db      	lsls	r3, r3, #23
 8006934:	4605      	mov	r5, r0
 8006936:	460c      	mov	r4, r1
 8006938:	4616      	mov	r6, r2
 800693a:	d505      	bpl.n	8006948 <__swrite+0x1e>
 800693c:	2302      	movs	r3, #2
 800693e:	2200      	movs	r2, #0
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	f000 f87c 	bl	8006a40 <_lseek_r>
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800694e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	4628      	mov	r0, r5
 800695a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800695e:	f000 b82b 	b.w	80069b8 <_write_r>

08006962 <__sseek>:
 8006962:	b510      	push	{r4, lr}
 8006964:	460c      	mov	r4, r1
 8006966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696a:	f000 f869 	bl	8006a40 <_lseek_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	bf15      	itete	ne
 8006974:	6560      	strne	r0, [r4, #84]	; 0x54
 8006976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800697a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800697e:	81a3      	strheq	r3, [r4, #12]
 8006980:	bf18      	it	ne
 8006982:	81a3      	strhne	r3, [r4, #12]
 8006984:	bd10      	pop	{r4, pc}

08006986 <__sclose>:
 8006986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698a:	f000 b827 	b.w	80069dc <_close_r>

0800698e <strncmp>:
 800698e:	b530      	push	{r4, r5, lr}
 8006990:	b182      	cbz	r2, 80069b4 <strncmp+0x26>
 8006992:	1e45      	subs	r5, r0, #1
 8006994:	3901      	subs	r1, #1
 8006996:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800699a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800699e:	42a3      	cmp	r3, r4
 80069a0:	d106      	bne.n	80069b0 <strncmp+0x22>
 80069a2:	43ec      	mvns	r4, r5
 80069a4:	4414      	add	r4, r2
 80069a6:	42e0      	cmn	r0, r4
 80069a8:	d001      	beq.n	80069ae <strncmp+0x20>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f3      	bne.n	8006996 <strncmp+0x8>
 80069ae:	461c      	mov	r4, r3
 80069b0:	1b18      	subs	r0, r3, r4
 80069b2:	bd30      	pop	{r4, r5, pc}
 80069b4:	4610      	mov	r0, r2
 80069b6:	bd30      	pop	{r4, r5, pc}

080069b8 <_write_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4c07      	ldr	r4, [pc, #28]	; (80069d8 <_write_r+0x20>)
 80069bc:	4605      	mov	r5, r0
 80069be:	4608      	mov	r0, r1
 80069c0:	4611      	mov	r1, r2
 80069c2:	2200      	movs	r2, #0
 80069c4:	6022      	str	r2, [r4, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f7fa ff26 	bl	8001818 <_write>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_write_r+0x1e>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_write_r+0x1e>
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20000e28 	.word	0x20000e28

080069dc <_close_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4c06      	ldr	r4, [pc, #24]	; (80069f8 <_close_r+0x1c>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	4605      	mov	r5, r0
 80069e4:	4608      	mov	r0, r1
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	f7fa ff32 	bl	8001850 <_close>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_close_r+0x1a>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_close_r+0x1a>
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000e28 	.word	0x20000e28

080069fc <_fstat_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4c07      	ldr	r4, [pc, #28]	; (8006a1c <_fstat_r+0x20>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4605      	mov	r5, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	f7fa ff2d 	bl	8001868 <_fstat>
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d102      	bne.n	8006a18 <_fstat_r+0x1c>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	b103      	cbz	r3, 8006a18 <_fstat_r+0x1c>
 8006a16:	602b      	str	r3, [r5, #0]
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000e28 	.word	0x20000e28

08006a20 <_isatty_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4c06      	ldr	r4, [pc, #24]	; (8006a3c <_isatty_r+0x1c>)
 8006a24:	2300      	movs	r3, #0
 8006a26:	4605      	mov	r5, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	f7fa ff2c 	bl	8001888 <_isatty>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_isatty_r+0x1a>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_isatty_r+0x1a>
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000e28 	.word	0x20000e28

08006a40 <_lseek_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4c07      	ldr	r4, [pc, #28]	; (8006a60 <_lseek_r+0x20>)
 8006a44:	4605      	mov	r5, r0
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	6022      	str	r2, [r4, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fa ff26 	bl	80018a0 <_lseek>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_lseek_r+0x1e>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_lseek_r+0x1e>
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20000e28 	.word	0x20000e28

08006a64 <memmove>:
 8006a64:	4288      	cmp	r0, r1
 8006a66:	b510      	push	{r4, lr}
 8006a68:	eb01 0302 	add.w	r3, r1, r2
 8006a6c:	d801      	bhi.n	8006a72 <memmove+0xe>
 8006a6e:	1e42      	subs	r2, r0, #1
 8006a70:	e00b      	b.n	8006a8a <memmove+0x26>
 8006a72:	4298      	cmp	r0, r3
 8006a74:	d2fb      	bcs.n	8006a6e <memmove+0xa>
 8006a76:	1881      	adds	r1, r0, r2
 8006a78:	1ad2      	subs	r2, r2, r3
 8006a7a:	42d3      	cmn	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <memmove+0x24>
 8006a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a86:	e7f8      	b.n	8006a7a <memmove+0x16>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	4299      	cmp	r1, r3
 8006a8c:	d004      	beq.n	8006a98 <memmove+0x34>
 8006a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a96:	e7f8      	b.n	8006a8a <memmove+0x26>
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <_realloc_r>:
 8006a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	4615      	mov	r5, r2
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	b921      	cbnz	r1, 8006aae <_realloc_r+0x14>
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006aaa:	f7ff bc35 	b.w	8006318 <_malloc_r>
 8006aae:	b91a      	cbnz	r2, 8006ab8 <_realloc_r+0x1e>
 8006ab0:	f7ff fbec 	bl	800628c <_free_r>
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab8:	f000 f828 	bl	8006b0c <_malloc_usable_size_r>
 8006abc:	4285      	cmp	r5, r0
 8006abe:	d90e      	bls.n	8006ade <_realloc_r+0x44>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f7ff fc28 	bl	8006318 <_malloc_r>
 8006ac8:	4604      	mov	r4, r0
 8006aca:	b150      	cbz	r0, 8006ae2 <_realloc_r+0x48>
 8006acc:	4631      	mov	r1, r6
 8006ace:	462a      	mov	r2, r5
 8006ad0:	f7fb fd30 	bl	8002534 <memcpy>
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	f7ff fbd8 	bl	800628c <_free_r>
 8006adc:	e001      	b.n	8006ae2 <_realloc_r+0x48>
 8006ade:	4630      	mov	r0, r6
 8006ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae8 <_read_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4c07      	ldr	r4, [pc, #28]	; (8006b08 <_read_r+0x20>)
 8006aec:	4605      	mov	r5, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fa fe64 	bl	80017c4 <_read>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_read_r+0x1e>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_read_r+0x1e>
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000e28 	.word	0x20000e28

08006b0c <_malloc_usable_size_r>:
 8006b0c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006b10:	2800      	cmp	r0, #0
 8006b12:	bfbe      	ittt	lt
 8006b14:	1809      	addlt	r1, r1, r0
 8006b16:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8006b1a:	18c0      	addlt	r0, r0, r3
 8006b1c:	3804      	subs	r0, #4
 8006b1e:	4770      	bx	lr

08006b20 <_init>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	bf00      	nop
 8006b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b26:	bc08      	pop	{r3}
 8006b28:	469e      	mov	lr, r3
 8006b2a:	4770      	bx	lr

08006b2c <_fini>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	bf00      	nop
 8006b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b32:	bc08      	pop	{r3}
 8006b34:	469e      	mov	lr, r3
 8006b36:	4770      	bx	lr
